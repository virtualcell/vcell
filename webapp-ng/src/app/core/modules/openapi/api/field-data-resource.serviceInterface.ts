/**
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { AnalyzedFile } from '../model/models';
import { ExternalDataIdentifier } from '../model/models';
import { FieldDataReference } from '../model/models';
import { SavedResults } from '../model/models';
import { Shape } from '../model/models';
import { SourceModel } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface FieldDataResourceServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Delete the selected field data.
     * 
     * @param fieldDataID 
     */
    _delete(fieldDataID: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Analyze the field data from the uploaded file. Filenames must be lowercase alphanumeric, and can contain underscores.
     * 
     * @param file 
     * @param fileName 
     */
    analyzeFile(file?: Blob, fileName?: string, extraHttpRequestParams?: any): Observable<AnalyzedFile>;

    /**
     * Copy all existing field data from a BioModel/MathModel if not already owned.
     * 
     * @param sourceModel 
     */
    copyModelsFieldData(sourceModel?: SourceModel, extraHttpRequestParams?: any): Observable<{ [key: string]: ExternalDataIdentifier; }>;

    /**
     * Take the analyzed results of the field data, modify it to your liking, then save it on the server.
     * 
     * @param analyzedFile 
     */
    createFromAnalyzedFile(analyzedFile?: AnalyzedFile, extraHttpRequestParams?: any): Observable<SavedResults>;

    /**
     * Create new field data from a simulation.
     * 
     * @param simKeyReference 
     * @param jobIndex 
     * @param newFieldDataName 
     */
    createFromSimulation(simKeyReference?: string, jobIndex?: number, newFieldDataName?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get all of the ids used to identify, and retrieve field data.
     * 
     */
    getAllIDs(extraHttpRequestParams?: any): Observable<Array<FieldDataReference>>;

    /**
     * Get the shape of the field data. That is it\&#39;s size, origin, extent, and data identifiers.
     * 
     * @param fieldDataID 
     */
    getShapeFromID(fieldDataID: string, extraHttpRequestParams?: any): Observable<Shape>;

}
