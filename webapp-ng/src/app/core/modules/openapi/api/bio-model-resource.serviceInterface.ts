/**
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { BioModel } from '../model/models';
import { BioModelSummary } from '../model/models';
import { VCellHTTPError } from '../model/models';
import { VCellInfoContainer } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface BioModelResourceServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Delete the BioModel from VCell\&#39;s database.
     * 
     * @param bioModelID 
     */
    deleteBioModel(bioModelID: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get BioModel.
     * 
     * @param bioModelID 
     */
    getBioModel(bioModelID: string, extraHttpRequestParams?: any): Observable<BioModel>;

    /**
     * Return BioModel summaries.
     * 
     * @param includePublicAndShared Includes BioModel summaries that are public or shared with requester. Default is true.
     */
    getBioModelSummaries(includePublicAndShared?: boolean, extraHttpRequestParams?: any): Observable<Array<BioModelSummary>>;

    /**
     * All of the text based information about a BioModel (summary, version, publication status, etc...), but not the actual BioModel itself.
     * 
     * @param bioModelID 
     */
    getBioModelSummary(bioModelID: string, extraHttpRequestParams?: any): Observable<BioModelSummary>;

    /**
     * Get the BioModel in VCML format.
     * 
     * @param bioModelID 
     */
    getBioModelVCML(bioModelID: string, extraHttpRequestParams?: any): Observable<string>;

    /**
     * 
     * All of the summary objects for this particular user.
     */
    getInfoContainers(extraHttpRequestParams?: any): Observable<VCellInfoContainer>;

    /**
     * Save\&#39;s the given BioModel. Optional parameters of name and simulations to update due to math changes. Returns saved BioModel as VCML.
     * 
     * @param body BioModelVCML which will be saved.
     * @param newName Name to save new BioModel under. Leave blank if re-saving existing BioModel.
     * @param simsRequiringUpdates The name of simulations that will be prepared for future execution.
     */
    saveBioModel(body: string, newName?: string, simsRequiringUpdates?: Array<string>, extraHttpRequestParams?: any): Observable<string>;

}
