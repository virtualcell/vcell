#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def getDataSetFileOfVariableAtTimeIndex(self, simulationDataSetRef, varInfo, timeIndex):
    """
    Parameters:
     - simulationDataSetRef
     - varInfo
     - timeIndex
    """
    pass

  def getSimsFromOpenModels(self):
    pass

  def getTimePoints(self, simulationDataSetRef):
    """
    Parameters:
     - simulationDataSetRef
    """
    pass

  def getVariableList(self, simulationDataSetRef):
    """
    Parameters:
     - simulationDataSetRef
    """
    pass

  def getPostProcessingData(self, simulationDataSetRef):
    """
    Parameters:
     - simulationDataSetRef
    """
    pass

  def displayPostProcessingDataInVCell(self, simulationDataSetRef):
    """
    Parameters:
     - simulationDataSetRef
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def getDataSetFileOfVariableAtTimeIndex(self, simulationDataSetRef, varInfo, timeIndex):
    """
    Parameters:
     - simulationDataSetRef
     - varInfo
     - timeIndex
    """
    self.send_getDataSetFileOfVariableAtTimeIndex(simulationDataSetRef, varInfo, timeIndex)
    return self.recv_getDataSetFileOfVariableAtTimeIndex()

  def send_getDataSetFileOfVariableAtTimeIndex(self, simulationDataSetRef, varInfo, timeIndex):
    self._oprot.writeMessageBegin('getDataSetFileOfVariableAtTimeIndex', TMessageType.CALL, self._seqid)
    args = getDataSetFileOfVariableAtTimeIndex_args()
    args.simulationDataSetRef = simulationDataSetRef
    args.varInfo = varInfo
    args.timeIndex = timeIndex
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getDataSetFileOfVariableAtTimeIndex(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getDataSetFileOfVariableAtTimeIndex_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.dataAccessException is not None:
      raise result.dataAccessException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getDataSetFileOfVariableAtTimeIndex failed: unknown result");

  def getSimsFromOpenModels(self):
    self.send_getSimsFromOpenModels()
    return self.recv_getSimsFromOpenModels()

  def send_getSimsFromOpenModels(self):
    self._oprot.writeMessageBegin('getSimsFromOpenModels', TMessageType.CALL, self._seqid)
    args = getSimsFromOpenModels_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSimsFromOpenModels(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getSimsFromOpenModels_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.dataAccessException is not None:
      raise result.dataAccessException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSimsFromOpenModels failed: unknown result");

  def getTimePoints(self, simulationDataSetRef):
    """
    Parameters:
     - simulationDataSetRef
    """
    self.send_getTimePoints(simulationDataSetRef)
    return self.recv_getTimePoints()

  def send_getTimePoints(self, simulationDataSetRef):
    self._oprot.writeMessageBegin('getTimePoints', TMessageType.CALL, self._seqid)
    args = getTimePoints_args()
    args.simulationDataSetRef = simulationDataSetRef
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getTimePoints(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getTimePoints_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.dataAccessException is not None:
      raise result.dataAccessException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getTimePoints failed: unknown result");

  def getVariableList(self, simulationDataSetRef):
    """
    Parameters:
     - simulationDataSetRef
    """
    self.send_getVariableList(simulationDataSetRef)
    return self.recv_getVariableList()

  def send_getVariableList(self, simulationDataSetRef):
    self._oprot.writeMessageBegin('getVariableList', TMessageType.CALL, self._seqid)
    args = getVariableList_args()
    args.simulationDataSetRef = simulationDataSetRef
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getVariableList(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getVariableList_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.dataAccessException is not None:
      raise result.dataAccessException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getVariableList failed: unknown result");

  def getPostProcessingData(self, simulationDataSetRef):
    """
    Parameters:
     - simulationDataSetRef
    """
    self.send_getPostProcessingData(simulationDataSetRef)
    return self.recv_getPostProcessingData()

  def send_getPostProcessingData(self, simulationDataSetRef):
    self._oprot.writeMessageBegin('getPostProcessingData', TMessageType.CALL, self._seqid)
    args = getPostProcessingData_args()
    args.simulationDataSetRef = simulationDataSetRef
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getPostProcessingData(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getPostProcessingData_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.dataAccessException is not None:
      raise result.dataAccessException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getPostProcessingData failed: unknown result");

  def displayPostProcessingDataInVCell(self, simulationDataSetRef):
    """
    Parameters:
     - simulationDataSetRef
    """
    self.send_displayPostProcessingDataInVCell(simulationDataSetRef)
    self.recv_displayPostProcessingDataInVCell()

  def send_displayPostProcessingDataInVCell(self, simulationDataSetRef):
    self._oprot.writeMessageBegin('displayPostProcessingDataInVCell', TMessageType.CALL, self._seqid)
    args = displayPostProcessingDataInVCell_args()
    args.simulationDataSetRef = simulationDataSetRef
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_displayPostProcessingDataInVCell(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = displayPostProcessingDataInVCell_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.dataAccessException is not None:
      raise result.dataAccessException
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["getDataSetFileOfVariableAtTimeIndex"] = Processor.process_getDataSetFileOfVariableAtTimeIndex
    self._processMap["getSimsFromOpenModels"] = Processor.process_getSimsFromOpenModels
    self._processMap["getTimePoints"] = Processor.process_getTimePoints
    self._processMap["getVariableList"] = Processor.process_getVariableList
    self._processMap["getPostProcessingData"] = Processor.process_getPostProcessingData
    self._processMap["displayPostProcessingDataInVCell"] = Processor.process_displayPostProcessingDataInVCell

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_getDataSetFileOfVariableAtTimeIndex(self, seqid, iprot, oprot):
    args = getDataSetFileOfVariableAtTimeIndex_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getDataSetFileOfVariableAtTimeIndex_result()
    try:
      result.success = self._handler.getDataSetFileOfVariableAtTimeIndex(args.simulationDataSetRef, args.varInfo, args.timeIndex)
    except ThriftDataAccessException, dataAccessException:
      result.dataAccessException = dataAccessException
    oprot.writeMessageBegin("getDataSetFileOfVariableAtTimeIndex", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSimsFromOpenModels(self, seqid, iprot, oprot):
    args = getSimsFromOpenModels_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSimsFromOpenModels_result()
    try:
      result.success = self._handler.getSimsFromOpenModels()
    except ThriftDataAccessException, dataAccessException:
      result.dataAccessException = dataAccessException
    oprot.writeMessageBegin("getSimsFromOpenModels", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getTimePoints(self, seqid, iprot, oprot):
    args = getTimePoints_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getTimePoints_result()
    try:
      result.success = self._handler.getTimePoints(args.simulationDataSetRef)
    except ThriftDataAccessException, dataAccessException:
      result.dataAccessException = dataAccessException
    oprot.writeMessageBegin("getTimePoints", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getVariableList(self, seqid, iprot, oprot):
    args = getVariableList_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getVariableList_result()
    try:
      result.success = self._handler.getVariableList(args.simulationDataSetRef)
    except ThriftDataAccessException, dataAccessException:
      result.dataAccessException = dataAccessException
    oprot.writeMessageBegin("getVariableList", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getPostProcessingData(self, seqid, iprot, oprot):
    args = getPostProcessingData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getPostProcessingData_result()
    try:
      result.success = self._handler.getPostProcessingData(args.simulationDataSetRef)
    except ThriftDataAccessException, dataAccessException:
      result.dataAccessException = dataAccessException
    oprot.writeMessageBegin("getPostProcessingData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_displayPostProcessingDataInVCell(self, seqid, iprot, oprot):
    args = displayPostProcessingDataInVCell_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = displayPostProcessingDataInVCell_result()
    try:
      self._handler.displayPostProcessingDataInVCell(args.simulationDataSetRef)
    except ThriftDataAccessException, dataAccessException:
      result.dataAccessException = dataAccessException
    oprot.writeMessageBegin("displayPostProcessingDataInVCell", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getDataSetFileOfVariableAtTimeIndex_args:
  """
  Attributes:
   - simulationDataSetRef
   - varInfo
   - timeIndex
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'simulationDataSetRef', (SimulationDataSetRef, SimulationDataSetRef.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'varInfo', (VariableInfo, VariableInfo.thrift_spec), None, ), # 2
    (3, TType.I32, 'timeIndex', None, None, ), # 3
  )

  def __init__(self, simulationDataSetRef=None, varInfo=None, timeIndex=None,):
    self.simulationDataSetRef = simulationDataSetRef
    self.varInfo = varInfo
    self.timeIndex = timeIndex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.simulationDataSetRef = SimulationDataSetRef()
          self.simulationDataSetRef.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.varInfo = VariableInfo()
          self.varInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.timeIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDataSetFileOfVariableAtTimeIndex_args')
    if self.simulationDataSetRef is not None:
      oprot.writeFieldBegin('simulationDataSetRef', TType.STRUCT, 1)
      self.simulationDataSetRef.write(oprot)
      oprot.writeFieldEnd()
    if self.varInfo is not None:
      oprot.writeFieldBegin('varInfo', TType.STRUCT, 2)
      self.varInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.timeIndex is not None:
      oprot.writeFieldBegin('timeIndex', TType.I32, 3)
      oprot.writeI32(self.timeIndex)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.simulationDataSetRef)
    value = (value * 31) ^ hash(self.varInfo)
    value = (value * 31) ^ hash(self.timeIndex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDataSetFileOfVariableAtTimeIndex_result:
  """
  Attributes:
   - success
   - dataAccessException
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'dataAccessException', (ThriftDataAccessException, ThriftDataAccessException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, dataAccessException=None,):
    self.success = success
    self.dataAccessException = dataAccessException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.dataAccessException = ThriftDataAccessException()
          self.dataAccessException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDataSetFileOfVariableAtTimeIndex_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.dataAccessException is not None:
      oprot.writeFieldBegin('dataAccessException', TType.STRUCT, 1)
      self.dataAccessException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.dataAccessException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSimsFromOpenModels_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSimsFromOpenModels_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSimsFromOpenModels_result:
  """
  Attributes:
   - success
   - dataAccessException
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(SimulationDataSetRef, SimulationDataSetRef.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'dataAccessException', (ThriftDataAccessException, ThriftDataAccessException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, dataAccessException=None,):
    self.success = success
    self.dataAccessException = dataAccessException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = SimulationDataSetRef()
            _elem47.read(iprot)
            self.success.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.dataAccessException = ThriftDataAccessException()
          self.dataAccessException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSimsFromOpenModels_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter48 in self.success:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.dataAccessException is not None:
      oprot.writeFieldBegin('dataAccessException', TType.STRUCT, 1)
      self.dataAccessException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.dataAccessException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTimePoints_args:
  """
  Attributes:
   - simulationDataSetRef
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'simulationDataSetRef', (SimulationDataSetRef, SimulationDataSetRef.thrift_spec), None, ), # 1
  )

  def __init__(self, simulationDataSetRef=None,):
    self.simulationDataSetRef = simulationDataSetRef

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.simulationDataSetRef = SimulationDataSetRef()
          self.simulationDataSetRef.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTimePoints_args')
    if self.simulationDataSetRef is not None:
      oprot.writeFieldBegin('simulationDataSetRef', TType.STRUCT, 1)
      self.simulationDataSetRef.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.simulationDataSetRef)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTimePoints_result:
  """
  Attributes:
   - success
   - dataAccessException
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.DOUBLE,None), None, ), # 0
    (1, TType.STRUCT, 'dataAccessException', (ThriftDataAccessException, ThriftDataAccessException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, dataAccessException=None,):
    self.success = success
    self.dataAccessException = dataAccessException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = iprot.readDouble();
            self.success.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.dataAccessException = ThriftDataAccessException()
          self.dataAccessException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTimePoints_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.DOUBLE, len(self.success))
      for iter55 in self.success:
        oprot.writeDouble(iter55)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.dataAccessException is not None:
      oprot.writeFieldBegin('dataAccessException', TType.STRUCT, 1)
      self.dataAccessException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.dataAccessException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getVariableList_args:
  """
  Attributes:
   - simulationDataSetRef
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'simulationDataSetRef', (SimulationDataSetRef, SimulationDataSetRef.thrift_spec), None, ), # 1
  )

  def __init__(self, simulationDataSetRef=None,):
    self.simulationDataSetRef = simulationDataSetRef

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.simulationDataSetRef = SimulationDataSetRef()
          self.simulationDataSetRef.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getVariableList_args')
    if self.simulationDataSetRef is not None:
      oprot.writeFieldBegin('simulationDataSetRef', TType.STRUCT, 1)
      self.simulationDataSetRef.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.simulationDataSetRef)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getVariableList_result:
  """
  Attributes:
   - success
   - dataAccessException
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(VariableInfo, VariableInfo.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'dataAccessException', (ThriftDataAccessException, ThriftDataAccessException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, dataAccessException=None,):
    self.success = success
    self.dataAccessException = dataAccessException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = VariableInfo()
            _elem61.read(iprot)
            self.success.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.dataAccessException = ThriftDataAccessException()
          self.dataAccessException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getVariableList_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter62 in self.success:
        iter62.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.dataAccessException is not None:
      oprot.writeFieldBegin('dataAccessException', TType.STRUCT, 1)
      self.dataAccessException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.dataAccessException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPostProcessingData_args:
  """
  Attributes:
   - simulationDataSetRef
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'simulationDataSetRef', (SimulationDataSetRef, SimulationDataSetRef.thrift_spec), None, ), # 1
  )

  def __init__(self, simulationDataSetRef=None,):
    self.simulationDataSetRef = simulationDataSetRef

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.simulationDataSetRef = SimulationDataSetRef()
          self.simulationDataSetRef.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPostProcessingData_args')
    if self.simulationDataSetRef is not None:
      oprot.writeFieldBegin('simulationDataSetRef', TType.STRUCT, 1)
      self.simulationDataSetRef.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.simulationDataSetRef)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPostProcessingData_result:
  """
  Attributes:
   - success
   - dataAccessException
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (PostProcessingData, PostProcessingData.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'dataAccessException', (ThriftDataAccessException, ThriftDataAccessException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, dataAccessException=None,):
    self.success = success
    self.dataAccessException = dataAccessException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = PostProcessingData()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.dataAccessException = ThriftDataAccessException()
          self.dataAccessException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPostProcessingData_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.dataAccessException is not None:
      oprot.writeFieldBegin('dataAccessException', TType.STRUCT, 1)
      self.dataAccessException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.dataAccessException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class displayPostProcessingDataInVCell_args:
  """
  Attributes:
   - simulationDataSetRef
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'simulationDataSetRef', (SimulationDataSetRef, SimulationDataSetRef.thrift_spec), None, ), # 1
  )

  def __init__(self, simulationDataSetRef=None,):
    self.simulationDataSetRef = simulationDataSetRef

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.simulationDataSetRef = SimulationDataSetRef()
          self.simulationDataSetRef.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('displayPostProcessingDataInVCell_args')
    if self.simulationDataSetRef is not None:
      oprot.writeFieldBegin('simulationDataSetRef', TType.STRUCT, 1)
      self.simulationDataSetRef.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.simulationDataSetRef)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class displayPostProcessingDataInVCell_result:
  """
  Attributes:
   - dataAccessException
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'dataAccessException', (ThriftDataAccessException, ThriftDataAccessException.thrift_spec), None, ), # 1
  )

  def __init__(self, dataAccessException=None,):
    self.dataAccessException = dataAccessException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.dataAccessException = ThriftDataAccessException()
          self.dataAccessException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('displayPostProcessingDataInVCell_result')
    if self.dataAccessException is not None:
      oprot.writeFieldBegin('dataAccessException', TType.STRUCT, 1)
      self.dataAccessException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dataAccessException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
