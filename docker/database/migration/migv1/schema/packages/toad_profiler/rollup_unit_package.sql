-- Generated by Ora2Pg, the Oracle database Schema converter, version 24.3
-- Copyright 2000-2024 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=vcell-oracle.cam.uchc.edu;service_name=ORCLPDB1;port=1521

SET client_encoding TO 'UTF8';
SET search_path = vcell,toad_profiler,public;

-- compute the total time spent executing this unit - the sum of the
  -- time spent executing lines in this unit (for this run)
CREATE OR REPLACE PROCEDURE toad_profiler.rollup_unit (run_number bigint, UnitNumber bigint, UnitType text, UnitOwner text, UnitName text) AS $body$
DECLARE


  TYPE TSourceTable IS TABLE OF varchar(4000) INDEX BY integer;
  SourceTable TSourceTable;
  TriggerBody text;
  FoundTriggerSource boolean;
  Cnt bigint;
  LnStart bigint;
  LnEnd   bigint;
  Pos bigint;
  vText varchar(4000);
  IsWrapped boolean;
  TotalTime bigint;

  -- Select the lines for the unit to find source code
  cLines CURSOR(run_number bigint, UnitNumber bigint) FOR
    SELECT line# from plsql_profiler_data
    where runid = run_number and unit_number = UnitNumber;

BEGIN
    select sum(total_time) into STRICT TotalTime
      from plsql_profiler_data
      where runid = run_number and unit_number = UnitNumber;

    if TotalTime IS NULL then
      TotalTime := 0;
    end if;

    update plsql_profiler_units set total_time = TotalTime
    where runid = run_number and unit_number = UnitNumber;

    -- Get trigger source into index-by table
    if UnitType = 'TRIGGER' then
      begin
        FoundTriggerSource := True;
        select trigger_body into STRICT TriggerBody
          from all_triggers where owner = UnitOwner and trigger_name = UnitName;
      exception
        when no_data_found then
          FoundTriggerSource := False;
      end;

      if FoundTriggerSource then
        Cnt     := 1;
        LnStart := 1;

        loop
          LnEnd := INSTR(TriggerBody, CHR(10), 1, Cnt);

          if (LnEnd = 0) then
            SourceTable(Cnt) := SubStr(TriggerBody, LnStart);
          else
            SourceTable(Cnt) := Substr(TriggerBody, LnStart, (LnEnd-LnStart));
          end if;

          LnStart := LnStart + (LnEnd-LnStart)+1;
          Cnt := Cnt+1;

          exit when(lnEnd = 0);
        end loop;
      end if;
    -- see if the code is wrapped
    else
      begin
        select upper(text) into STRICT vtext from all_source s
          where s.type = UnitType and s.owner = UnitOwner and
                s.name = UnitName and s.line = 1;
        IsWrapped := (position(' WRAPPED' in vText) > 0);
      exception
        when no_data_found then
          IsWrapped := False;
      end;
    end if;

    -- Get the source for each line in unit
    Cnt := 1;
    for linerec in cLines(run_number, UnitNumber) loop
      if UnitType = 'TRIGGER' then
        if FoundTriggerSource then
          vText := SourceTable(linerec.line#);
        else
          if Cnt = 1 then
            vText := '<source unavailable>';
          else
            vText := null;
          end if;
        end if;
      else
        if IsWrapped then
          if Cnt = 1 then
            vText := '<wrapped>';
          else
            vText := null;
          end if;
        else
          begin
            select text into STRICT vtext from all_source s
              where s.type = UnitType and s.owner = UnitOwner and
                    s.name = UnitName and s.line = linerec.line#;
          exception
            when no_data_found then
              vText := null;
          end;
        end if;
      end if;
      -- store the source line
      update plsql_profiler_data d set d.text = vText
      where d.runid = run_number and d.unit_number = UnitNumber and
            d.line# = linerec.line#;
      Cnt := Cnt+1;
    end loop;
  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE toad_profiler.rollup_unit (run_number bigint, UnitNumber bigint, UnitType text, UnitOwner text, UnitName text) FROM PUBLIC;
