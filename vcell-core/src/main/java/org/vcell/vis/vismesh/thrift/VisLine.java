/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.vcell.vis.vismesh.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)")
public class VisLine implements org.apache.thrift.TBase<VisLine, VisLine._Fields>, java.io.Serializable, Cloneable, Comparable<VisLine> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VisLine");

  private static final org.apache.thrift.protocol.TField P1_FIELD_DESC = new org.apache.thrift.protocol.TField("p1", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField P2_FIELD_DESC = new org.apache.thrift.protocol.TField("p2", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CHOMBO_SURFACE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("chomboSurfaceIndex", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField FINITE_VOLUME_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("finiteVolumeIndex", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField MOVING_BOUNDARY_SURFACE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("movingBoundarySurfaceIndex", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new VisLineStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new VisLineTupleSchemeFactory();

  public int p1; // required
  public int p2; // required
  public @org.apache.thrift.annotation.Nullable ChomboSurfaceIndex chomboSurfaceIndex; // optional
  public @org.apache.thrift.annotation.Nullable FiniteVolumeIndex finiteVolumeIndex; // optional
  public @org.apache.thrift.annotation.Nullable MovingBoundarySurfaceIndex movingBoundarySurfaceIndex; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P1((short)1, "p1"),
    P2((short)2, "p2"),
    CHOMBO_SURFACE_INDEX((short)3, "chomboSurfaceIndex"),
    FINITE_VOLUME_INDEX((short)4, "finiteVolumeIndex"),
    MOVING_BOUNDARY_SURFACE_INDEX((short)5, "movingBoundarySurfaceIndex");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P1
          return P1;
        case 2: // P2
          return P2;
        case 3: // CHOMBO_SURFACE_INDEX
          return CHOMBO_SURFACE_INDEX;
        case 4: // FINITE_VOLUME_INDEX
          return FINITE_VOLUME_INDEX;
        case 5: // MOVING_BOUNDARY_SURFACE_INDEX
          return MOVING_BOUNDARY_SURFACE_INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __P1_ISSET_ID = 0;
  private static final int __P2_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CHOMBO_SURFACE_INDEX,_Fields.FINITE_VOLUME_INDEX,_Fields.MOVING_BOUNDARY_SURFACE_INDEX};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P1, new org.apache.thrift.meta_data.FieldMetaData("p1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.P2, new org.apache.thrift.meta_data.FieldMetaData("p2", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.CHOMBO_SURFACE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("chomboSurfaceIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChomboSurfaceIndex.class)));
    tmpMap.put(_Fields.FINITE_VOLUME_INDEX, new org.apache.thrift.meta_data.FieldMetaData("finiteVolumeIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FiniteVolumeIndex.class)));
    tmpMap.put(_Fields.MOVING_BOUNDARY_SURFACE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("movingBoundarySurfaceIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MovingBoundarySurfaceIndex.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VisLine.class, metaDataMap);
  }

  public VisLine() {
  }

  public VisLine(
    int p1,
    int p2)
  {
    this();
    this.p1 = p1;
    setP1IsSet(true);
    this.p2 = p2;
    setP2IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VisLine(VisLine other) {
    __isset_bitfield = other.__isset_bitfield;
    this.p1 = other.p1;
    this.p2 = other.p2;
    if (other.isSetChomboSurfaceIndex()) {
      this.chomboSurfaceIndex = new ChomboSurfaceIndex(other.chomboSurfaceIndex);
    }
    if (other.isSetFiniteVolumeIndex()) {
      this.finiteVolumeIndex = new FiniteVolumeIndex(other.finiteVolumeIndex);
    }
    if (other.isSetMovingBoundarySurfaceIndex()) {
      this.movingBoundarySurfaceIndex = new MovingBoundarySurfaceIndex(other.movingBoundarySurfaceIndex);
    }
  }

  @Override
  public VisLine deepCopy() {
    return new VisLine(this);
  }

  @Override
  public void clear() {
    setP1IsSet(false);
    this.p1 = 0;
    setP2IsSet(false);
    this.p2 = 0;
    this.chomboSurfaceIndex = null;
    this.finiteVolumeIndex = null;
    this.movingBoundarySurfaceIndex = null;
  }

  public int getP1() {
    return this.p1;
  }

  public VisLine setP1(int p1) {
    this.p1 = p1;
    setP1IsSet(true);
    return this;
  }

  public void unsetP1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __P1_ISSET_ID);
  }

  /** Returns true if field p1 is set (has been assigned a value) and false otherwise */
  public boolean isSetP1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __P1_ISSET_ID);
  }

  public void setP1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __P1_ISSET_ID, value);
  }

  public int getP2() {
    return this.p2;
  }

  public VisLine setP2(int p2) {
    this.p2 = p2;
    setP2IsSet(true);
    return this;
  }

  public void unsetP2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __P2_ISSET_ID);
  }

  /** Returns true if field p2 is set (has been assigned a value) and false otherwise */
  public boolean isSetP2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __P2_ISSET_ID);
  }

  public void setP2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __P2_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public ChomboSurfaceIndex getChomboSurfaceIndex() {
    return this.chomboSurfaceIndex;
  }

  public VisLine setChomboSurfaceIndex(@org.apache.thrift.annotation.Nullable ChomboSurfaceIndex chomboSurfaceIndex) {
    this.chomboSurfaceIndex = chomboSurfaceIndex;
    return this;
  }

  public void unsetChomboSurfaceIndex() {
    this.chomboSurfaceIndex = null;
  }

  /** Returns true if field chomboSurfaceIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetChomboSurfaceIndex() {
    return this.chomboSurfaceIndex != null;
  }

  public void setChomboSurfaceIndexIsSet(boolean value) {
    if (!value) {
      this.chomboSurfaceIndex = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public FiniteVolumeIndex getFiniteVolumeIndex() {
    return this.finiteVolumeIndex;
  }

  public VisLine setFiniteVolumeIndex(@org.apache.thrift.annotation.Nullable FiniteVolumeIndex finiteVolumeIndex) {
    this.finiteVolumeIndex = finiteVolumeIndex;
    return this;
  }

  public void unsetFiniteVolumeIndex() {
    this.finiteVolumeIndex = null;
  }

  /** Returns true if field finiteVolumeIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetFiniteVolumeIndex() {
    return this.finiteVolumeIndex != null;
  }

  public void setFiniteVolumeIndexIsSet(boolean value) {
    if (!value) {
      this.finiteVolumeIndex = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MovingBoundarySurfaceIndex getMovingBoundarySurfaceIndex() {
    return this.movingBoundarySurfaceIndex;
  }

  public VisLine setMovingBoundarySurfaceIndex(@org.apache.thrift.annotation.Nullable MovingBoundarySurfaceIndex movingBoundarySurfaceIndex) {
    this.movingBoundarySurfaceIndex = movingBoundarySurfaceIndex;
    return this;
  }

  public void unsetMovingBoundarySurfaceIndex() {
    this.movingBoundarySurfaceIndex = null;
  }

  /** Returns true if field movingBoundarySurfaceIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetMovingBoundarySurfaceIndex() {
    return this.movingBoundarySurfaceIndex != null;
  }

  public void setMovingBoundarySurfaceIndexIsSet(boolean value) {
    if (!value) {
      this.movingBoundarySurfaceIndex = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case P1:
      if (value == null) {
        unsetP1();
      } else {
        setP1((java.lang.Integer)value);
      }
      break;

    case P2:
      if (value == null) {
        unsetP2();
      } else {
        setP2((java.lang.Integer)value);
      }
      break;

    case CHOMBO_SURFACE_INDEX:
      if (value == null) {
        unsetChomboSurfaceIndex();
      } else {
        setChomboSurfaceIndex((ChomboSurfaceIndex)value);
      }
      break;

    case FINITE_VOLUME_INDEX:
      if (value == null) {
        unsetFiniteVolumeIndex();
      } else {
        setFiniteVolumeIndex((FiniteVolumeIndex)value);
      }
      break;

    case MOVING_BOUNDARY_SURFACE_INDEX:
      if (value == null) {
        unsetMovingBoundarySurfaceIndex();
      } else {
        setMovingBoundarySurfaceIndex((MovingBoundarySurfaceIndex)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case P1:
      return getP1();

    case P2:
      return getP2();

    case CHOMBO_SURFACE_INDEX:
      return getChomboSurfaceIndex();

    case FINITE_VOLUME_INDEX:
      return getFiniteVolumeIndex();

    case MOVING_BOUNDARY_SURFACE_INDEX:
      return getMovingBoundarySurfaceIndex();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case P1:
      return isSetP1();
    case P2:
      return isSetP2();
    case CHOMBO_SURFACE_INDEX:
      return isSetChomboSurfaceIndex();
    case FINITE_VOLUME_INDEX:
      return isSetFiniteVolumeIndex();
    case MOVING_BOUNDARY_SURFACE_INDEX:
      return isSetMovingBoundarySurfaceIndex();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof VisLine)
      return this.equals((VisLine)that);
    return false;
  }

  public boolean equals(VisLine that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_p1 = true;
    boolean that_present_p1 = true;
    if (this_present_p1 || that_present_p1) {
      if (!(this_present_p1 && that_present_p1))
        return false;
      if (this.p1 != that.p1)
        return false;
    }

    boolean this_present_p2 = true;
    boolean that_present_p2 = true;
    if (this_present_p2 || that_present_p2) {
      if (!(this_present_p2 && that_present_p2))
        return false;
      if (this.p2 != that.p2)
        return false;
    }

    boolean this_present_chomboSurfaceIndex = true && this.isSetChomboSurfaceIndex();
    boolean that_present_chomboSurfaceIndex = true && that.isSetChomboSurfaceIndex();
    if (this_present_chomboSurfaceIndex || that_present_chomboSurfaceIndex) {
      if (!(this_present_chomboSurfaceIndex && that_present_chomboSurfaceIndex))
        return false;
      if (!this.chomboSurfaceIndex.equals(that.chomboSurfaceIndex))
        return false;
    }

    boolean this_present_finiteVolumeIndex = true && this.isSetFiniteVolumeIndex();
    boolean that_present_finiteVolumeIndex = true && that.isSetFiniteVolumeIndex();
    if (this_present_finiteVolumeIndex || that_present_finiteVolumeIndex) {
      if (!(this_present_finiteVolumeIndex && that_present_finiteVolumeIndex))
        return false;
      if (!this.finiteVolumeIndex.equals(that.finiteVolumeIndex))
        return false;
    }

    boolean this_present_movingBoundarySurfaceIndex = true && this.isSetMovingBoundarySurfaceIndex();
    boolean that_present_movingBoundarySurfaceIndex = true && that.isSetMovingBoundarySurfaceIndex();
    if (this_present_movingBoundarySurfaceIndex || that_present_movingBoundarySurfaceIndex) {
      if (!(this_present_movingBoundarySurfaceIndex && that_present_movingBoundarySurfaceIndex))
        return false;
      if (!this.movingBoundarySurfaceIndex.equals(that.movingBoundarySurfaceIndex))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + p1;

    hashCode = hashCode * 8191 + p2;

    hashCode = hashCode * 8191 + ((isSetChomboSurfaceIndex()) ? 131071 : 524287);
    if (isSetChomboSurfaceIndex())
      hashCode = hashCode * 8191 + chomboSurfaceIndex.hashCode();

    hashCode = hashCode * 8191 + ((isSetFiniteVolumeIndex()) ? 131071 : 524287);
    if (isSetFiniteVolumeIndex())
      hashCode = hashCode * 8191 + finiteVolumeIndex.hashCode();

    hashCode = hashCode * 8191 + ((isSetMovingBoundarySurfaceIndex()) ? 131071 : 524287);
    if (isSetMovingBoundarySurfaceIndex())
      hashCode = hashCode * 8191 + movingBoundarySurfaceIndex.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(VisLine other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetP1(), other.isSetP1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p1, other.p1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetP2(), other.isSetP2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p2, other.p2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetChomboSurfaceIndex(), other.isSetChomboSurfaceIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChomboSurfaceIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chomboSurfaceIndex, other.chomboSurfaceIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFiniteVolumeIndex(), other.isSetFiniteVolumeIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFiniteVolumeIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finiteVolumeIndex, other.finiteVolumeIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMovingBoundarySurfaceIndex(), other.isSetMovingBoundarySurfaceIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMovingBoundarySurfaceIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.movingBoundarySurfaceIndex, other.movingBoundarySurfaceIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("VisLine(");
    boolean first = true;

    sb.append("p1:");
    sb.append(this.p1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("p2:");
    sb.append(this.p2);
    first = false;
    if (isSetChomboSurfaceIndex()) {
      if (!first) sb.append(", ");
      sb.append("chomboSurfaceIndex:");
      if (this.chomboSurfaceIndex == null) {
        sb.append("null");
      } else {
        sb.append(this.chomboSurfaceIndex);
      }
      first = false;
    }
    if (isSetFiniteVolumeIndex()) {
      if (!first) sb.append(", ");
      sb.append("finiteVolumeIndex:");
      if (this.finiteVolumeIndex == null) {
        sb.append("null");
      } else {
        sb.append(this.finiteVolumeIndex);
      }
      first = false;
    }
    if (isSetMovingBoundarySurfaceIndex()) {
      if (!first) sb.append(", ");
      sb.append("movingBoundarySurfaceIndex:");
      if (this.movingBoundarySurfaceIndex == null) {
        sb.append("null");
      } else {
        sb.append(this.movingBoundarySurfaceIndex);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'p1' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'p2' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (chomboSurfaceIndex != null) {
      chomboSurfaceIndex.validate();
    }
    if (finiteVolumeIndex != null) {
      finiteVolumeIndex.validate();
    }
    if (movingBoundarySurfaceIndex != null) {
      movingBoundarySurfaceIndex.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VisLineStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public VisLineStandardScheme getScheme() {
      return new VisLineStandardScheme();
    }
  }

  private static class VisLineStandardScheme extends org.apache.thrift.scheme.StandardScheme<VisLine> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, VisLine struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.p1 = iprot.readI32();
              struct.setP1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // P2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.p2 = iprot.readI32();
              struct.setP2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHOMBO_SURFACE_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.chomboSurfaceIndex = new ChomboSurfaceIndex();
              struct.chomboSurfaceIndex.read(iprot);
              struct.setChomboSurfaceIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FINITE_VOLUME_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.finiteVolumeIndex = new FiniteVolumeIndex();
              struct.finiteVolumeIndex.read(iprot);
              struct.setFiniteVolumeIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MOVING_BOUNDARY_SURFACE_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.movingBoundarySurfaceIndex = new MovingBoundarySurfaceIndex();
              struct.movingBoundarySurfaceIndex.read(iprot);
              struct.setMovingBoundarySurfaceIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetP1()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'p1' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetP2()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'p2' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, VisLine struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(P1_FIELD_DESC);
      oprot.writeI32(struct.p1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(P2_FIELD_DESC);
      oprot.writeI32(struct.p2);
      oprot.writeFieldEnd();
      if (struct.chomboSurfaceIndex != null) {
        if (struct.isSetChomboSurfaceIndex()) {
          oprot.writeFieldBegin(CHOMBO_SURFACE_INDEX_FIELD_DESC);
          struct.chomboSurfaceIndex.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.finiteVolumeIndex != null) {
        if (struct.isSetFiniteVolumeIndex()) {
          oprot.writeFieldBegin(FINITE_VOLUME_INDEX_FIELD_DESC);
          struct.finiteVolumeIndex.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.movingBoundarySurfaceIndex != null) {
        if (struct.isSetMovingBoundarySurfaceIndex()) {
          oprot.writeFieldBegin(MOVING_BOUNDARY_SURFACE_INDEX_FIELD_DESC);
          struct.movingBoundarySurfaceIndex.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VisLineTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public VisLineTupleScheme getScheme() {
      return new VisLineTupleScheme();
    }
  }

  private static class VisLineTupleScheme extends org.apache.thrift.scheme.TupleScheme<VisLine> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VisLine struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.p1);
      oprot.writeI32(struct.p2);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetChomboSurfaceIndex()) {
        optionals.set(0);
      }
      if (struct.isSetFiniteVolumeIndex()) {
        optionals.set(1);
      }
      if (struct.isSetMovingBoundarySurfaceIndex()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetChomboSurfaceIndex()) {
        struct.chomboSurfaceIndex.write(oprot);
      }
      if (struct.isSetFiniteVolumeIndex()) {
        struct.finiteVolumeIndex.write(oprot);
      }
      if (struct.isSetMovingBoundarySurfaceIndex()) {
        struct.movingBoundarySurfaceIndex.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VisLine struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.p1 = iprot.readI32();
      struct.setP1IsSet(true);
      struct.p2 = iprot.readI32();
      struct.setP2IsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.chomboSurfaceIndex = new ChomboSurfaceIndex();
        struct.chomboSurfaceIndex.read(iprot);
        struct.setChomboSurfaceIndexIsSet(true);
      }
      if (incoming.get(1)) {
        struct.finiteVolumeIndex = new FiniteVolumeIndex();
        struct.finiteVolumeIndex.read(iprot);
        struct.setFiniteVolumeIndexIsSet(true);
      }
      if (incoming.get(2)) {
        struct.movingBoundarySurfaceIndex = new MovingBoundarySurfaceIndex();
        struct.movingBoundarySurfaceIndex.read(iprot);
        struct.setMovingBoundarySurfaceIndexIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

