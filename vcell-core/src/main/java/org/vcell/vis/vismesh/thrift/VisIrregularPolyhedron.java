/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.vcell.vis.vismesh.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)")
public class VisIrregularPolyhedron implements org.apache.thrift.TBase<VisIrregularPolyhedron, VisIrregularPolyhedron._Fields>, java.io.Serializable, Cloneable, Comparable<VisIrregularPolyhedron> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VisIrregularPolyhedron");

  private static final org.apache.thrift.protocol.TField POLYHEDRON_FACES_FIELD_DESC = new org.apache.thrift.protocol.TField("polyhedronFaces", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField CHOMBO_VOLUME_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("chomboVolumeIndex", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField FINITE_VOLUME_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("finiteVolumeIndex", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new VisIrregularPolyhedronStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new VisIrregularPolyhedronTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<PolyhedronFace> polyhedronFaces; // required
  public @org.apache.thrift.annotation.Nullable ChomboVolumeIndex chomboVolumeIndex; // optional
  public @org.apache.thrift.annotation.Nullable FiniteVolumeIndex finiteVolumeIndex; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POLYHEDRON_FACES((short)1, "polyhedronFaces"),
    CHOMBO_VOLUME_INDEX((short)2, "chomboVolumeIndex"),
    FINITE_VOLUME_INDEX((short)3, "finiteVolumeIndex");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POLYHEDRON_FACES
          return POLYHEDRON_FACES;
        case 2: // CHOMBO_VOLUME_INDEX
          return CHOMBO_VOLUME_INDEX;
        case 3: // FINITE_VOLUME_INDEX
          return FINITE_VOLUME_INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CHOMBO_VOLUME_INDEX,_Fields.FINITE_VOLUME_INDEX};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POLYHEDRON_FACES, new org.apache.thrift.meta_data.FieldMetaData("polyhedronFaces", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "PolyhedronFaces")));
    tmpMap.put(_Fields.CHOMBO_VOLUME_INDEX, new org.apache.thrift.meta_data.FieldMetaData("chomboVolumeIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChomboVolumeIndex.class)));
    tmpMap.put(_Fields.FINITE_VOLUME_INDEX, new org.apache.thrift.meta_data.FieldMetaData("finiteVolumeIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FiniteVolumeIndex.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VisIrregularPolyhedron.class, metaDataMap);
  }

  public VisIrregularPolyhedron() {
  }

  public VisIrregularPolyhedron(
    java.util.List<PolyhedronFace> polyhedronFaces)
  {
    this();
    this.polyhedronFaces = polyhedronFaces;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VisIrregularPolyhedron(VisIrregularPolyhedron other) {
    if (other.isSetPolyhedronFaces()) {
      java.util.List<PolyhedronFace> __this__polyhedronFaces = new java.util.ArrayList<PolyhedronFace>(other.polyhedronFaces.size());
      for (PolyhedronFace other_element : other.polyhedronFaces) {
        __this__polyhedronFaces.add(new PolyhedronFace(other_element));
      }
      this.polyhedronFaces = __this__polyhedronFaces;
    }
    if (other.isSetChomboVolumeIndex()) {
      this.chomboVolumeIndex = new ChomboVolumeIndex(other.chomboVolumeIndex);
    }
    if (other.isSetFiniteVolumeIndex()) {
      this.finiteVolumeIndex = new FiniteVolumeIndex(other.finiteVolumeIndex);
    }
  }

  @Override
  public VisIrregularPolyhedron deepCopy() {
    return new VisIrregularPolyhedron(this);
  }

  @Override
  public void clear() {
    this.polyhedronFaces = null;
    this.chomboVolumeIndex = null;
    this.finiteVolumeIndex = null;
  }

  public int getPolyhedronFacesSize() {
    return (this.polyhedronFaces == null) ? 0 : this.polyhedronFaces.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<PolyhedronFace> getPolyhedronFacesIterator() {
    return (this.polyhedronFaces == null) ? null : this.polyhedronFaces.iterator();
  }

  public void addToPolyhedronFaces(PolyhedronFace elem) {
    if (this.polyhedronFaces == null) {
      this.polyhedronFaces = new java.util.ArrayList<PolyhedronFace>();
    }
    this.polyhedronFaces.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<PolyhedronFace> getPolyhedronFaces() {
    return this.polyhedronFaces;
  }

  public VisIrregularPolyhedron setPolyhedronFaces(@org.apache.thrift.annotation.Nullable java.util.List<PolyhedronFace> polyhedronFaces) {
    this.polyhedronFaces = polyhedronFaces;
    return this;
  }

  public void unsetPolyhedronFaces() {
    this.polyhedronFaces = null;
  }

  /** Returns true if field polyhedronFaces is set (has been assigned a value) and false otherwise */
  public boolean isSetPolyhedronFaces() {
    return this.polyhedronFaces != null;
  }

  public void setPolyhedronFacesIsSet(boolean value) {
    if (!value) {
      this.polyhedronFaces = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ChomboVolumeIndex getChomboVolumeIndex() {
    return this.chomboVolumeIndex;
  }

  public VisIrregularPolyhedron setChomboVolumeIndex(@org.apache.thrift.annotation.Nullable ChomboVolumeIndex chomboVolumeIndex) {
    this.chomboVolumeIndex = chomboVolumeIndex;
    return this;
  }

  public void unsetChomboVolumeIndex() {
    this.chomboVolumeIndex = null;
  }

  /** Returns true if field chomboVolumeIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetChomboVolumeIndex() {
    return this.chomboVolumeIndex != null;
  }

  public void setChomboVolumeIndexIsSet(boolean value) {
    if (!value) {
      this.chomboVolumeIndex = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public FiniteVolumeIndex getFiniteVolumeIndex() {
    return this.finiteVolumeIndex;
  }

  public VisIrregularPolyhedron setFiniteVolumeIndex(@org.apache.thrift.annotation.Nullable FiniteVolumeIndex finiteVolumeIndex) {
    this.finiteVolumeIndex = finiteVolumeIndex;
    return this;
  }

  public void unsetFiniteVolumeIndex() {
    this.finiteVolumeIndex = null;
  }

  /** Returns true if field finiteVolumeIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetFiniteVolumeIndex() {
    return this.finiteVolumeIndex != null;
  }

  public void setFiniteVolumeIndexIsSet(boolean value) {
    if (!value) {
      this.finiteVolumeIndex = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case POLYHEDRON_FACES:
      if (value == null) {
        unsetPolyhedronFaces();
      } else {
        setPolyhedronFaces((java.util.List<PolyhedronFace>)value);
      }
      break;

    case CHOMBO_VOLUME_INDEX:
      if (value == null) {
        unsetChomboVolumeIndex();
      } else {
        setChomboVolumeIndex((ChomboVolumeIndex)value);
      }
      break;

    case FINITE_VOLUME_INDEX:
      if (value == null) {
        unsetFiniteVolumeIndex();
      } else {
        setFiniteVolumeIndex((FiniteVolumeIndex)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case POLYHEDRON_FACES:
      return getPolyhedronFaces();

    case CHOMBO_VOLUME_INDEX:
      return getChomboVolumeIndex();

    case FINITE_VOLUME_INDEX:
      return getFiniteVolumeIndex();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case POLYHEDRON_FACES:
      return isSetPolyhedronFaces();
    case CHOMBO_VOLUME_INDEX:
      return isSetChomboVolumeIndex();
    case FINITE_VOLUME_INDEX:
      return isSetFiniteVolumeIndex();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof VisIrregularPolyhedron)
      return this.equals((VisIrregularPolyhedron)that);
    return false;
  }

  public boolean equals(VisIrregularPolyhedron that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_polyhedronFaces = true && this.isSetPolyhedronFaces();
    boolean that_present_polyhedronFaces = true && that.isSetPolyhedronFaces();
    if (this_present_polyhedronFaces || that_present_polyhedronFaces) {
      if (!(this_present_polyhedronFaces && that_present_polyhedronFaces))
        return false;
      if (!this.polyhedronFaces.equals(that.polyhedronFaces))
        return false;
    }

    boolean this_present_chomboVolumeIndex = true && this.isSetChomboVolumeIndex();
    boolean that_present_chomboVolumeIndex = true && that.isSetChomboVolumeIndex();
    if (this_present_chomboVolumeIndex || that_present_chomboVolumeIndex) {
      if (!(this_present_chomboVolumeIndex && that_present_chomboVolumeIndex))
        return false;
      if (!this.chomboVolumeIndex.equals(that.chomboVolumeIndex))
        return false;
    }

    boolean this_present_finiteVolumeIndex = true && this.isSetFiniteVolumeIndex();
    boolean that_present_finiteVolumeIndex = true && that.isSetFiniteVolumeIndex();
    if (this_present_finiteVolumeIndex || that_present_finiteVolumeIndex) {
      if (!(this_present_finiteVolumeIndex && that_present_finiteVolumeIndex))
        return false;
      if (!this.finiteVolumeIndex.equals(that.finiteVolumeIndex))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPolyhedronFaces()) ? 131071 : 524287);
    if (isSetPolyhedronFaces())
      hashCode = hashCode * 8191 + polyhedronFaces.hashCode();

    hashCode = hashCode * 8191 + ((isSetChomboVolumeIndex()) ? 131071 : 524287);
    if (isSetChomboVolumeIndex())
      hashCode = hashCode * 8191 + chomboVolumeIndex.hashCode();

    hashCode = hashCode * 8191 + ((isSetFiniteVolumeIndex()) ? 131071 : 524287);
    if (isSetFiniteVolumeIndex())
      hashCode = hashCode * 8191 + finiteVolumeIndex.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(VisIrregularPolyhedron other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetPolyhedronFaces(), other.isSetPolyhedronFaces());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolyhedronFaces()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.polyhedronFaces, other.polyhedronFaces);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetChomboVolumeIndex(), other.isSetChomboVolumeIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChomboVolumeIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chomboVolumeIndex, other.chomboVolumeIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFiniteVolumeIndex(), other.isSetFiniteVolumeIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFiniteVolumeIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finiteVolumeIndex, other.finiteVolumeIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("VisIrregularPolyhedron(");
    boolean first = true;

    sb.append("polyhedronFaces:");
    if (this.polyhedronFaces == null) {
      sb.append("null");
    } else {
      sb.append(this.polyhedronFaces);
    }
    first = false;
    if (isSetChomboVolumeIndex()) {
      if (!first) sb.append(", ");
      sb.append("chomboVolumeIndex:");
      if (this.chomboVolumeIndex == null) {
        sb.append("null");
      } else {
        sb.append(this.chomboVolumeIndex);
      }
      first = false;
    }
    if (isSetFiniteVolumeIndex()) {
      if (!first) sb.append(", ");
      sb.append("finiteVolumeIndex:");
      if (this.finiteVolumeIndex == null) {
        sb.append("null");
      } else {
        sb.append(this.finiteVolumeIndex);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (polyhedronFaces == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'polyhedronFaces' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (chomboVolumeIndex != null) {
      chomboVolumeIndex.validate();
    }
    if (finiteVolumeIndex != null) {
      finiteVolumeIndex.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VisIrregularPolyhedronStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public VisIrregularPolyhedronStandardScheme getScheme() {
      return new VisIrregularPolyhedronStandardScheme();
    }
  }

  private static class VisIrregularPolyhedronStandardScheme extends org.apache.thrift.scheme.StandardScheme<VisIrregularPolyhedron> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, VisIrregularPolyhedron struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POLYHEDRON_FACES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.polyhedronFaces = new java.util.ArrayList<PolyhedronFace>(_list16.size);
                @org.apache.thrift.annotation.Nullable PolyhedronFace _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new PolyhedronFace();
                  _elem17.read(iprot);
                  struct.polyhedronFaces.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setPolyhedronFacesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHOMBO_VOLUME_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.chomboVolumeIndex = new ChomboVolumeIndex();
              struct.chomboVolumeIndex.read(iprot);
              struct.setChomboVolumeIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FINITE_VOLUME_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.finiteVolumeIndex = new FiniteVolumeIndex();
              struct.finiteVolumeIndex.read(iprot);
              struct.setFiniteVolumeIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, VisIrregularPolyhedron struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.polyhedronFaces != null) {
        oprot.writeFieldBegin(POLYHEDRON_FACES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.polyhedronFaces.size()));
          for (PolyhedronFace _iter19 : struct.polyhedronFaces)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.chomboVolumeIndex != null) {
        if (struct.isSetChomboVolumeIndex()) {
          oprot.writeFieldBegin(CHOMBO_VOLUME_INDEX_FIELD_DESC);
          struct.chomboVolumeIndex.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.finiteVolumeIndex != null) {
        if (struct.isSetFiniteVolumeIndex()) {
          oprot.writeFieldBegin(FINITE_VOLUME_INDEX_FIELD_DESC);
          struct.finiteVolumeIndex.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VisIrregularPolyhedronTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public VisIrregularPolyhedronTupleScheme getScheme() {
      return new VisIrregularPolyhedronTupleScheme();
    }
  }

  private static class VisIrregularPolyhedronTupleScheme extends org.apache.thrift.scheme.TupleScheme<VisIrregularPolyhedron> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VisIrregularPolyhedron struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.polyhedronFaces.size());
        for (PolyhedronFace _iter20 : struct.polyhedronFaces)
        {
          _iter20.write(oprot);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetChomboVolumeIndex()) {
        optionals.set(0);
      }
      if (struct.isSetFiniteVolumeIndex()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetChomboVolumeIndex()) {
        struct.chomboVolumeIndex.write(oprot);
      }
      if (struct.isSetFiniteVolumeIndex()) {
        struct.finiteVolumeIndex.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VisIrregularPolyhedron struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list21 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.polyhedronFaces = new java.util.ArrayList<PolyhedronFace>(_list21.size);
        @org.apache.thrift.annotation.Nullable PolyhedronFace _elem22;
        for (int _i23 = 0; _i23 < _list21.size; ++_i23)
        {
          _elem22 = new PolyhedronFace();
          _elem22.read(iprot);
          struct.polyhedronFaces.add(_elem22);
        }
      }
      struct.setPolyhedronFacesIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.chomboVolumeIndex = new ChomboVolumeIndex();
        struct.chomboVolumeIndex.read(iprot);
        struct.setChomboVolumeIndexIsSet(true);
      }
      if (incoming.get(1)) {
        struct.finiteVolumeIndex = new FiniteVolumeIndex();
        struct.finiteVolumeIndex.read(iprot);
        struct.setFiniteVolumeIndexIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

