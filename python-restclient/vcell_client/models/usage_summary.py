# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt
from pydantic import Field
from vcell_client.models.user_sim_count import UserSimCount
from vcell_client.models.users_registered_stats import UsersRegisteredStats
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UsageSummary(BaseModel):
    """
    UsageSummary
    """ # noqa: E501
    sim_counts_7_days: Optional[List[UserSimCount]] = Field(default=None, alias="simCounts_7Days")
    sim_counts_30_days: Optional[List[UserSimCount]] = Field(default=None, alias="simCounts_30Days")
    sim_counts_90_days: Optional[List[UserSimCount]] = Field(default=None, alias="simCounts_90Days")
    sim_counts_180_days: Optional[List[UserSimCount]] = Field(default=None, alias="simCounts_180Days")
    sim_counts_365_days: Optional[List[UserSimCount]] = Field(default=None, alias="simCounts_365Days")
    users_registered_stats: Optional[UsersRegisteredStats] = Field(default=None, alias="usersRegisteredStats")
    total_users: Optional[StrictInt] = Field(default=None, alias="totalUsers")
    users_with_sims: Optional[StrictInt] = Field(default=None, alias="usersWithSims")
    biomodel_count: Optional[StrictInt] = Field(default=None, alias="biomodelCount")
    mathmodel_count: Optional[StrictInt] = Field(default=None, alias="mathmodelCount")
    public_biomodel_count: Optional[StrictInt] = Field(default=None, alias="publicBiomodelCount")
    public_mathmodel_count: Optional[StrictInt] = Field(default=None, alias="publicMathmodelCount")
    sim_count: Optional[StrictInt] = Field(default=None, alias="simCount")
    public_biomodel_sim_count: Optional[StrictInt] = Field(default=None, alias="publicBiomodelSimCount")
    public_mathmodel_sim_count: Optional[StrictInt] = Field(default=None, alias="publicMathmodelSimCount")
    __properties: ClassVar[List[str]] = ["simCounts_7Days", "simCounts_30Days", "simCounts_90Days", "simCounts_180Days", "simCounts_365Days", "usersRegisteredStats", "totalUsers", "usersWithSims", "biomodelCount", "mathmodelCount", "publicBiomodelCount", "publicMathmodelCount", "simCount", "publicBiomodelSimCount", "publicMathmodelSimCount"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UsageSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sim_counts_7_days (list)
        _items = []
        if self.sim_counts_7_days:
            for _item in self.sim_counts_7_days:
                if _item:
                    _items.append(_item.to_dict())
            _dict['simCounts_7Days'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sim_counts_30_days (list)
        _items = []
        if self.sim_counts_30_days:
            for _item in self.sim_counts_30_days:
                if _item:
                    _items.append(_item.to_dict())
            _dict['simCounts_30Days'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sim_counts_90_days (list)
        _items = []
        if self.sim_counts_90_days:
            for _item in self.sim_counts_90_days:
                if _item:
                    _items.append(_item.to_dict())
            _dict['simCounts_90Days'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sim_counts_180_days (list)
        _items = []
        if self.sim_counts_180_days:
            for _item in self.sim_counts_180_days:
                if _item:
                    _items.append(_item.to_dict())
            _dict['simCounts_180Days'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sim_counts_365_days (list)
        _items = []
        if self.sim_counts_365_days:
            for _item in self.sim_counts_365_days:
                if _item:
                    _items.append(_item.to_dict())
            _dict['simCounts_365Days'] = _items
        # override the default output from pydantic by calling `to_dict()` of users_registered_stats
        if self.users_registered_stats:
            _dict['usersRegisteredStats'] = self.users_registered_stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UsageSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in UsageSummary) in the input: " + _key)

        _obj = cls.model_validate({
            "simCounts_7Days": [UserSimCount.from_dict(_item) for _item in obj.get("simCounts_7Days")] if obj.get("simCounts_7Days") is not None else None,
            "simCounts_30Days": [UserSimCount.from_dict(_item) for _item in obj.get("simCounts_30Days")] if obj.get("simCounts_30Days") is not None else None,
            "simCounts_90Days": [UserSimCount.from_dict(_item) for _item in obj.get("simCounts_90Days")] if obj.get("simCounts_90Days") is not None else None,
            "simCounts_180Days": [UserSimCount.from_dict(_item) for _item in obj.get("simCounts_180Days")] if obj.get("simCounts_180Days") is not None else None,
            "simCounts_365Days": [UserSimCount.from_dict(_item) for _item in obj.get("simCounts_365Days")] if obj.get("simCounts_365Days") is not None else None,
            "usersRegisteredStats": UsersRegisteredStats.from_dict(obj.get("usersRegisteredStats")) if obj.get("usersRegisteredStats") is not None else None,
            "totalUsers": obj.get("totalUsers"),
            "usersWithSims": obj.get("usersWithSims"),
            "biomodelCount": obj.get("biomodelCount"),
            "mathmodelCount": obj.get("mathmodelCount"),
            "publicBiomodelCount": obj.get("publicBiomodelCount"),
            "publicMathmodelCount": obj.get("publicMathmodelCount"),
            "simCount": obj.get("simCount"),
            "publicBiomodelSimCount": obj.get("publicBiomodelSimCount"),
            "publicMathmodelSimCount": obj.get("publicMathmodelSimCount")
        })
        return _obj


