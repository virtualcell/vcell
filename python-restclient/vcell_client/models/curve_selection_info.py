# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt
from pydantic import Field
from vcell_client.models.curve import Curve
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CurveSelectionInfo(BaseModel):
    """
    CurveSelectionInfo
    """ # noqa: E501
    field_curve: Optional[Curve] = Field(default=None, alias="fieldCurve")
    field_type: Optional[StrictInt] = Field(default=None, alias="fieldType")
    field_control_point: Optional[StrictInt] = Field(default=None, alias="fieldControlPoint")
    field_segment: Optional[StrictInt] = Field(default=None, alias="fieldSegment")
    field_u: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="fieldU")
    field_u_extended: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="fieldUExtended")
    field_control_point_extended: Optional[StrictInt] = Field(default=None, alias="fieldControlPointExtended")
    field_segment_extended: Optional[StrictInt] = Field(default=None, alias="fieldSegmentExtended")
    field_direction_negative: Optional[StrictBool] = Field(default=None, alias="fieldDirectionNegative")
    crossing: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["fieldCurve", "fieldType", "fieldControlPoint", "fieldSegment", "fieldU", "fieldUExtended", "fieldControlPointExtended", "fieldSegmentExtended", "fieldDirectionNegative", "crossing"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CurveSelectionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of field_curve
        if self.field_curve:
            _dict['fieldCurve'] = self.field_curve.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CurveSelectionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in CurveSelectionInfo) in the input: " + _key)

        _obj = cls.model_validate({
            "fieldCurve": Curve.from_dict(obj.get("fieldCurve")) if obj.get("fieldCurve") is not None else None,
            "fieldType": obj.get("fieldType"),
            "fieldControlPoint": obj.get("fieldControlPoint"),
            "fieldSegment": obj.get("fieldSegment"),
            "fieldU": obj.get("fieldU"),
            "fieldUExtended": obj.get("fieldUExtended"),
            "fieldControlPointExtended": obj.get("fieldControlPointExtended"),
            "fieldSegmentExtended": obj.get("fieldSegmentExtended"),
            "fieldDirectionNegative": obj.get("fieldDirectionNegative"),
            "crossing": obj.get("crossing")
        })
        return _obj


