# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from vcell_client.models.htc_job_id import HtcJobID
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SimulationExecutionStatusRecord(BaseModel):
    """
    SimulationExecutionStatusRecord
    """ # noqa: E501
    field_start_date: Optional[datetime] = Field(default=None, alias="fieldStartDate")
    field_latest_update_date: Optional[datetime] = Field(default=None, alias="fieldLatestUpdateDate")
    field_end_date: Optional[datetime] = Field(default=None, alias="fieldEndDate")
    field_compute_host: Optional[StrictStr] = Field(default=None, alias="fieldComputeHost")
    field_has_data: Optional[StrictBool] = Field(default=None, alias="fieldHasData")
    field_htc_job_id: Optional[HtcJobID] = Field(default=None, alias="fieldHtcJobID")
    __properties: ClassVar[List[str]] = ["fieldStartDate", "fieldLatestUpdateDate", "fieldEndDate", "fieldComputeHost", "fieldHasData", "fieldHtcJobID"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SimulationExecutionStatusRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of field_htc_job_id
        if self.field_htc_job_id:
            _dict['fieldHtcJobID'] = self.field_htc_job_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SimulationExecutionStatusRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in SimulationExecutionStatusRecord) in the input: " + _key)

        _obj = cls.model_validate({
            "fieldStartDate": obj.get("fieldStartDate"),
            "fieldLatestUpdateDate": obj.get("fieldLatestUpdateDate"),
            "fieldEndDate": obj.get("fieldEndDate"),
            "fieldComputeHost": obj.get("fieldComputeHost"),
            "fieldHasData": obj.get("fieldHasData"),
            "fieldHtcJobID": HtcJobID.from_dict(obj.get("fieldHtcJobID")) if obj.get("fieldHtcJobID") is not None else None
        })
        return _obj


