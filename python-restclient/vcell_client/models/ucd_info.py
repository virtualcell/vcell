# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt
from pydantic import Field
from vcell_client.models.coordinate import Coordinate
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UCDInfo(BaseModel):
    """
    UCDInfo
    """ # noqa: E501
    ucd_grid_nodes: Optional[List[List[List[Coordinate]]]] = Field(default=None, alias="ucdGridNodes")
    ucd_membrane_quads: Optional[List[List[StrictInt]]] = Field(default=None, alias="ucdMembraneQuads")
    reduced_ucd_grid_nodes_v: Optional[List[Coordinate]] = Field(default=None, alias="reducedUCDGridNodesV")
    u_cd_grid_nodes: Optional[List[List[List[Coordinate]]]] = Field(default=None, alias="uCDGridNodes")
    u_cd_membrane_quads: Optional[List[List[StrictInt]]] = Field(default=None, alias="uCDMembraneQuads")
    num_volume_nodes_x: Optional[StrictInt] = Field(default=None, alias="numVolumeNodesX")
    num_volume_nodes_y: Optional[StrictInt] = Field(default=None, alias="numVolumeNodesY")
    num_volume_nodes_z: Optional[StrictInt] = Field(default=None, alias="numVolumeNodesZ")
    num_points_xyz: Optional[StrictInt] = Field(default=None, alias="numPointsXYZ")
    num_volume_nodes_xy: Optional[StrictInt] = Field(default=None, alias="numVolumeNodesXY")
    num_volume_cells: Optional[StrictInt] = Field(default=None, alias="numVolumeCells")
    num_membrane_cells: Optional[StrictInt] = Field(default=None, alias="numMembraneCells")
    __properties: ClassVar[List[str]] = ["ucdGridNodes", "ucdMembraneQuads", "reducedUCDGridNodesV", "uCDGridNodes", "uCDMembraneQuads", "numVolumeNodesX", "numVolumeNodesY", "numVolumeNodesZ", "numPointsXYZ", "numVolumeNodesXY", "numVolumeCells", "numMembraneCells"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UCDInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ucd_grid_nodes (list of list)
        _items = []
        if self.ucd_grid_nodes:
            for _item in self.ucd_grid_nodes:
                if _item:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item if _inner_item is not None]
                    )
            _dict['ucdGridNodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reduced_ucd_grid_nodes_v (list)
        _items = []
        if self.reduced_ucd_grid_nodes_v:
            for _item in self.reduced_ucd_grid_nodes_v:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reducedUCDGridNodesV'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in u_cd_grid_nodes (list of list)
        _items = []
        if self.u_cd_grid_nodes:
            for _item in self.u_cd_grid_nodes:
                if _item:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item if _inner_item is not None]
                    )
            _dict['uCDGridNodes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UCDInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in UCDInfo) in the input: " + _key)

        _obj = cls.model_validate({
            "ucdGridNodes": [
                    [List[Coordinate].from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj.get("ucdGridNodes")
                ] if obj.get("ucdGridNodes") is not None else None,
            "ucdMembraneQuads": obj.get("ucdMembraneQuads"),
            "reducedUCDGridNodesV": [Coordinate.from_dict(_item) for _item in obj.get("reducedUCDGridNodesV")] if obj.get("reducedUCDGridNodesV") is not None else None,
            "uCDGridNodes": [
                    [List[Coordinate].from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj.get("uCDGridNodes")
                ] if obj.get("uCDGridNodes") is not None else None,
            "uCDMembraneQuads": obj.get("uCDMembraneQuads"),
            "numVolumeNodesX": obj.get("numVolumeNodesX"),
            "numVolumeNodesY": obj.get("numVolumeNodesY"),
            "numVolumeNodesZ": obj.get("numVolumeNodesZ"),
            "numPointsXYZ": obj.get("numPointsXYZ"),
            "numVolumeNodesXY": obj.get("numVolumeNodesXY"),
            "numVolumeCells": obj.get("numVolumeCells"),
            "numMembraneCells": obj.get("numMembraneCells")
        })
        return _obj


