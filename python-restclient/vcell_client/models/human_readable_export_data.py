# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HumanReadableExportData(BaseModel):
    """
    HumanReadableExportData
    """ # noqa: E501
    simulation_name: Optional[StrictStr] = Field(default=None, alias="simulationName")
    biomodel_name: Optional[StrictStr] = Field(default=None, alias="biomodelName")
    application_name: Optional[StrictStr] = Field(default=None, alias="applicationName")
    different_parameter_values: Optional[List[StrictStr]] = Field(default=None, alias="differentParameterValues")
    application_type: Optional[StrictStr] = Field(default=None, alias="applicationType")
    server_saved_file_name: Optional[StrictStr] = Field(default=None, alias="serverSavedFileName")
    non_spatial: Optional[StrictBool] = Field(default=None, alias="nonSpatial")
    sub_volume: Optional[Dict[str, StrictStr]] = Field(default=None, alias="subVolume")
    z_slices: Optional[StrictInt] = Field(default=None, alias="zSlices")
    t_slices: Optional[StrictInt] = Field(default=None, alias="tSlices")
    num_channels: Optional[StrictInt] = Field(default=None, alias="numChannels")
    __properties: ClassVar[List[str]] = ["simulationName", "biomodelName", "applicationName", "differentParameterValues", "applicationType", "serverSavedFileName", "nonSpatial", "subVolume", "zSlices", "tSlices", "numChannels"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HumanReadableExportData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HumanReadableExportData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in HumanReadableExportData) in the input: " + _key)

        _obj = cls.model_validate({
            "simulationName": obj.get("simulationName"),
            "biomodelName": obj.get("biomodelName"),
            "applicationName": obj.get("applicationName"),
            "differentParameterValues": obj.get("differentParameterValues"),
            "applicationType": obj.get("applicationType"),
            "serverSavedFileName": obj.get("serverSavedFileName"),
            "nonSpatial": obj.get("nonSpatial"),
            "subVolume": obj.get("subVolume"),
            "zSlices": obj.get("zSlices"),
            "tSlices": obj.get("tSlices"),
            "numChannels": obj.get("numChannels")
        })
        return _obj


