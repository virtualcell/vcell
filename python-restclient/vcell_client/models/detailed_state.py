# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
import re  # noqa: F401
from enum import Enum



try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class DetailedState(str, Enum):
    """
    DetailedState
    """

    """
    allowed enum values
    """
    UNKNOWN = 'UNKNOWN'
    DATAMOVEREVENT_MOVED = 'DATAMOVEREVENT_MOVED'
    WORKEREVENT_WORKERALIVE = 'WORKEREVENT_WORKERALIVE'
    JOB_WAITING = 'JOB_WAITING'
    JOB_QUEUED = 'JOB_QUEUED'
    JOB_QUEUED_RETRY = 'JOB_QUEUED_RETRY'
    JOB_DISPATCHED = 'JOB_DISPATCHED'
    JOB_ACCEPTED = 'JOB_ACCEPTED'
    SOLVER_READY = 'SOLVER_READY'
    SOLVER_STARTING_INIT = 'SOLVER_STARTING_INIT'
    SOLVEREVENT_STARTING_PROC_GEOM = 'SOLVEREVENT_STARTING_PROC_GEOM'
    SOLVEREVENT_STARTING_RESAMPLE_FD = 'SOLVEREVENT_STARTING_RESAMPLE_FD'
    SOLVER_RUNNING_INIT = 'SOLVER_RUNNING_INIT'
    SOLVER_RUNNING_INIT_INPUT_FILE = 'SOLVER_RUNNING_INIT_INPUT_FILE'
    SOLVER_RUNNING_INIT_CODEGEN = 'SOLVER_RUNNING_INIT_CODEGEN'
    SOLVER_RUNNING_INIT_COMPILING = 'SOLVER_RUNNING_INIT_COMPILING'
    SOLVER_RUNNING_INIT_COMPILECMD = 'SOLVER_RUNNING_INIT_COMPILECMD'
    SOLVER_RUNNING_INIT_COMPILE_OK = 'SOLVER_RUNNING_INIT_COMPILE_OK'
    SOLVER_RUNNING_INIT_LINKING = 'SOLVER_RUNNING_INIT_LINKING'
    SOLVER_RUNNING_INIT_LINKCMD = 'SOLVER_RUNNING_INIT_LINKCMD'
    SOLVER_RUNNING_INIT_LINK_OK = 'SOLVER_RUNNING_INIT_LINK_OK'
    SOLVER_RUNNING_INIT_COMPILELINK_OK = 'SOLVER_RUNNING_INIT_COMPILELINK_OK'
    SOLVEREVENT_STARTING_INIT = 'SOLVEREVENT_STARTING_INIT'
    SOLVEREVENT_STARTING_CODEGEN = 'SOLVEREVENT_STARTING_CODEGEN'
    SOLVEREVENT_STARTING_COMPILELINK = 'SOLVEREVENT_STARTING_COMPILELINK'
    SOLVEREVENT_STARTING_INPUT_FILE = 'SOLVEREVENT_STARTING_INPUT_FILE'
    SOLVEREVENT_STARTING = 'SOLVEREVENT_STARTING'
    SOLVEREVENT_STARTING_SUBMITTING = 'SOLVEREVENT_STARTING_SUBMITTING'
    SOLVEREVENT_STARTING_SUBMITTED = 'SOLVEREVENT_STARTING_SUBMITTED'
    WORKEREVENT_STARTING = 'WORKEREVENT_STARTING'
    SOLVEREVENT_RUNNING_START = 'SOLVEREVENT_RUNNING_START'
    SOLVER_RUNNING_START = 'SOLVER_RUNNING_START'
    JOB_RUNNING_UNKNOWN = 'JOB_RUNNING_UNKNOWN'
    SOLVEREVENT_PRINTED = 'SOLVEREVENT_PRINTED'
    WORKEREVENT_DATA = 'WORKEREVENT_DATA'
    JOB_RUNNING = 'JOB_RUNNING'
    SOLVEREVENT_PROGRESS = 'SOLVEREVENT_PROGRESS'
    WORKEREVENT_PROGRESS = 'WORKEREVENT_PROGRESS'
    WORKEREVENT_WORKEREXIT_NORMAL = 'WORKEREVENT_WORKEREXIT_NORMAL'
    WORKEREVENT_WORKEREXIT_ERROR = 'WORKEREVENT_WORKEREXIT_ERROR'
    SOLVEREVENT_FINISHED = 'SOLVEREVENT_FINISHED'
    SOLVER_FINISHED = 'SOLVER_FINISHED'
    WORKEREVENT_COMPLETED = 'WORKEREVENT_COMPLETED'
    JOB_COMPLETED = 'JOB_COMPLETED'
    SOLVER_STOPPED = 'SOLVER_STOPPED'
    JOB_STOPPED = 'JOB_STOPPED'
    JOB_FAILED_UNKNOWN = 'JOB_FAILED_UNKNOWN'
    SOLVER_ABORTED = 'SOLVER_ABORTED'
    WORKEREVENT_FAILURE = 'WORKEREVENT_FAILURE'
    JOB_FAILED = 'JOB_FAILED'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DetailedState from a JSON string"""
        return cls(json.loads(json_str))


