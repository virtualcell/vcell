# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from vcell_client.models.curve_selection_info import CurveSelectionInfo
from vcell_client.models.variable_type import VariableType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SpatialSelection(BaseModel):
    """
    SpatialSelection
    """ # noqa: E501
    curve_selection_info: Optional[CurveSelectionInfo] = Field(default=None, alias="curveSelectionInfo")
    var_type: Optional[VariableType] = Field(default=None, alias="varType")
    type: StrictStr
    smallest_mesh_cell_dimension_length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="smallestMeshCellDimensionLength")
    variable_type: Optional[VariableType] = Field(default=None, alias="variableType")
    closed: Optional[StrictBool] = None
    point: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["curveSelectionInfo", "varType", "type", "smallestMeshCellDimensionLength", "variableType", "closed", "point"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[List[str]] = 'type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'Contour': 'SpatialSelectionContour','Membrane': 'SpatialSelectionMembrane','Volume': 'SpatialSelectionVolume'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union[Self, Self, Self]:
        """Create an instance of SpatialSelection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of curve_selection_info
        if self.curve_selection_info:
            _dict['curveSelectionInfo'] = self.curve_selection_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_type
        if self.var_type:
            _dict['varType'] = self.var_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of variable_type
        if self.variable_type:
            _dict['variableType'] = self.variable_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Union[Self, Self, Self]:
        """Create an instance of SpatialSelection from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("SpatialSelection failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from vcell_client.models.spatial_selection_contour import SpatialSelectionContour
from vcell_client.models.spatial_selection_membrane import SpatialSelectionMembrane
from vcell_client.models.spatial_selection_volume import SpatialSelectionVolume
# TODO: Rewrite to not use raise_errors
SpatialSelection.model_rebuild(raise_errors=False)

