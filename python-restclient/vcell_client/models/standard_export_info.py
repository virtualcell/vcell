# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from vcell_client.models.annotated_function_dto import AnnotatedFunctionDTO
from vcell_client.models.geometry_spec_dto import GeometrySpecDTO
from vcell_client.models.time_specs import TimeSpecs
from vcell_client.models.variable_specs import VariableSpecs
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class StandardExportInfo(BaseModel):
    """
    StandardExportInfo
    """ # noqa: E501
    output_context: Optional[List[AnnotatedFunctionDTO]] = Field(default=None, alias="outputContext")
    context_name: Optional[StrictStr] = Field(default=None, alias="contextName")
    simulation_name: Optional[StrictStr] = Field(default=None, alias="simulationName")
    simulation_key: Optional[StrictStr] = Field(default=None, alias="simulationKey")
    simulation_job: Optional[StrictInt] = Field(default=None, alias="simulationJob")
    geometry_specs: Optional[GeometrySpecDTO] = Field(default=None, alias="geometrySpecs")
    time_specs: Optional[TimeSpecs] = Field(default=None, alias="timeSpecs")
    variable_specs: Optional[VariableSpecs] = Field(default=None, alias="variableSpecs")
    __properties: ClassVar[List[str]] = ["outputContext", "contextName", "simulationName", "simulationKey", "simulationJob", "geometrySpecs", "timeSpecs", "variableSpecs"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of StandardExportInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in output_context (list)
        _items = []
        if self.output_context:
            for _item in self.output_context:
                if _item:
                    _items.append(_item.to_dict())
            _dict['outputContext'] = _items
        # override the default output from pydantic by calling `to_dict()` of geometry_specs
        if self.geometry_specs:
            _dict['geometrySpecs'] = self.geometry_specs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_specs
        if self.time_specs:
            _dict['timeSpecs'] = self.time_specs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of variable_specs
        if self.variable_specs:
            _dict['variableSpecs'] = self.variable_specs.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of StandardExportInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in StandardExportInfo) in the input: " + _key)

        _obj = cls.model_validate({
            "outputContext": [AnnotatedFunctionDTO.from_dict(_item) for _item in obj.get("outputContext")] if obj.get("outputContext") is not None else None,
            "contextName": obj.get("contextName"),
            "simulationName": obj.get("simulationName"),
            "simulationKey": obj.get("simulationKey"),
            "simulationJob": obj.get("simulationJob"),
            "geometrySpecs": GeometrySpecDTO.from_dict(obj.get("geometrySpecs")) if obj.get("geometrySpecs") is not None else None,
            "timeSpecs": TimeSpecs.from_dict(obj.get("timeSpecs")) if obj.get("timeSpecs") is not None else None,
            "variableSpecs": VariableSpecs.from_dict(obj.get("variableSpecs")) if obj.get("variableSpecs") is not None else None
        })
        return _obj


