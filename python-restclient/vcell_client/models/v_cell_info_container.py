# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from vcell_client.models.bio_model_summary import BioModelSummary
from vcell_client.models.geometry_summary import GeometrySummary
from vcell_client.models.math_model_summary import MathModelSummary
from vcell_client.models.vc_image_summary import VCImageSummary
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VCellInfoContainer(BaseModel):
    """
    VCellInfoContainer
    """ # noqa: E501
    image_infos: Optional[List[VCImageSummary]] = Field(default=None, alias="imageInfos")
    geometry_info: Optional[List[GeometrySummary]] = Field(default=None, alias="geometryInfo")
    math_model_infos: Optional[List[MathModelSummary]] = Field(default=None, alias="mathModelInfos")
    bio_model_infos: Optional[List[BioModelSummary]] = Field(default=None, alias="bioModelInfos")
    __properties: ClassVar[List[str]] = ["imageInfos", "geometryInfo", "mathModelInfos", "bioModelInfos"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VCellInfoContainer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in image_infos (list)
        _items = []
        if self.image_infos:
            for _item in self.image_infos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['imageInfos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in geometry_info (list)
        _items = []
        if self.geometry_info:
            for _item in self.geometry_info:
                if _item:
                    _items.append(_item.to_dict())
            _dict['geometryInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in math_model_infos (list)
        _items = []
        if self.math_model_infos:
            for _item in self.math_model_infos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['mathModelInfos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bio_model_infos (list)
        _items = []
        if self.bio_model_infos:
            for _item in self.bio_model_infos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['bioModelInfos'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VCellInfoContainer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in VCellInfoContainer) in the input: " + _key)

        _obj = cls.model_validate({
            "imageInfos": [VCImageSummary.from_dict(_item) for _item in obj.get("imageInfos")] if obj.get("imageInfos") is not None else None,
            "geometryInfo": [GeometrySummary.from_dict(_item) for _item in obj.get("geometryInfo")] if obj.get("geometryInfo") is not None else None,
            "mathModelInfos": [MathModelSummary.from_dict(_item) for _item in obj.get("mathModelInfos")] if obj.get("mathModelInfos") is not None else None,
            "bioModelInfos": [BioModelSummary.from_dict(_item) for _item in obj.get("bioModelInfos")] if obj.get("bioModelInfos") is not None else None
        })
        return _obj


