# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from vcell_client.models.group_access import GroupAccess
from vcell_client.models.key_value import KeyValue
from vcell_client.models.user import User
from vcell_client.models.version_flag import VersionFlag
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Version(BaseModel):
    """
    Version
    """ # noqa: E501
    version_key: Optional[KeyValue] = Field(default=None, alias="versionKey")
    version_name: Optional[StrictStr] = Field(default=None, alias="versionName")
    version_owner: Optional[User] = Field(default=None, alias="versionOwner")
    version_group_access: Optional[GroupAccess] = Field(default=None, alias="versionGroupAccess")
    version_branch_point_ref: Optional[KeyValue] = Field(default=None, alias="versionBranchPointRef")
    version_branch_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="versionBranchID")
    version_date: Optional[date] = Field(default=None, alias="versionDate")
    version_flag: Optional[VersionFlag] = Field(default=None, alias="versionFlag")
    version_annot: Optional[StrictStr] = Field(default=None, alias="versionAnnot")
    annot: Optional[StrictStr] = None
    branch_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="branchID")
    branch_point_ref_key: Optional[KeyValue] = Field(default=None, alias="branchPointRefKey")
    var_date: Optional[date] = Field(default=None, alias="date")
    flag: Optional[VersionFlag] = None
    group_access: Optional[GroupAccess] = Field(default=None, alias="groupAccess")
    name: Optional[StrictStr] = None
    owner: Optional[User] = None
    __properties: ClassVar[List[str]] = ["versionKey", "versionName", "versionOwner", "versionGroupAccess", "versionBranchPointRef", "versionBranchID", "versionDate", "versionFlag", "versionAnnot", "annot", "branchID", "branchPointRefKey", "date", "flag", "groupAccess", "name", "owner"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Version from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of version_key
        if self.version_key:
            _dict['versionKey'] = self.version_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of version_owner
        if self.version_owner:
            _dict['versionOwner'] = self.version_owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of version_group_access
        if self.version_group_access:
            _dict['versionGroupAccess'] = self.version_group_access.to_dict()
        # override the default output from pydantic by calling `to_dict()` of version_branch_point_ref
        if self.version_branch_point_ref:
            _dict['versionBranchPointRef'] = self.version_branch_point_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of version_flag
        if self.version_flag:
            _dict['versionFlag'] = self.version_flag.to_dict()
        # override the default output from pydantic by calling `to_dict()` of branch_point_ref_key
        if self.branch_point_ref_key:
            _dict['branchPointRefKey'] = self.branch_point_ref_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of flag
        if self.flag:
            _dict['flag'] = self.flag.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group_access
        if self.group_access:
            _dict['groupAccess'] = self.group_access.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Version from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Version) in the input: " + _key)

        _obj = cls.model_validate({
            "versionKey": KeyValue.from_dict(obj.get("versionKey")) if obj.get("versionKey") is not None else None,
            "versionName": obj.get("versionName"),
            "versionOwner": User.from_dict(obj.get("versionOwner")) if obj.get("versionOwner") is not None else None,
            "versionGroupAccess": GroupAccess.from_dict(obj.get("versionGroupAccess")) if obj.get("versionGroupAccess") is not None else None,
            "versionBranchPointRef": KeyValue.from_dict(obj.get("versionBranchPointRef")) if obj.get("versionBranchPointRef") is not None else None,
            "versionBranchID": obj.get("versionBranchID"),
            "versionDate": obj.get("versionDate"),
            "versionFlag": VersionFlag.from_dict(obj.get("versionFlag")) if obj.get("versionFlag") is not None else None,
            "versionAnnot": obj.get("versionAnnot"),
            "annot": obj.get("annot"),
            "branchID": obj.get("branchID"),
            "branchPointRefKey": KeyValue.from_dict(obj.get("branchPointRefKey")) if obj.get("branchPointRefKey") is not None else None,
            "date": obj.get("date"),
            "flag": VersionFlag.from_dict(obj.get("flag")) if obj.get("flag") is not None else None,
            "groupAccess": GroupAccess.from_dict(obj.get("groupAccess")) if obj.get("groupAccess") is not None else None,
            "name": obj.get("name"),
            "owner": User.from_dict(obj.get("owner")) if obj.get("owner") is not None else None
        })
        return _obj


