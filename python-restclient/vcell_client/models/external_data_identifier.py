# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from vcell_client.models.key_value import KeyValue
from vcell_client.models.user import User
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ExternalDataIdentifier(BaseModel):
    """
    ExternalDataIdentifier
    """ # noqa: E501
    key: Optional[KeyValue] = None
    owner: Optional[User] = None
    name: Optional[StrictStr] = None
    job_index: Optional[StrictInt] = Field(default=None, alias="jobIndex")
    simulation_key: Optional[KeyValue] = Field(default=None, alias="simulationKey")
    parameter_scan_type: Optional[StrictBool] = Field(default=None, alias="parameterScanType")
    data_key: Optional[KeyValue] = Field(default=None, alias="dataKey")
    __properties: ClassVar[List[str]] = ["key", "owner", "name", "jobIndex", "simulationKey", "parameterScanType", "dataKey"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ExternalDataIdentifier from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of key
        if self.key:
            _dict['key'] = self.key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of simulation_key
        if self.simulation_key:
            _dict['simulationKey'] = self.simulation_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_key
        if self.data_key:
            _dict['dataKey'] = self.data_key.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ExternalDataIdentifier from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ExternalDataIdentifier) in the input: " + _key)

        _obj = cls.model_validate({
            "key": KeyValue.from_dict(obj.get("key")) if obj.get("key") is not None else None,
            "owner": User.from_dict(obj.get("owner")) if obj.get("owner") is not None else None,
            "name": obj.get("name"),
            "jobIndex": obj.get("jobIndex"),
            "simulationKey": KeyValue.from_dict(obj.get("simulationKey")) if obj.get("simulationKey") is not None else None,
            "parameterScanType": obj.get("parameterScanType"),
            "dataKey": KeyValue.from_dict(obj.get("dataKey")) if obj.get("dataKey") is not None else None
        })
        return _obj


