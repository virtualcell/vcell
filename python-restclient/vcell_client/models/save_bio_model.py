# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SaveBioModel(BaseModel):
    """
    SaveBioModel
    """ # noqa: E501
    bio_model_xml: Annotated[str, Field(strict=True)] = Field(alias="bioModelXML")
    name: Optional[StrictStr] = None
    sims_requiring_updates: Optional[List[StrictStr]] = Field(default=None, alias="simsRequiringUpdates")
    __properties: ClassVar[List[str]] = ["bioModelXML", "name", "simsRequiringUpdates"]

    @field_validator('bio_model_xml')
    def bio_model_xml_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"\S", value):
            raise ValueError(r"must validate the regular expression /\S/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SaveBioModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if sims_requiring_updates (nullable) is None
        # and model_fields_set contains the field
        if self.sims_requiring_updates is None and "sims_requiring_updates" in self.model_fields_set:
            _dict['simsRequiringUpdates'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SaveBioModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in SaveBioModel) in the input: " + _key)

        _obj = cls.model_validate({
            "bioModelXML": obj.get("bioModelXML"),
            "name": obj.get("name"),
            "simsRequiringUpdates": obj.get("simsRequiringUpdates")
        })
        return _obj


