# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import StrictFloat, StrictInt, StrictStr
from pydantic import Field
from vcell_client.models.control_point_curve import ControlPointCurve
from vcell_client.models.coordinate import Coordinate
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SampledCurve(ControlPointCurve):
    """
    SampledCurve
    """ # noqa: E501
    type: StrictStr
    default_num_samples: Optional[StrictInt] = Field(default=None, alias="defaultNumSamples")
    max_control_points: Optional[StrictInt] = Field(default=None, alias="maxControlPoints")
    min_control_points: Optional[StrictInt] = Field(default=None, alias="minControlPoints")
    segment_count: Optional[StrictInt] = Field(default=None, alias="segmentCount")
    spatial_length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="spatialLength")
    __properties: ClassVar[List[str]] = ["bClosed", "description", "type", "beginningCoordinate", "defaultNumSamples", "endingCoordinate", "numSamplePoints", "segmentCount", "spatialLength", "closed", "valid"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SampledCurve from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of beginning_coordinate
        if self.beginning_coordinate:
            _dict['beginningCoordinate'] = self.beginning_coordinate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ending_coordinate
        if self.ending_coordinate:
            _dict['endingCoordinate'] = self.ending_coordinate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SampledCurve from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in SampledCurve) in the input: " + _key)

        _obj = cls.model_validate({
            "bClosed": obj.get("bClosed"),
            "description": obj.get("description"),
            "type": obj.get("type") if obj.get("type") is not None else 'SampledCurve',
            "beginningCoordinate": Coordinate.from_dict(obj.get("beginningCoordinate")) if obj.get("beginningCoordinate") is not None else None,
            "defaultNumSamples": obj.get("defaultNumSamples"),
            "endingCoordinate": Coordinate.from_dict(obj.get("endingCoordinate")) if obj.get("endingCoordinate") is not None else None,
            "numSamplePoints": obj.get("numSamplePoints"),
            "segmentCount": obj.get("segmentCount"),
            "spatialLength": obj.get("spatialLength"),
            "closed": obj.get("closed"),
            "valid": obj.get("valid")
        })
        return _obj


