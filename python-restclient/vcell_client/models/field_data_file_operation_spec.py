# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from vcell_client.models.cartesian_mesh import CartesianMesh
from vcell_client.models.extent import Extent
from vcell_client.models.external_data_identifier import ExternalDataIdentifier
from vcell_client.models.i_size import ISize
from vcell_client.models.key_value import KeyValue
from vcell_client.models.origin import Origin
from vcell_client.models.user import User
from vcell_client.models.variable_type import VariableType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FieldDataFileOperationSpec(BaseModel):
    """
    FieldDataFileOperationSpec
    """ # noqa: E501
    op_type: Optional[StrictInt] = Field(default=None, alias="opType")
    short_spec_data: Optional[List[List[List[StrictInt]]]] = Field(default=None, alias="shortSpecData")
    double_spec_data: Optional[List[List[List[Union[StrictFloat, StrictInt]]]]] = Field(default=None, alias="doubleSpecData")
    cartesian_mesh: Optional[CartesianMesh] = Field(default=None, alias="cartesianMesh")
    spec_edi: Optional[ExternalDataIdentifier] = Field(default=None, alias="specEDI")
    var_names: Optional[List[StrictStr]] = Field(default=None, alias="varNames")
    variable_types: Optional[List[VariableType]] = Field(default=None, alias="variableTypes")
    times: Optional[List[Union[StrictFloat, StrictInt]]] = None
    owner: Optional[User] = None
    origin: Optional[Origin] = None
    extent: Optional[Extent] = None
    isize: Optional[ISize] = None
    annotation: Optional[StrictStr] = None
    source_sim_param_scan_job_index: Optional[StrictInt] = Field(default=None, alias="sourceSimParamScanJobIndex")
    source_sim_data_key: Optional[KeyValue] = Field(default=None, alias="sourceSimDataKey")
    source_owner: Optional[User] = Field(default=None, alias="sourceOwner")
    field_data_name: Optional[StrictStr] = Field(default=None, alias="fieldDataName")
    __properties: ClassVar[List[str]] = ["opType", "shortSpecData", "doubleSpecData", "cartesianMesh", "specEDI", "varNames", "variableTypes", "times", "owner", "origin", "extent", "isize", "annotation", "sourceSimParamScanJobIndex", "sourceSimDataKey", "sourceOwner", "fieldDataName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FieldDataFileOperationSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cartesian_mesh
        if self.cartesian_mesh:
            _dict['cartesianMesh'] = self.cartesian_mesh.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spec_edi
        if self.spec_edi:
            _dict['specEDI'] = self.spec_edi.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in variable_types (list)
        _items = []
        if self.variable_types:
            for _item in self.variable_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['variableTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of origin
        if self.origin:
            _dict['origin'] = self.origin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extent
        if self.extent:
            _dict['extent'] = self.extent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of isize
        if self.isize:
            _dict['isize'] = self.isize.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_sim_data_key
        if self.source_sim_data_key:
            _dict['sourceSimDataKey'] = self.source_sim_data_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_owner
        if self.source_owner:
            _dict['sourceOwner'] = self.source_owner.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FieldDataFileOperationSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in FieldDataFileOperationSpec) in the input: " + _key)

        _obj = cls.model_validate({
            "opType": obj.get("opType"),
            "shortSpecData": obj.get("shortSpecData"),
            "doubleSpecData": obj.get("doubleSpecData"),
            "cartesianMesh": CartesianMesh.from_dict(obj.get("cartesianMesh")) if obj.get("cartesianMesh") is not None else None,
            "specEDI": ExternalDataIdentifier.from_dict(obj.get("specEDI")) if obj.get("specEDI") is not None else None,
            "varNames": obj.get("varNames"),
            "variableTypes": [VariableType.from_dict(_item) for _item in obj.get("variableTypes")] if obj.get("variableTypes") is not None else None,
            "times": obj.get("times"),
            "owner": User.from_dict(obj.get("owner")) if obj.get("owner") is not None else None,
            "origin": Origin.from_dict(obj.get("origin")) if obj.get("origin") is not None else None,
            "extent": Extent.from_dict(obj.get("extent")) if obj.get("extent") is not None else None,
            "isize": ISize.from_dict(obj.get("isize")) if obj.get("isize") is not None else None,
            "annotation": obj.get("annotation"),
            "sourceSimParamScanJobIndex": obj.get("sourceSimParamScanJobIndex"),
            "sourceSimDataKey": KeyValue.from_dict(obj.get("sourceSimDataKey")) if obj.get("sourceSimDataKey") is not None else None,
            "sourceOwner": User.from_dict(obj.get("sourceOwner")) if obj.get("sourceOwner") is not None else None,
            "fieldDataName": obj.get("fieldDataName")
        })
        return _obj


