# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from vcell_client.models.key_value import KeyValue
from vcell_client.models.user import User
from vcell_client.models.vc_document_type import VCDocumentType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PublicationInfo(BaseModel):
    """
    PublicationInfo
    """ # noqa: E501
    publication_key: Optional[KeyValue] = Field(default=None, alias="publicationKey")
    version_key: Optional[KeyValue] = Field(default=None, alias="versionKey")
    title: Optional[StrictStr] = None
    authors: Optional[List[StrictStr]] = None
    citation: Optional[StrictStr] = None
    pubmedid: Optional[StrictStr] = None
    doi: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    pubdate: Optional[date] = None
    vc_document_type: Optional[VCDocumentType] = Field(default=None, alias="vcDocumentType")
    user: Optional[User] = None
    the_hash_code: Optional[StrictInt] = Field(default=None, alias="theHashCode")
    __properties: ClassVar[List[str]] = ["publicationKey", "versionKey", "title", "authors", "citation", "pubmedid", "doi", "url", "pubdate", "vcDocumentType", "user", "theHashCode"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PublicationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of publication_key
        if self.publication_key:
            _dict['publicationKey'] = self.publication_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of version_key
        if self.version_key:
            _dict['versionKey'] = self.version_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PublicationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in PublicationInfo) in the input: " + _key)

        _obj = cls.model_validate({
            "publicationKey": KeyValue.from_dict(obj.get("publicationKey")) if obj.get("publicationKey") is not None else None,
            "versionKey": KeyValue.from_dict(obj.get("versionKey")) if obj.get("versionKey") is not None else None,
            "title": obj.get("title"),
            "authors": obj.get("authors"),
            "citation": obj.get("citation"),
            "pubmedid": obj.get("pubmedid"),
            "doi": obj.get("doi"),
            "url": obj.get("url"),
            "pubdate": obj.get("pubdate"),
            "vcDocumentType": obj.get("vcDocumentType"),
            "user": User.from_dict(obj.get("user")) if obj.get("user") is not None else None,
            "theHashCode": obj.get("theHashCode")
        })
        return _obj


