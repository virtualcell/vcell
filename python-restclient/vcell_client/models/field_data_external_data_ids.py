# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from vcell_client.models.external_data_identifier import ExternalDataIdentifier
from vcell_client.models.key_value import KeyValue
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FieldDataExternalDataIDs(BaseModel):
    """
    FieldDataExternalDataIDs
    """ # noqa: E501
    external_data_identifiers: Optional[List[ExternalDataIdentifier]] = Field(default=None, alias="externalDataIdentifiers")
    external_data_annotations: Optional[List[StrictStr]] = Field(default=None, alias="externalDataAnnotations")
    external_data_id_sim_refs: Optional[Dict[str, List[KeyValue]]] = Field(default=None, alias="externalDataIDSimRefs")
    __properties: ClassVar[List[str]] = ["externalDataIdentifiers", "externalDataAnnotations", "externalDataIDSimRefs"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FieldDataExternalDataIDs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in external_data_identifiers (list)
        _items = []
        if self.external_data_identifiers:
            for _item in self.external_data_identifiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['externalDataIdentifiers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in external_data_id_sim_refs (dict of array)
        _field_dict_of_array = {}
        if self.external_data_id_sim_refs:
            for _key in self.external_data_id_sim_refs:
                if self.external_data_id_sim_refs[_key] is not None:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.external_data_id_sim_refs[_key]
                    ]
            _dict['externalDataIDSimRefs'] = _field_dict_of_array
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FieldDataExternalDataIDs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in FieldDataExternalDataIDs) in the input: " + _key)

        _obj = cls.model_validate({
            "externalDataIdentifiers": [ExternalDataIdentifier.from_dict(_item) for _item in obj.get("externalDataIdentifiers")] if obj.get("externalDataIdentifiers") is not None else None,
            "externalDataAnnotations": obj.get("externalDataAnnotations"),
            "externalDataIDSimRefs": dict(
                (_k,
                        [KeyValue.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("externalDataIDSimRefs").items()
            )
        })
        return _obj


