# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from vcell_client.models.export_progress_type import ExportProgressType
from vcell_client.models.human_readable_export_data import HumanReadableExportData
from vcell_client.models.user import User
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ExportEvent(BaseModel):
    """
    ExportEvent
    """ # noqa: E501
    event_type: Optional[ExportProgressType] = Field(default=None, alias="eventType")
    progress: Optional[Union[StrictFloat, StrictInt]] = None
    format: Optional[StrictStr] = None
    location: Optional[StrictStr] = None
    user: Optional[User] = None
    job_id: Optional[StrictInt] = Field(default=None, alias="jobID")
    data_key: Optional[StrictStr] = Field(default=None, alias="dataKey")
    data_id_string: Optional[StrictStr] = Field(default=None, alias="dataIdString")
    human_readable_data: Optional[HumanReadableExportData] = Field(default=None, alias="humanReadableData")
    __properties: ClassVar[List[str]] = ["eventType", "progress", "format", "location", "user", "jobID", "dataKey", "dataIdString", "humanReadableData"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ExportEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of human_readable_data
        if self.human_readable_data:
            _dict['humanReadableData'] = self.human_readable_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ExportEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ExportEvent) in the input: " + _key)

        _obj = cls.model_validate({
            "eventType": obj.get("eventType"),
            "progress": obj.get("progress"),
            "format": obj.get("format"),
            "location": obj.get("location"),
            "user": User.from_dict(obj.get("user")) if obj.get("user") is not None else None,
            "jobID": obj.get("jobID"),
            "dataKey": obj.get("dataKey"),
            "dataIdString": obj.get("dataIdString"),
            "humanReadableData": HumanReadableExportData.from_dict(obj.get("humanReadableData")) if obj.get("humanReadableData") is not None else None
        })
        return _obj


