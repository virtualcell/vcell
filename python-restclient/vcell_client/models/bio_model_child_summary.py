# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from vcell_client.models.application_info import ApplicationInfo
from vcell_client.models.math_type import MathType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class BioModelChildSummary(BaseModel):
    """
    BioModelChildSummary
    """ # noqa: E501
    app_types: Optional[List[MathType]] = Field(default=None, alias="appTypes")
    geometry_dimensions: Optional[List[StrictInt]] = Field(default=None, alias="geometryDimensions")
    geometry_names: Optional[List[StrictStr]] = Field(default=None, alias="geometryNames")
    simulation_context_annotations: Optional[List[StrictStr]] = Field(default=None, alias="simulationContextAnnotations")
    simulation_context_names: Optional[List[StrictStr]] = Field(default=None, alias="simulationContextNames")
    all_simulation_names: Optional[List[List[StrictStr]]] = Field(default=None, alias="allSimulationNames")
    all_simulation_annots: Optional[List[List[StrictStr]]] = Field(default=None, alias="allSimulationAnnots")
    application_info: Optional[List[ApplicationInfo]] = Field(default=None, alias="applicationInfo")
    __properties: ClassVar[List[str]] = ["appTypes", "geometryDimensions", "geometryNames", "simulationContextAnnotations", "simulationContextNames", "allSimulationNames", "allSimulationAnnots", "applicationInfo"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of BioModelChildSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in application_info (list)
        _items = []
        if self.application_info:
            for _item in self.application_info:
                if _item:
                    _items.append(_item.to_dict())
            _dict['applicationInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of BioModelChildSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in BioModelChildSummary) in the input: " + _key)

        _obj = cls.model_validate({
            "appTypes": obj.get("appTypes"),
            "geometryDimensions": obj.get("geometryDimensions"),
            "geometryNames": obj.get("geometryNames"),
            "simulationContextAnnotations": obj.get("simulationContextAnnotations"),
            "simulationContextNames": obj.get("simulationContextNames"),
            "allSimulationNames": obj.get("allSimulationNames"),
            "allSimulationAnnots": obj.get("allSimulationAnnots"),
            "applicationInfo": [ApplicationInfo.from_dict(_item) for _item in obj.get("applicationInfo")] if obj.get("applicationInfo") is not None else None
        })
        return _obj


