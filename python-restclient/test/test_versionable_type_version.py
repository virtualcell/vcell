# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from vcell_client.models.versionable_type_version import VersionableTypeVersion

class TestVersionableTypeVersion(unittest.TestCase):
    """VersionableTypeVersion unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VersionableTypeVersion:
        """Test VersionableTypeVersion
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VersionableTypeVersion`
        """
        model = VersionableTypeVersion()
        if include_optional:
            return VersionableTypeVersion(
                v_type = vcell_client.models.versionable_type.VersionableType(
                    name = '', 
                    v_class = vcell_client.models.v_class.vClass(), 
                    b_top_level = True, 
                    code = 56, 
                    is_top_level = True, 
                    type_name = '', 
                    version_class = vcell_client.models.version_class.versionClass(), ),
                version = vcell_client.models.version.Version(
                    version_key = vcell_client.models.key_value.KeyValue(
                        value = 1.337, ), 
                    version_name = '', 
                    version_owner = vcell_client.models.user.User(
                        user_name = '', 
                        key = vcell_client.models.key_value.KeyValue(
                            value = 1.337, ), 
                        i_d = , 
                        name = '', 
                        test_account = True, ), 
                    version_group_access = vcell_client.models.group_access.GroupAccess(
                        groupid = 1.337, 
                        description = '', ), 
                    version_branch_point_ref = , 
                    version_branch_id = 1.337, 
                    version_date = 'Thu Mar 10 00:00:00 UTC 2022', 
                    version_flag = vcell_client.models.version_flag.VersionFlag(
                        int_value = 56, 
                        archived = True, 
                        current = True, 
                        published = True, ), 
                    version_annot = '', 
                    annot = '', 
                    branch_id = 1.337, 
                    branch_point_ref_key = , 
                    date = 'Thu Mar 10 00:00:00 UTC 2022', 
                    flag = vcell_client.models.version_flag.VersionFlag(
                        int_value = 56, 
                        archived = True, 
                        current = True, 
                        published = True, ), 
                    group_access = vcell_client.models.group_access.GroupAccess(
                        groupid = 1.337, 
                        description = '', ), 
                    name = '', 
                    owner = vcell_client.models.user.User(
                        user_name = '', 
                        name = '', 
                        test_account = True, ), )
            )
        else:
            return VersionableTypeVersion(
        )
        """

    def testVersionableTypeVersion(self):
        """Test VersionableTypeVersion"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
