# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from vcell_client.models.field_data_db_operation_spec import FieldDataDBOperationSpec

class TestFieldDataDBOperationSpec(unittest.TestCase):
    """FieldDataDBOperationSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FieldDataDBOperationSpec:
        """Test FieldDataDBOperationSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FieldDataDBOperationSpec`
        """
        model = FieldDataDBOperationSpec()
        if include_optional:
            return FieldDataDBOperationSpec(
                op_type = 56,
                spec_edi = vcell_client.models.external_data_identifier.ExternalDataIdentifier(
                    key = vcell_client.models.key_value.KeyValue(
                        value = 1.337, ), 
                    owner = vcell_client.models.user.User(
                        user_name = '', 
                        i_d = vcell_client.models.key_value.KeyValue(
                            value = 1.337, ), 
                        name = '', 
                        test_account = True, ), 
                    name = '', 
                    i_d = '', 
                    job_index = 56, 
                    simulation_key = , 
                    parameter_scan_type = True, 
                    data_key = , ),
                owner = vcell_client.models.user.User(
                    user_name = '', 
                    key = vcell_client.models.key_value.KeyValue(
                        value = 1.337, ), 
                    i_d = vcell_client.models.key_value.KeyValue(
                        value = 1.337, ), 
                    name = '', 
                    test_account = True, ),
                new_ext_data_id_name = '',
                annotation = '',
                source_names = [
                    ''
                    ],
                source_owner = vcell_client.models.versionable_type_version.VersionableTypeVersion(
                    v_type = vcell_client.models.versionable_type.VersionableType(
                        name = '', 
                        v_class = vcell_client.models.v_class.vClass(), 
                        b_top_level = True, 
                        code = 56, 
                        is_top_level = True, 
                        type_name = '', 
                        version_class = vcell_client.models.version_class.versionClass(), ), 
                    version = vcell_client.models.version.Version(
                        version_key = vcell_client.models.key_value.KeyValue(
                            value = 1.337, ), 
                        version_name = '', 
                        version_owner = vcell_client.models.user.User(
                            user_name = '', 
                            key = vcell_client.models.key_value.KeyValue(
                                value = 1.337, ), 
                            i_d = , 
                            name = '', 
                            test_account = True, ), 
                        version_group_access = vcell_client.models.group_access.GroupAccess(
                            groupid = 1.337, 
                            description = '', ), 
                        version_branch_point_ref = , 
                        version_branch_id = 1.337, 
                        version_date = 'Thu Mar 10 00:00:00 UTC 2022', 
                        version_flag = vcell_client.models.version_flag.VersionFlag(
                            int_value = 56, 
                            archived = True, 
                            current = True, 
                            published = True, ), 
                        version_annot = '', 
                        annot = '', 
                        branch_id = 1.337, 
                        branch_point_ref_key = , 
                        date = 'Thu Mar 10 00:00:00 UTC 2022', 
                        flag = vcell_client.models.version_flag.VersionFlag(
                            int_value = 56, 
                            archived = True, 
                            current = True, 
                            published = True, ), 
                        group_access = vcell_client.models.group_access.GroupAccess(
                            groupid = 1.337, 
                            description = '', ), 
                        name = '', 
                        owner = vcell_client.models.user.User(
                            user_name = '', 
                            name = '', 
                            test_account = True, ), ), ),
                b_include_sim_refs = True
            )
        else:
            return FieldDataDBOperationSpec(
        )
        """

    def testFieldDataDBOperationSpec(self):
        """Test FieldDataDBOperationSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
