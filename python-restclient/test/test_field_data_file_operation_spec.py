# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from vcell_client.models.field_data_file_operation_spec import FieldDataFileOperationSpec

class TestFieldDataFileOperationSpec(unittest.TestCase):
    """FieldDataFileOperationSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FieldDataFileOperationSpec:
        """Test FieldDataFileOperationSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FieldDataFileOperationSpec`
        """
        model = FieldDataFileOperationSpec()
        if include_optional:
            return FieldDataFileOperationSpec(
                op_type = 56,
                short_spec_data = [
                    [
                        [
                            56
                            ]
                        ]
                    ],
                double_spec_data = [
                    [
                        [
                            1.337
                            ]
                        ]
                    ],
                cartesian_mesh = vcell_client.models.cartesian_mesh.CartesianMesh(
                    compressed_bytes = bytes(b'blah'), 
                    u_cd_info = vcell_client.models.ucd_info.UCDInfo(
                        ucd_grid_nodes = [
                            [
                                [
                                    vcell_client.models.coordinate.Coordinate(
                                        x = 1.337, 
                                        y = 1.337, 
                                        z = 1.337, )
                                    ]
                                ]
                            ], 
                        ucd_membrane_quads = [
                            [
                                56
                                ]
                            ], 
                        reduced_ucd_grid_nodes_v = [
                            vcell_client.models.coordinate.Coordinate(
                                x = 1.337, 
                                y = 1.337, 
                                z = 1.337, )
                            ], 
                        u_cd_grid_nodes = [
                            [
                                [
                                    
                                    ]
                                ]
                            ], 
                        u_cd_membrane_quads = [
                            [
                                56
                                ]
                            ], 
                        num_volume_nodes_x = 56, 
                        num_volume_nodes_y = 56, 
                        num_volume_nodes_z = 56, 
                        num_points_xyz = 56, 
                        num_volume_nodes_xy = 56, 
                        num_volume_cells = 56, 
                        num_membrane_cells = 56, ), 
                    geometry_dimension = 56, 
                    volume_region_map_subvolume = {
                        'key' : 56
                        }, 
                    membrane_region_map_subvolumes_in_out = {
                        'key' : null
                        }, 
                    num_membrane_elements = 56, 
                    num_membrane_regions = 56, 
                    num_volume_elements = 56, 
                    num_volume_regions = 56, 
                    i_size = vcell_client.models.i_size.ISize(
                        x = 56, 
                        y = 56, 
                        z = 56, 
                        x_yz = 56, ), 
                    size_x = 56, 
                    size_y = 56, 
                    size_z = 56, 
                    membrane_connectivity_ok = True, 
                    output_fields = [
                        null
                        ], 
                    chombo_mesh = True, ),
                spec_edi = vcell_client.models.external_data_identifier.ExternalDataIdentifier(
                    key = vcell_client.models.key_value.KeyValue(
                        value = 1.337, ), 
                    owner = vcell_client.models.user.User(
                        user_name = '', 
                        i_d = vcell_client.models.key_value.KeyValue(
                            value = 1.337, ), 
                        name = '', 
                        test_account = True, ), 
                    name = '', 
                    i_d = '', 
                    job_index = 56, 
                    simulation_key = , 
                    parameter_scan_type = True, 
                    data_key = , ),
                var_names = [
                    ''
                    ],
                variable_types = [
                    vcell_client.models.variable_type.VariableType(
                        type = 56, 
                        variable_domain = 'VARIABLEDOMAIN_POSTPROCESSING', 
                        name = '', 
                        units = '', 
                        label = '', 
                        legacy_warn = True, 
                        default_label = '', 
                        default_units = '', 
                        type_name = '', )
                    ],
                times = [
                    1.337
                    ],
                owner = vcell_client.models.user.User(
                    user_name = '', 
                    key = vcell_client.models.key_value.KeyValue(
                        value = 1.337, ), 
                    i_d = vcell_client.models.key_value.KeyValue(
                        value = 1.337, ), 
                    name = '', 
                    test_account = True, ),
                origin = vcell_client.models.origin.Origin(
                    x = 1.337, 
                    y = 1.337, 
                    z = 1.337, ),
                extent = vcell_client.models.extent.Extent(
                    x = 1.337, 
                    y = 1.337, 
                    z = 1.337, ),
                isize = vcell_client.models.i_size.ISize(
                    x = 56, 
                    y = 56, 
                    z = 56, 
                    x_yz = 56, ),
                annotation = '',
                source_sim_param_scan_job_index = 56,
                source_sim_data_key = vcell_client.models.key_value.KeyValue(
                    value = 1.337, ),
                source_owner = vcell_client.models.user.User(
                    user_name = '', 
                    key = vcell_client.models.key_value.KeyValue(
                        value = 1.337, ), 
                    i_d = vcell_client.models.key_value.KeyValue(
                        value = 1.337, ), 
                    name = '', 
                    test_account = True, )
            )
        else:
            return FieldDataFileOperationSpec(
        )
        """

    def testFieldDataFileOperationSpec(self):
        """Test FieldDataFileOperationSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
