# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from vcell_client.models.status_message import StatusMessage

class TestStatusMessage(unittest.TestCase):
    """StatusMessage unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StatusMessage:
        """Test StatusMessage
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StatusMessage`
        """
        model = StatusMessage()
        if include_optional:
            return StatusMessage(
                job_status = vcell_client.models.simulation_job_status_record.SimulationJobStatusRecord(
                    field_time_data_stamp = '2022-03-10T16:15:50Z', 
                    field_vc_sim_id = vcell_client.models.vc_simulation_identifier.VCSimulationIdentifier(
                        simulation_key = '', 
                        owner = vcell_client.models.user.User(
                            user_name = '', 
                            key = '', 
                            my_specials = [
                                'admins'
                                ], ), 
                        id = '', ), 
                    field_submit_date = '2022-03-10T16:15:50Z', 
                    field_scheduler_status = 'WAITING', 
                    field_simulation_message = vcell_client.models.simulation_message.SimulationMessage(
                        detailed_state = 'UNKNOWN', 
                        message = '', 
                        htc_job_id = vcell_client.models.htc_job_id.HtcJobID(
                            job_number = 56, 
                            server = '', 
                            batch_system_type = 'PBS', ), 
                        display_message = '', ), 
                    field_task_id = 56, 
                    field_server_id = '', 
                    field_job_index = 56, 
                    field_simulation_execution_status = vcell_client.models.simulation_execution_status_record.SimulationExecutionStatusRecord(
                        field_start_date = '2022-03-10T16:15:50Z', 
                        field_latest_update_date = '2022-03-10T16:15:50Z', 
                        field_end_date = '2022-03-10T16:15:50Z', 
                        field_compute_host = '', 
                        field_has_data = True, 
                        field_htc_job_id = vcell_client.models.htc_job_id.HtcJobID(
                            job_number = 56, 
                            server = '', ), ), 
                    field_simulation_queue_entry_status = vcell_client.models.simulation_queue_entry_status_record.SimulationQueueEntryStatusRecord(
                        field_queue_priority = 56, 
                        field_queue_date = '2022-03-10T16:15:50Z', 
                        field_queue_id = 'QUEUE_ID_WAITING', ), ),
                user_name = '',
                progress = 1.337,
                timepoint = 1.337
            )
        else:
            return StatusMessage(
        )
        """

    def testStatusMessage(self):
        """Test StatusMessage"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
