# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from vcell_client.models.bio_model_context import BioModelContext

class TestBioModelContext(unittest.TestCase):
    """BioModelContext unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BioModelContext:
        """Test BioModelContext
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BioModelContext`
        """
        model = BioModelContext()
        if include_optional:
            return BioModelContext(
                version = vcell_client.models.version.Version(
                    version_key = vcell_client.models.key_value.KeyValue(
                        value = 1.337, ), 
                    version_name = '', 
                    version_owner = vcell_client.models.user.User(
                        user_name = '', 
                        key = vcell_client.models.key_value.KeyValue(
                            value = 1.337, ), ), 
                    version_group_access = vcell_client.models.group_access.GroupAccess(
                        groupid = 1.337, 
                        description = '', ), 
                    version_branch_point_ref = , 
                    version_branch_id = 1.337, 
                    version_date = 'Thu Mar 10 00:00:00 UTC 2022', 
                    version_flag = vcell_client.models.version_flag.VersionFlag(
                        int_value = 56, 
                        archived = True, 
                        current = True, 
                        published = True, ), 
                    version_annot = '', 
                    annot = '', 
                    branch_id = 1.337, 
                    branch_point_ref_key = , 
                    date = 'Thu Mar 10 00:00:00 UTC 2022', 
                    flag = vcell_client.models.version_flag.VersionFlag(
                        int_value = 56, 
                        archived = True, 
                        current = True, 
                        published = True, ), 
                    group_access = vcell_client.models.group_access.GroupAccess(
                        groupid = 1.337, 
                        description = '', ), 
                    name = '', 
                    owner = vcell_client.models.user.User(
                        user_name = '', ), ),
                summary = vcell_client.models.bio_model_child_summary.BioModelChildSummary(
                    sc_names = [
                        ''
                        ], 
                    sc_annots = [
                        ''
                        ], 
                    geo_names = [
                        ''
                        ], 
                    geo_dims = [
                        56
                        ], 
                    app_types = [
                        'RuleBased'
                        ], 
                    sim_names = [
                        [
                            ''
                            ]
                        ], 
                    sim_annots = [
                        [
                            ''
                            ]
                        ], 
                    geometry_dimensions = [
                        56
                        ], 
                    geometry_names = [
                        ''
                        ], 
                    simulation_context_annotations = [
                        ''
                        ], 
                    simulation_context_names = [
                        ''
                        ], 
                    application_info = [
                        vcell_client.models.application_info.ApplicationInfo(
                            name = '', 
                            type = 'RuleBased', 
                            dimensions = 56, 
                            geometry_name = '', )
                        ], ),
                publication_information = [
                    vcell_client.models.publication_info.PublicationInfo(
                        publication_key = vcell_client.models.key_value.KeyValue(
                            value = 1.337, ), 
                        version_key = vcell_client.models.key_value.KeyValue(
                            value = 1.337, ), 
                        title = '', 
                        authors = [
                            ''
                            ], 
                        citation = '', 
                        pubmedid = '', 
                        doi = '', 
                        url = '', 
                        pubdate = 'Thu Mar 10 00:00:00 UTC 2022', 
                        vc_document_type = 'BIOMODEL_DOC', 
                        user = vcell_client.models.user.User(
                            user_name = '', 
                            key = , ), 
                        the_hash_code = 56, 
                        pub_date = 'Thu Mar 10 00:00:00 UTC 2022', )
                    ],
                v_cell_software_version = vcell_client.models.v_cell_software_version.VCellSoftwareVersion(
                    software_version_string = '', 
                    vcell_site = 'alpha', 
                    build_number = '', 
                    version_number = '', 
                    major_version = 56, 
                    minor_version = 56, 
                    patch_version = 56, 
                    build_int = 56, 
                    site = 'alpha', 
                    description = '', )
            )
        else:
            return BioModelContext(
        )
        """

    def testBioModelContext(self):
        """Test BioModelContext"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
