# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from vcell_client.models.simulation_job_status_record import SimulationJobStatusRecord

class TestSimulationJobStatusRecord(unittest.TestCase):
    """SimulationJobStatusRecord unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SimulationJobStatusRecord:
        """Test SimulationJobStatusRecord
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SimulationJobStatusRecord`
        """
        model = SimulationJobStatusRecord()
        if include_optional:
            return SimulationJobStatusRecord(
                field_time_data_stamp = 'Thu Mar 10 00:00:00 UTC 2022',
                field_vc_sim_id = vcell_client.models.vc_simulation_identifier.VCSimulationIdentifier(
                    simulation_key = vcell_client.models.key_value.KeyValue(
                        value = 1.337, ), 
                    owner = vcell_client.models.user.User(
                        user_name = '', 
                        key = vcell_client.models.key_value.KeyValue(
                            value = 1.337, ), 
                        i_d = , 
                        name = '', 
                        test_account = True, ), 
                    i_d = '', ),
                field_submit_date = 'Thu Mar 10 00:00:00 UTC 2022',
                field_scheduler_status = 'WAITING',
                field_simulation_message = vcell_client.models.simulation_message.SimulationMessage(
                    detailed_state = 'UNKNOWN', 
                    message = '', 
                    htc_job_id = vcell_client.models.htc_job_id.HtcJobID(
                        job_number = 56, 
                        server = '', 
                        batch_system_type = 'PBS', ), 
                    display_message = '', ),
                field_task_id = 56,
                field_server_id = '',
                field_job_index = 56,
                field_simulation_execution_status = vcell_client.models.simulation_execution_status.SimulationExecutionStatus(
                    field_start_date = 'Thu Mar 10 00:00:00 UTC 2022', 
                    field_latest_update_date = 'Thu Mar 10 00:00:00 UTC 2022', 
                    field_end_date = 'Thu Mar 10 00:00:00 UTC 2022', 
                    field_compute_host = '', 
                    field_has_data = True, 
                    field_htc_job_id = vcell_client.models.htc_job_id.HtcJobID(
                        job_number = 56, 
                        server = '', 
                        batch_system_type = 'PBS', ), 
                    compute_host = '', 
                    end_date = 'Thu Mar 10 00:00:00 UTC 2022', 
                    latest_update_date = 'Thu Mar 10 00:00:00 UTC 2022', 
                    start_date = 'Thu Mar 10 00:00:00 UTC 2022', 
                    htc_job_id = vcell_client.models.htc_job_id.HtcJobID(
                        job_number = 56, 
                        server = '', ), ),
                field_simulation_queue_entry_status = vcell_client.models.simulation_queue_entry_status.SimulationQueueEntryStatus(
                    field_queue_priority = 56, 
                    field_queue_date = 'Thu Mar 10 00:00:00 UTC 2022', 
                    field_queue_id = 'QUEUE_ID_WAITING', 
                    queue_date = 'Thu Mar 10 00:00:00 UTC 2022', 
                    queue_id = 'QUEUE_ID_WAITING', 
                    queue_priority = 56, )
            )
        else:
            return SimulationJobStatusRecord(
        )
        """

    def testSimulationJobStatusRecord(self):
        """Test SimulationJobStatusRecord"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
