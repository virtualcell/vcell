# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from vcell_client.models.v_cell_info_container import VCellInfoContainer

class TestVCellInfoContainer(unittest.TestCase):
    """VCellInfoContainer unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VCellInfoContainer:
        """Test VCellInfoContainer
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VCellInfoContainer`
        """
        model = VCellInfoContainer()
        if include_optional:
            return VCellInfoContainer(
                image_infos = [
                    vcell_client.models.vc_image_summary.VCImageSummary(
                        size = vcell_client.models.i_size.ISize(
                            x = 56, 
                            y = 56, 
                            z = 56, ), 
                        extent = vcell_client.models.extent.Extent(
                            x = 1.337, 
                            y = 1.337, 
                            z = 1.337, ), 
                        version = vcell_client.models.version.Version(
                            version_key = '', 
                            annot = '', 
                            branch_id = 1.337, 
                            branch_point_ref_key = '', 
                            date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            flag = vcell_client.models.version_flag.VersionFlag(
                                version_flag = 56, 
                                int_value = 56, 
                                archived = True, 
                                current = True, 
                                published = True, ), 
                            group_access = vcell_client.models.group_access.GroupAccess(
                                groupid = 1.337, 
                                description = '', ), 
                            name = '', 
                            owner = vcell_client.models.user.User(
                                user_name = '', 
                                key = '', 
                                my_specials = [
                                    'admins'
                                    ], ), ), 
                        preview = vcell_client.models.gif_image.GIFImage(
                            gif_encoded_data = bytes(b'blah'), ), 
                        software_version = vcell_client.models.v_cell_software_version.VCellSoftwareVersion(
                            software_version_string = '', 
                            vcell_site = 'alpha', 
                            build_number = '', 
                            version_number = '', 
                            major_version = 56, 
                            minor_version = 56, 
                            patch_version = 56, 
                            build_int = 56, 
                            description = '', ), )
                    ],
                geometry_info = [
                    vcell_client.models.geometry_summary.GeometrySummary(
                        dimension = 56, 
                        origin = vcell_client.models.origin.Origin(
                            x = 1.337, 
                            y = 1.337, 
                            z = 1.337, ), 
                        extent = vcell_client.models.extent.Extent(
                            x = 1.337, 
                            y = 1.337, 
                            z = 1.337, ), 
                        image_ref = '', 
                        version = vcell_client.models.version.Version(
                            version_key = '', 
                            annot = '', 
                            branch_id = 1.337, 
                            branch_point_ref_key = '', 
                            date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            flag = vcell_client.models.version_flag.VersionFlag(
                                version_flag = 56, 
                                int_value = 56, 
                                archived = True, 
                                current = True, 
                                published = True, ), 
                            group_access = vcell_client.models.group_access.GroupAccess(
                                groupid = 1.337, 
                                description = '', ), 
                            name = '', 
                            owner = vcell_client.models.user.User(
                                user_name = '', 
                                key = '', 
                                my_specials = [
                                    'admins'
                                    ], ), ), 
                        software_version = vcell_client.models.v_cell_software_version.VCellSoftwareVersion(
                            software_version_string = '', 
                            vcell_site = 'alpha', 
                            build_number = '', 
                            version_number = '', 
                            major_version = 56, 
                            minor_version = 56, 
                            patch_version = 56, 
                            build_int = 56, 
                            description = '', ), )
                    ],
                math_model_infos = [
                    vcell_client.models.math_model_summary.MathModelSummary(
                        version = vcell_client.models.version.Version(
                            version_key = '', 
                            annot = '', 
                            branch_id = 1.337, 
                            branch_point_ref_key = '', 
                            date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            flag = vcell_client.models.version_flag.VersionFlag(
                                version_flag = 56, 
                                int_value = 56, 
                                archived = True, 
                                current = True, 
                                published = True, ), 
                            group_access = vcell_client.models.group_access.GroupAccess(
                                groupid = 1.337, 
                                description = '', ), 
                            name = '', 
                            owner = vcell_client.models.user.User(
                                user_name = '', 
                                key = '', 
                                my_specials = [
                                    'admins'
                                    ], ), ), 
                        key_value = '', 
                        model_info = vcell_client.models.math_model_child_summary.MathModelChildSummary(
                            model_type = 'RuleBased', 
                            geometry_dimension = 56, 
                            geometry_name = '', 
                            simulation_annotations = [
                                ''
                                ], 
                            simulation_names = [
                                ''
                                ], ), 
                        software_version = vcell_client.models.v_cell_software_version.VCellSoftwareVersion(
                            software_version_string = '', 
                            vcell_site = 'alpha', 
                            build_number = '', 
                            version_number = '', 
                            major_version = 56, 
                            minor_version = 56, 
                            patch_version = 56, 
                            build_int = 56, 
                            description = '', ), 
                        publication_infos = [
                            vcell_client.models.publication_info.PublicationInfo(
                                publication_key = '', 
                                title = '', 
                                authors = [
                                    ''
                                    ], 
                                citation = '', 
                                pubmedid = '', 
                                doi = '', 
                                url = '', 
                                pubdate = 'Thu Mar 10 00:00:00 UTC 2022', 
                                vc_document_type = 'BIOMODEL_DOC', 
                                user = vcell_client.models.user.User(
                                    user_name = '', 
                                    key = '', ), 
                                the_hash_code = 56, )
                            ], 
                        annotated_functions = '', )
                    ],
                bio_model_infos = [
                    vcell_client.models.bio_model_summary.BioModelSummary(
                        version = vcell_client.models.version.Version(
                            version_key = '', 
                            annot = '', 
                            branch_id = 1.337, 
                            branch_point_ref_key = '', 
                            date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            flag = vcell_client.models.version_flag.VersionFlag(
                                version_flag = 56, 
                                int_value = 56, 
                                archived = True, 
                                current = True, 
                                published = True, ), 
                            group_access = vcell_client.models.group_access.GroupAccess(
                                groupid = 1.337, 
                                description = '', ), 
                            name = '', 
                            owner = vcell_client.models.user.User(
                                user_name = '', 
                                key = '', 
                                my_specials = [
                                    'admins'
                                    ], ), ), 
                        summary = vcell_client.models.bio_model_child_summary.BioModelChildSummary(
                            sc_names = [
                                ''
                                ], 
                            sc_annots = [
                                ''
                                ], 
                            geo_names = [
                                ''
                                ], 
                            geo_dims = [
                                56
                                ], 
                            app_types = [
                                'RuleBased'
                                ], 
                            sim_names = [
                                [
                                    ''
                                    ]
                                ], 
                            sim_annots = [
                                [
                                    ''
                                    ]
                                ], 
                            geometry_dimensions = [
                                56
                                ], 
                            geometry_names = [
                                ''
                                ], 
                            simulation_context_annotations = [
                                ''
                                ], 
                            simulation_context_names = [
                                ''
                                ], 
                            application_info = [
                                vcell_client.models.application_info.ApplicationInfo(
                                    name = '', 
                                    type = 'RuleBased', 
                                    dimensions = 56, 
                                    geometry_name = '', )
                                ], ), 
                        publication_information = [
                            vcell_client.models.publication_info.PublicationInfo(
                                publication_key = '', 
                                title = '', 
                                authors = [
                                    ''
                                    ], 
                                citation = '', 
                                pubmedid = '', 
                                doi = '', 
                                url = '', 
                                pubdate = 'Thu Mar 10 00:00:00 UTC 2022', 
                                vc_document_type = 'BIOMODEL_DOC', 
                                user = vcell_client.models.user.User(
                                    user_name = '', 
                                    key = '', ), 
                                the_hash_code = 56, )
                            ], 
                        v_cell_software_version = vcell_client.models.v_cell_software_version.VCellSoftwareVersion(
                            software_version_string = '', 
                            vcell_site = 'alpha', 
                            build_number = '', 
                            version_number = '', 
                            major_version = 56, 
                            minor_version = 56, 
                            patch_version = 56, 
                            build_int = 56, 
                            description = '', ), )
                    ]
            )
        else:
            return VCellInfoContainer(
        )
        """

    def testVCellInfoContainer(self):
        """Test VCellInfoContainer"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
