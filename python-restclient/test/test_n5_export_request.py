# coding: utf-8

"""
    VCell API

    VCell API

    The version of the OpenAPI document: 1.0.1
    Contact: vcell_support@uchc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from vcell_client.models.n5_export_request import N5ExportRequest

class TestN5ExportRequest(unittest.TestCase):
    """N5ExportRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> N5ExportRequest:
        """Test N5ExportRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `N5ExportRequest`
        """
        model = N5ExportRequest()
        if include_optional:
            return N5ExportRequest(
                standard_export_information = vcell_client.models.standard_export_info.StandardExportInfo(
                    output_context = [
                        vcell_client.models.annotated_function_dto.AnnotatedFunctionDTO(
                            function_name = '', 
                            function_expression = '', 
                            error = '', 
                            domain = vcell_client.models.domain.Domain(
                                name = '', ), 
                            function_type = vcell_client.models.variable_type.VariableType(
                                type = 56, 
                                variable_domain = 'VARIABLEDOMAIN_POSTPROCESSING', 
                                name = '', 
                                units = '', 
                                label = '', 
                                legacy_warn = True, 
                                default_label = '', 
                                default_units = '', 
                                type_name = '', ), 
                            category = 'PREDEFINED', )
                        ], 
                    context_name = '', 
                    simulation_name = '', 
                    simulation_key = '', 
                    simulation_job = 56, 
                    geometry_specs = vcell_client.models.geometry_spec_dto.GeometrySpecDTO(
                        selections = [
                            vcell_client.models.spatial_selection.SpatialSelection(
                                curve_selection_info = vcell_client.models.curve_selection_info.CurveSelectionInfo(
                                    field_curve = vcell_client.models.curve.Curve(
                                        b_closed = True, 
                                        description = '', 
                                        type = '', 
                                        beginning_coordinate = vcell_client.models.coordinate.Coordinate(
                                            x = 1.337, 
                                            y = 1.337, 
                                            z = 1.337, ), 
                                        default_num_samples = 56, 
                                        ending_coordinate = vcell_client.models.coordinate.Coordinate(
                                            x = 1.337, 
                                            y = 1.337, 
                                            z = 1.337, ), 
                                        num_sample_points = 56, 
                                        segment_count = 56, 
                                        spatial_length = 1.337, 
                                        closed = True, 
                                        valid = True, ), 
                                    field_type = 56, 
                                    field_control_point = 56, 
                                    field_segment = 56, 
                                    field_u = 1.337, 
                                    field_u_extended = 1.337, 
                                    field_control_point_extended = 56, 
                                    field_segment_extended = 56, 
                                    field_direction_negative = True, 
                                    crossing = True, ), 
                                var_type = vcell_client.models.variable_type.VariableType(
                                    type = 56, 
                                    name = '', 
                                    units = '', 
                                    label = '', 
                                    legacy_warn = True, 
                                    default_label = '', 
                                    default_units = '', 
                                    type_name = '', ), 
                                type = '', 
                                smallest_mesh_cell_dimension_length = 1.337, 
                                variable_type = , 
                                closed = True, 
                                point = True, )
                            ], 
                        axis = 56, 
                        slice_number = 56, 
                        geometry_mode = 'GEOMETRY_SELECTIONS', ), 
                    time_specs = vcell_client.models.time_specs.TimeSpecs(
                        begin_time_index = 56, 
                        end_time_index = 56, 
                        all_times = [
                            1.337
                            ], 
                        mode = 'TIME_POINT', ), 
                    variable_specs = vcell_client.models.variable_specs.VariableSpecs(
                        variable_names = [
                            ''
                            ], ), ),
                sub_volume = {
                    'key' : ''
                    },
                exportable_data_type = 'ODE_VARIABLE_DATA',
                dataset_name = ''
            )
        else:
            return N5ExportRequest(
        )
        """

    def testN5ExportRequest(self):
        """Test N5ExportRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
