diff --git a/vcell-restclient/src/main/java/org/vcell/restclient/api/SolverResourceApi.java b/vcell-restclient/src/main/java/org/vcell/restclient/api/SolverResourceApi.java
index 07b5565..097148c 100644
--- a/vcell-restclient/src/main/java/org/vcell/restclient/api/SolverResourceApi.java
+++ b/vcell-restclient/src/main/java/org/vcell/restclient/api/SolverResourceApi.java
@@ -12,6 +12,8 @@
 
 package org.vcell.restclient.api;
 
+import org.apache.commons.io.FileUtils;
+import org.apache.commons.lang.RandomStringUtils;
 import org.vcell.restclient.ApiClient;
 import org.vcell.restclient.ApiException;
 import org.vcell.restclient.ApiResponse;
@@ -123,10 +125,13 @@ public class SolverResourceApi {
         if (localVarResponse.statusCode()/ 100 != 2) {
           throw getApiException("getFVSolverInputFromSBML", localVarResponse);
         }
+        InputStream inputStream = localVarResponse.body();
+        File file = File.createTempFile("finite-volume-input-" + RandomStringUtils.randomAlphabetic(10), ".tmp");
+        FileUtils.copyInputStreamToFile(inputStream, file);
         return new ApiResponse<File>(
           localVarResponse.statusCode(),
           localVarResponse.headers().map(),
-          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<File>() {}) // closes the InputStream
+          localVarResponse.body() == null ? null : file // closes the InputStream
         );
       } finally {
       }
@@ -227,10 +232,13 @@ public class SolverResourceApi {
         if (localVarResponse.statusCode()/ 100 != 2) {
           throw getApiException("getFVSolverInputFromVCML", localVarResponse);
         }
+        InputStream inputStream = localVarResponse.body();
+        File file = File.createTempFile("finite-volume-input-" + RandomStringUtils.randomAlphabetic(10), ".tmp");
+        FileUtils.copyInputStreamToFile(inputStream, file);
         return new ApiResponse<File>(
           localVarResponse.statusCode(),
           localVarResponse.headers().map(),
-          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<File>() {}) // closes the InputStream
+          localVarResponse.body() == null ? null : file // closes the InputStream
         );
       } finally {
       }
