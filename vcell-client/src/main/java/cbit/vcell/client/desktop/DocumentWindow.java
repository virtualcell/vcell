/*
 * Copyright (C) 1999-2011 University of Connecticut Health Center
 *
 * Licensed under the MIT License (the "License").
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *  http://www.opensource.org/licenses/mit-license.php
 */

package cbit.vcell.client.desktop;

import cbit.util.xml.XmlUtil;
import cbit.vcell.biomodel.BioModel;
import cbit.vcell.biomodel.meta.VCMetaData;
import cbit.vcell.client.*;
import cbit.vcell.client.constants.GuiConstants;
import cbit.vcell.client.data.ExportedDataViewer;
import cbit.vcell.client.server.*;
import cbit.vcell.client.task.AsynchClientTask;
import cbit.vcell.client.task.ClientTaskDispatcher;
import cbit.vcell.client.task.LaunchVirtualFRAP;
import cbit.vcell.desktop.ClientLogin;
import cbit.vcell.resource.OperatingSystemInfo;
import cbit.vcell.resource.PropertyLoader;
import cbit.vcell.resource.ResourceUtil;
import cbit.vcell.server.VCellConnectionFactory;
import com.google.inject.ConfigurationException;
import com.google.inject.Key;
import com.google.inject.name.Names;
import org.vcell.DependencyConstants;
import org.vcell.client.logicalwindow.LWTopFrame;
import org.vcell.documentation.VcellHelpViewer;
import org.vcell.util.UtilCancelException;
import org.vcell.util.document.User;
import org.vcell.util.document.VCDocument;
import org.vcell.util.document.VCDocument.VCDocumentType;
import org.vcell.util.document.VersionFlag;
import org.vcell.util.gui.*;
import org.vcell.util.gui.exporter.FileFilters;
import org.vcell.util.importer.PathwayImportPanel.PathwayImportOption;

import javax.swing.*;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Hashtable;

/**
 * This type was generated by a SmartGuide.
 */
@SuppressWarnings("serial")
public class DocumentWindow extends LWTopFrame implements TopLevelWindow, ReconnectListener {

    @SuppressWarnings("unused") //PENDING Window Manager redesign
    private final static String HelpViewerContextObject = "HelpViewerWindow";  // this object instance is the context for the help ChildWindow
    private static final String notificationsUrl = "https://vcell.org/webstart/VCell_alert/VCell_Alert.html";
    private final ChildWindowManager childWindowManager;

    private JMenuItem ivjAbout_BoxMenuItem = null;
    private JMenuItem ivjManageUser = null;
    private JMenuItem loginMenuItem = null;
    private JMenuItem loginAsGuestMenuItem = null;
    private JMenuItem ivjLogoutUser = null;
    private JMenuItem ivjCloseMenuItem = null;
    private JMenuBar ivjDocumentWindowJMenuBar = null;
    private final IvjEventHandler ivjEventHandler = new IvjEventHandler();
    private JMenuItem ivjExitMenuItem = null;
    private JMenu ivjFileMenu = null;
    private JMenu ivjHelpMenu = null;
    private JMenu ivjNewMenuItem = null;
    private JMenu ivjOpenMenuItem = null;
    //private JMenu recentMenuItem = new JMenu("Open Recent...");
    private JMenuItem ivjReconnectMenuItem = null;
    //	private JMenuItem ivjImageJServiceMenuItem = null;
    private JMenuItem ivjSave_AsMenuItem = null;
    private JMenuItem ivjSave_AsLocalMenuItem = null;
    private JMenuItem ivjSave_VersionMenuItem = null;
    private JMenuItem ivjSaveMenuItem = null;
    private JMenu ivjServerMenu = null;
    private JCheckBoxMenuItem ivjStatusbarMenuItem = null;
    private JPanel ivjStatusBarPane = null;
    //--------------------------------------
    private JSeparator ivjJSeparator6 = null;
    private JMenuItem ivjJMenuItemNewBioModel = null;
    private JMenuItem ivjJMenuItemOpenBioModel = null;
    private JMenuItem ivjJMenuItemOpenLocal = null;
    private JMenuItem ivjJMenuItemOpenMathModel = null;
    private JProgressBar ivjJProgressBarMemory = null;
    private DocumentWindowManager fieldWindowManager = null;
    private JMenuItem ivjJMenuItemExport = null;
    private JMenuItem menuItemImport = null;
    private JProgressBar ivjJProgressBarConnection = null;
    private JMenuItem ivjJMenuItemCompare = null;
    private JMenuItem ivjJMenuItemRevert = null;
    private JMenuItem ivjMathFromBioMenuItem = null;
    private JMenu ivjMathMenu = null;
    private JMenuItem ivjNonSpatialMenuItem = null;
    private JMenuItem ivjSpatialExistingMenuItem = null;
    private JMenuItem ivjSpatialCreateNewMenuItem = null;
    //	private JMenuItem ivjEdit_Annotation_JMenuItem = null;
    private JMenuItem ivjTestingFrameworkMenuItem = null;
    private JMenuItem ivjJMenuItemOnlineHelp = null;
    private JMenuItem ivjJMenuItemOnlineSupport = null;
    private JMenuItem ivjJMenuItemDiscussionGroup = null;
    private JMenuItem ivjJMenuItemManagePermissions = null;
    private JMenuItem ivjJMenuItemOnlinePublish = null;
    private JMenuItem jMenuItemGrantPermissionsToVCellSupport = null;

    private JMenuItem ivjJMenuItemEmailSupport = null;
    private JMenuItem newHelpMenuItem = null;
    //	private JMenuItem ivjRunBNGMenuItem = null;
    private JMenuItem ivjRunVFrapMenuItem = null;
    //Added Oct. 17th, 2007. To put a tool menu in
    private JMenu toolMenu = null;
    private JMenuItem viewJobsMenuItem = null;
    private JMenuItem jMenuItemPermissions = null;
    private JLabel warningText = null;
    private JLabel iconText = null;
    private JDialog viewSpeciesDialog = null;

    private JMenuItem exportedDataViewer = null;

    private final JMenuItem menuItemImportPathwayWebLocation = null;
    private final JMenuItem menuItemImportPathwayFile = null;
    private final JMenuItem menuItemImportPathwayExample = null;

    class IvjEventHandler implements java.awt.event.ActionListener, java.awt.event.ItemListener, java.awt.event.MouseListener {
        public void actionPerformed(java.awt.event.ActionEvent e) {
            try {
                if (e.getSource() == DocumentWindow.this.getAbout_BoxMenuItem())
                    showAboutBox(DocumentWindow.this);
                if (e.getSource() == DocumentWindow.this.getCloseMenuItem())
                    DocumentWindow.this.getWindowManager().closeWindow();
                if (e.getSource() == DocumentWindow.this.getExitMenuItem())
                    DocumentWindow.this.getWindowManager().exitApplication();
                if (e.getSource() == DocumentWindow.this.getJMenuItemNewBioModel())
                    DocumentWindow.this.newDocument(e);
                if (e.getSource() == DocumentWindow.this.getJMenuItemOpenBioModel())
                    DocumentWindow.this.openDocument(e);
                if (e.getSource() == DocumentWindow.this.getJMenuItemOpenLocal())
                    DocumentWindow.this.importExternalDocument();
                if (e.getSource() == DocumentWindow.this.getJMenuItemOpenMathModel())
                    DocumentWindow.this.openDocument(e);
                if (e.getSource() == DocumentWindow.this.getSaveMenuItem())
                    DocumentWindow.this.saveDocument(true);
                if (e.getSource() == DocumentWindow.this.getSave_AsMenuItem())
                    DocumentWindow.this.getWindowManager().saveDocumentAsNew();
                if (e.getSource() == DocumentWindow.this.getSave_AsLocalMenuItem())
                    DocumentWindow.this.saveAsLocal();
                try {
                    if (e.getSource() == DocumentWindow.this.getJMenuItemImport())
                        DocumentWindow.this.importExternalDocument();
                    if (e.getSource() == DocumentWindow.this.menuItemImportPathwayWebLocation)
                        DocumentWindow.this.importPathway(PathwayImportOption.Web_Location);
                    else if (e.getSource() == DocumentWindow.this.menuItemImportPathwayFile)
                        DocumentWindow.this.importPathway(PathwayImportOption.File);
                    else if (e.getSource() == DocumentWindow.this.menuItemImportPathwayExample)
                        DocumentWindow.this.importPathway(PathwayImportOption.Example);
                } catch (Throwable throwable) {
                    DocumentWindow.this.handleException(throwable);
                }
                if (e.getSource() == DocumentWindow.this.getSave_VersionMenuItem())
                    DocumentWindow.this.saveDocument(false);
                if (e.getSource() == DocumentWindow.this.getChange_ProxyMenuItem())
                    DocumentWindow.this.setProxy();
                if (e.getSource() == DocumentWindow.this.getReconnectUserMenuItem())
                    DocumentWindow.this.reconnect();
                if (e.getSource() == DocumentWindow.this.getJMenuItemRevert())
                    DocumentWindow.this.getWindowManager().revertToSaved();
                if (e.getSource() == DocumentWindow.this.getJMenuItemCompare())
                    DocumentWindow.this.getWindowManager().compareWithSaved();
                if (e.getSource() == DocumentWindow.this.getNonSpatialMenuItem())
                    DocumentWindow.this.newDocument(e);
                if (e.getSource() == DocumentWindow.this.getMathFromBioMenuItem())
                    DocumentWindow.this.newDocument(e);
                if (e.getSource() == DocumentWindow.this.getSpatialExistingMenuItem())
                    DocumentWindow.this.newDocument(e);
                if (e.getSource() == DocumentWindow.this.getSpatialCreateNewMenuItem())
                    DocumentWindow.this.newDocument(e);
                if (e.getSource() == DocumentWindow.this.getJMenuItemExport())
                    DocumentWindow.this.getWindowManager().exportDocument(null);
                if (e.getSource() == DocumentWindow.this.getTestingFrameworkMenuItem())
                    DocumentWindow.this.showTestingFrameworkWindow();
                if (e.getSource() == DocumentWindow.this.getJMenuItemOnlineHelp())
                    DocumentWindow.this.invokeOnlineHelp();
                if (e.getSource() == DocumentWindow.this.getJMenuItemOnlineSupport())
                    DocumentWindow.this.invokeOnlineSupport();
                if (e.getSource() == DocumentWindow.this.getJMenuItemDiscussionGroup())
                    DocumentWindow.this.invokeDiscussionGroup();
                if (e.getSource() == DocumentWindow.this.getJMenuItemManagePermissions())
                    DocumentWindow.this.invokeManagePermissions();
                if (e.getSource() == DocumentWindow.this.getJMenuItemOnlinePublish())
                    DocumentWindow.this.invokeOnlinePublish();
                if (e.getSource() == DocumentWindow.this.getJMenuItemEmailSupport())
                    DocumentWindow.this.emailSupport(e);
                if (e.getSource() == DocumentWindow.this.getNewHelpMenuItem())
                    DocumentWindow.this.showVCellHelpWindow();
                if (e.getSource() == DocumentWindow.this.getLogOutMenuItem()){
                    DocumentWindow.this.getWindowManager().getRequestManager().logOut(DocumentWindow.this.getWindowManager());
                }
                if (e.getSource() == DocumentWindow.this.getRunVFrapItem())
                    DocumentWindow.this.startVirtualFRAP();
                if (e.getSource() == DocumentWindow.this.getViewJobsMenuItem())
                    DocumentWindow.this.showViewJobsDialog();
                if (e.getSource() == DocumentWindow.this.getJMenuItemFieldData())
                    DocumentWindow.this.getWindowManager().showFieldDataWindow();
                if (e.getSource() == DocumentWindow.this.getManageUserMenuItem()) {
                    if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                        Desktop.getDesktop().browse(new URI("https://vcell-stage.cam.uchc.edu/profile"));
                    }
                }
                if (e.getSource() == DocumentWindow.this.getLoginItem()) {
                    DocumentWindow.this.login(false);
                }
                if (e.getSource() == DocumentWindow.this.getLoginAsGuestItem()) {
                    DocumentWindow.this.login(true);
                }
                if (e.getSource() == DocumentWindow.this.getPermissionsMenuItem()) {
                    DocumentWindow.this.getWindowManager().getRequestManager().accessPermissions(DocumentWindow.this, DocumentWindow.this.getWindowManager().getVCDocument());
                }
                if (e.getSource() == DocumentWindow.this.getGrantPermissionsToVCellSupportMenuItem()) {
                    RequestManager rm = DocumentWindow.this.getWindowManager().getRequestManager();
                    if (rm instanceof ClientRequestManager crm) {
                        crm.accessPermissionsEx(DocumentWindow.this, DocumentWindow.this.getWindowManager().getVCDocument(), true);
                    } else {
                        rm.accessPermissions(DocumentWindow.this, DocumentWindow.this.getWindowManager().getVCDocument());
                    }
                }
                if (e.getSource() == DocumentWindow.this.getExportedDataViewer()) {
                    DocumentWindow.this.showViewExportedDataDialog();
                }
            } catch (Throwable throwable) {
                DocumentWindow.this.handleException(throwable);
            }

        }

        public void itemStateChanged(java.awt.event.ItemEvent e) {
            if (e.getSource() == DocumentWindow.this.getStatusbarMenuItem())
                DocumentWindow.this.getStatusBarPane().setVisible(DocumentWindow.this.getStatusbarMenuItem().isSelected());
        }

        @Override
        public void mouseClicked(MouseEvent e) {
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }

        @Override
        public void mousePressed(MouseEvent e) {
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            if (e.getSource() == DocumentWindow.this.getIconBar()) {
                //	PopupGenerator.showInfoDialog(DocumentWindow.this, "VCell admin notification message");

                DialogUtils.browserLauncher(DocumentWindow.this, notificationsUrl, "Please visit '" + notificationsUrl + "' for server administrator notifications.");

//	PopupGenerator.browserLauncher(this, BeanUtils.getDynamicClientProperties().getProperty(PropertyLoader.VC_TUT_PERMISSION_URL),
//		"Please visit "+BeanUtils.getDynamicClientProperties().getProperty(PropertyLoader.VC_TUT_PERMISSION_URL)+" for instructions on how to change permissions to your Model");
            }
        }

    }

    private JMenuItem ivjJMenuItemFieldData = null;
    //	private JMenuItem jMenuItemMIRIAM = null;
    private JMenuItem jMenuItemPreferences = null;

    /**
     * DocumentWindow constructor comment.
     */
    public DocumentWindow() {
        super();
        this.initialize();
        this.childWindowManager = new ChildWindowManager(this);
    }

    @Override
    public String menuDescription() {
        return this.getTitle();
    }


    private void setProxy() {
        try {
            NetworkProxyPreferences.setProxyPrefs(this, (restartMsg) -> DialogUtils.showInfoDialog(this, restartMsg));
            if (this.getTopLevelWindowManager() == null || this.getTopLevelWindowManager().getRequestManager() == null ||
                    this.getTopLevelWindowManager().getRequestManager().getDocumentManager() == null) {
                DialogUtils.showInfoDialog(this, "Update Proxy settings by restarting VCell or using menu Server->'change user' or Server->reconnect");
            } else if (this.getTopLevelWindowManager().getRequestManager().getDocumentManager().getUser() == null) {
            } else {
                this.reconnect();
            }
        } catch (UtilCancelException e) {
        }
    }


    private void showVCellHelpWindow() {
        VcellHelpViewer.showStandaloneViewer();
        //PENDING Window Manager redesign

//	ChildWindow helpWindow = childWindowManager.getChildWindowFromContext(HelpViewerContextObject);
//	if (helpWindow!=null){
//		helpWindow.show();
//	}else{
//		VcellHelpViewer vcellHelpViewer = new VcellHelpViewer(VcellHelpViewer.VCELL_DOC_URL);
//		showHierarchy("create",vcellHelpViewer);
//		String title = "Virtual Cell Help" + " -- VCell " + DocumentWindowAboutBox.getVERSION_NO() + " (build " + DocumentWindowAboutBox.getBUILD_NO() + ")";
//		helpWindow = childWindowManager.addChildWindow(vcellHelpViewer, HelpViewerContextObject, title);
//		showHierarchy("acw",vcellHelpViewer);
//		vcellHelpViewer.setCloseMyParent(helpWindow);
//		helpWindow.setPreferredSize(new Dimension(VcellHelpViewer.DEFAULT_HELP_DIALOG_WIDTH,VcellHelpViewer.DEFAULT_HELP_DIALOG_HEIGHT));
//		helpWindow.pack();
//		helpWindow.setIsCenteredOnParent();
//		showHierarchy("bshow",vcellHelpViewer);
//		helpWindow.show();
//		showHierarchy("shown",vcellHelpViewer);
//	}
    }

    @SuppressWarnings("unused") //Pending Window Manager redesign
    private void showHierarchy(String when, VcellHelpViewer vcellHelpViewer) {
	/*
		System.out.println(when);
		Container ctn = vcellHelpViewer.getParent();
		while (ctn != null) {
			System.out.println(ctn + ": " + ctn.getName() + " : " + ctn.getClass().getName());
			ctn = ctn.getParent();
		}
	*/
    }

    private void emailSupport(java.awt.event.ActionEvent arg1) {
        try {
            Desktop desktop;
            if (Desktop.isDesktopSupported() && (desktop = Desktop.getDesktop()).isSupported(Desktop.Action.MAIL)) {
                URI mailto = new URI("mailto:vcell_support@uchc.edu");        // "mailto:john@example.com?subject=Hello%20World"
                desktop.mail(mailto);
            } else {
                throw new RuntimeException("Desktop doesn't support mailto");
            }
        } catch (URISyntaxException | IOException ex) {
            this.handleException(ex);
        }


    }


    private javax.swing.JMenuItem getAbout_BoxMenuItem() {
        if (this.ivjAbout_BoxMenuItem == null) {
            try {
                this.ivjAbout_BoxMenuItem = new javax.swing.JMenuItem();
                this.ivjAbout_BoxMenuItem.setName("About_BoxMenuItem");
                this.ivjAbout_BoxMenuItem.setText("About VCell");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjAbout_BoxMenuItem;
    }


    private void startVirtualFRAP() {
        final DocumentWindowManager dwm = this.getWindowManager();
        final Hashtable<String, Object> ht = new Hashtable<>();
        ClientTaskDispatcher.dispatch(this, ht, LaunchVirtualFRAP.taskList(dwm), true, false, false, null, false);
    }

    private JMenu getToolMenu() {
        if (this.toolMenu == null) {
            try {
                this.toolMenu = new javax.swing.JMenu();
                //getImageJServiceMenuItem().setText(createImageJServiceMenuText());
                this.toolMenu.addMenuListener(new MenuListener() {
                    @Override
                    public void menuSelected(MenuEvent e) {
//					getImageJServiceMenuItem().setText(createImageJServiceMenuText());
                    }

                    @Override
                    public void menuDeselected(MenuEvent e) {
                    }

                    @Override
                    public void menuCanceled(MenuEvent e) {
                    }
                });

                this.toolMenu.setName("ToolMenu");
                this.toolMenu.setText("Tools");
                this.toolMenu.add(this.getRunVFrapItem());
                this.toolMenu.add(this.getExportedDataViewer());
                this.toolMenu.add(new JSeparator());
//			toolMenu.add(getViewJobsMenuItem());		// moved to Server
            } catch (Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.toolMenu;
    }

    private javax.swing.JMenuItem getViewJobsMenuItem() {
        if (this.viewJobsMenuItem == null) {
            try {
                this.viewJobsMenuItem = new javax.swing.JMenuItem();
                this.viewJobsMenuItem.setName("ViewJobs");
                this.viewJobsMenuItem.setText("View Simulation Jobs");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.viewJobsMenuItem;
    }

    private JMenuItem getLoginItem() {
        if (this.loginMenuItem == null) {
            this.loginMenuItem = new javax.swing.JMenuItem();
            this.loginMenuItem.setName("LoginMenuItem");
            this.loginMenuItem.setText("Login");
            this.loginMenuItem.setEnabled(false);
        }
        return this.loginMenuItem;
    }

    private JMenuItem getLoginAsGuestItem() {
        if (this.loginAsGuestMenuItem == null) {
            this.loginAsGuestMenuItem = new javax.swing.JMenuItem();
            this.loginAsGuestMenuItem.setName("LoginAsGuestMenuItem");
            this.loginAsGuestMenuItem.setText("Login as Guest");
            this.loginAsGuestMenuItem.setEnabled(false);
        }
        return this.loginAsGuestMenuItem;
    }

    private JMenuItem getManageUserMenuItem() {
        if (this.ivjManageUser == null) {
            this.ivjManageUser = new javax.swing.JMenuItem();
            this.ivjManageUser.setName("ManageUserMenuItem");
            this.ivjManageUser.setText("Manage User");
            this.ivjManageUser.setEnabled(false);
        }
        return this.ivjManageUser;
    }

    private JMenuItem getLogOutMenuItem() {
        if (this.ivjLogoutUser == null) {
            this.ivjLogoutUser = new javax.swing.JMenuItem();
            this.ivjLogoutUser.setName("LogoutMenuItem");
            this.ivjLogoutUser.setText("Logout");
            this.ivjLogoutUser.setEnabled(false);
        }
        return this.ivjLogoutUser;
    }

    private JMenuItem getReconnectUserMenuItem() {
        if (this.ivjReconnectMenuItem == null) {
            this.ivjReconnectMenuItem = new javax.swing.JMenuItem();
            this.ivjReconnectMenuItem.setName("ReconnectMenuItem");
            this.ivjReconnectMenuItem.setText("Reconnect (Refresh)");
            this.ivjReconnectMenuItem.setEnabled(false);
        }
        return this.ivjReconnectMenuItem;
    }

    private JMenuItem ivjChange_ProxyMenuItem;

    private javax.swing.JMenuItem getChange_ProxyMenuItem() {
        if (this.ivjChange_ProxyMenuItem == null) {
            try {
                this.ivjChange_ProxyMenuItem = new javax.swing.JMenuItem();
                this.ivjChange_ProxyMenuItem.setName("Change_ProxyMenuItem");
                this.ivjChange_ProxyMenuItem.setText("Set Proxy...");
                this.ivjChange_ProxyMenuItem.setEnabled(true);
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjChange_ProxyMenuItem;
    }

    private javax.swing.JMenuItem getCloseMenuItem() {
        if (this.ivjCloseMenuItem == null) {
            try {
                this.ivjCloseMenuItem = new javax.swing.JMenuItem();
                this.ivjCloseMenuItem.setName("CloseMenuItem");
                this.ivjCloseMenuItem.setText("Close");
                this.ivjCloseMenuItem.setAccelerator(GeneralGuiUtils.CLOSE_WINDOW_KEY_STROKE);
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjCloseMenuItem;
    }

    private javax.swing.JMenuBar getDocumentWindowJMenuBar() {
        if (this.ivjDocumentWindowJMenuBar == null) {
            try {
                this.ivjDocumentWindowJMenuBar = new javax.swing.JMenuBar();
                this.ivjDocumentWindowJMenuBar.setName("DocumentWindowJMenuBar");
                this.ivjDocumentWindowJMenuBar.add(this.getFileMenu());
                this.ivjDocumentWindowJMenuBar.add(this.getServerMenu());
                this.ivjDocumentWindowJMenuBar.add(createWindowMenu(true));
                this.ivjDocumentWindowJMenuBar.add(this.getToolMenu());
                this.ivjDocumentWindowJMenuBar.add(this.getHelpMenu());
                this.ivjDocumentWindowJMenuBar.add(Box.createHorizontalGlue());
                this.ivjDocumentWindowJMenuBar.add(createWindowMenu(false));
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjDocumentWindowJMenuBar;
    }

    private javax.swing.JMenuItem getExitMenuItem() {
        if (this.ivjExitMenuItem == null) {
            try {
                this.ivjExitMenuItem = new javax.swing.JMenuItem();
                this.ivjExitMenuItem.setName("ExitMenuItem");
                this.ivjExitMenuItem.setText("Exit");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjExitMenuItem;
    }

    private javax.swing.JMenu getFileMenu() {
        if (this.ivjFileMenu == null) {
            try {
                this.ivjFileMenu = new javax.swing.JMenu();
                this.ivjFileMenu.setName("FileMenu");
                this.ivjFileMenu.setText("File");
                this.ivjFileMenu.add(this.getNewMenuItem());
                this.ivjFileMenu.add(this.getOpenMenuItem());
                this.ivjFileMenu.add(this.getCloseMenuItem());
                this.ivjFileMenu.add(new JSeparator());
                this.ivjFileMenu.add(this.getSaveMenuItem());
                this.ivjFileMenu.add(this.getSave_VersionMenuItem());
                this.ivjFileMenu.add(this.getSave_AsMenuItem());
                this.ivjFileMenu.add(this.getSave_AsLocalMenuItem());
                this.ivjFileMenu.add(new JSeparator());
                this.ivjFileMenu.add(this.getJMenuItemRevert());
                this.ivjFileMenu.add(this.getJMenuItemCompare());
                this.ivjFileMenu.add(new JSeparator());
                this.ivjFileMenu.add(this.getPermissionsMenuItem());
                this.ivjFileMenu.add(new JSeparator());
                this.ivjFileMenu.add(this.getJMenuItemFieldData());
                this.ivjFileMenu.add(this.getTestingFrameworkMenuItem());
                this.ivjFileMenu.add(new JSeparator());
                this.ivjFileMenu.add(this.getJMenuItemImport());
                this.ivjFileMenu.add(this.getJMenuItemExport());
                this.ivjFileMenu.add(new JSeparator());
                this.ivjFileMenu.add(new JSeparator());
                this.ivjFileMenu.add(this.getExitMenuItem());
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjFileMenu;
    }

    private JMenuItem getExportedDataViewer() {
        if (this.exportedDataViewer == null) {
            this.exportedDataViewer = new JMenuItem();
            this.exportedDataViewer.setName("Exported Data Viewer");
            this.exportedDataViewer.setText("Exported Data Viewer");
        }
        return this.exportedDataViewer;
    }

    public static void showGeometryCreationWarning(Component parentComponent) {
        DialogUtils.showWarningDialog(parentComponent,
                "Geometries are now viewed/edited/created within BioModels or MathModels.\n" +
                        "\nBioModel geometries are viewed/edited from a BioModel document within an Application in the 'Geometry' section.\n" +
                        " \nMathModel geometries are viewed/edited from a MathModel document by pressing the 'Geometry Viewer' button.");

    }

    /**
     * Return the HelpMenu property value.
     *
     * @return javax.swing.JMenu
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JMenu getHelpMenu() {
        if (this.ivjHelpMenu == null) {
            try {
                this.ivjHelpMenu = new javax.swing.JMenu();
                this.ivjHelpMenu.setName("HelpMenu");
                this.ivjHelpMenu.setText("Help");
                this.ivjHelpMenu.add(this.getNewHelpMenuItem());
                this.ivjHelpMenu.add(this.getJMenuItemOnlineHelp());
                //ivjHelpMenu.add(getJMenuItemOnlineSupport());
                this.ivjHelpMenu.add(this.getJMenuItemDiscussionGroup());
                this.ivjHelpMenu.add(new JSeparator());
                this.ivjHelpMenu.add(this.getJMenuItemManagePermissions());
                this.ivjHelpMenu.add(this.getJMenuItemOnlinePublish());
                this.ivjHelpMenu.add(new JSeparator());
                this.ivjHelpMenu.add(this.getJMenuItemEmailSupport());
                this.ivjHelpMenu.add(this.getGrantPermissionsToVCellSupportMenuItem());
                this.ivjHelpMenu.add(this.getJMenuItemPreferences());
                this.ivjHelpMenu.add(this.getJSeparator6());
                this.ivjHelpMenu.add(this.getMntmLicenseInformation());
                this.ivjHelpMenu.add(this.getAbout_BoxMenuItem());
    			this.ivjHelpMenu.add(new JSeparator());
                this.ivjHelpMenu.add(this.getStatusbarMenuItem());
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjHelpMenu;
    }

    private javax.swing.JMenuItem getJMenuItemCompare() {
        if (this.ivjJMenuItemCompare == null) {
            try {
                this.ivjJMenuItemCompare = new javax.swing.JMenuItem();
                this.ivjJMenuItemCompare.setName("JMenuItemCompare");
                this.ivjJMenuItemCompare.setText("Compare with Saved");
                this.ivjJMenuItemCompare.setEnabled(false);
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjJMenuItemCompare;
    }

    private javax.swing.JMenuItem getJMenuItemExport() {
        if (this.ivjJMenuItemExport == null) {
            try {
                this.ivjJMenuItemExport = new javax.swing.JMenuItem();
                this.ivjJMenuItemExport.setName("JMenuItemExport");
                this.ivjJMenuItemExport.setText("Export...");
                this.ivjJMenuItemExport.setActionCommand(GuiConstants.ACTIONCMD_EXPORT);
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjJMenuItemExport;
    }

    private javax.swing.JMenuItem getJMenuItemFieldData() {
        if (this.ivjJMenuItemFieldData == null) {
            try {
                this.ivjJMenuItemFieldData = new javax.swing.JMenuItem();
                this.ivjJMenuItemFieldData.setName("JMenuItemFieldData");
                this.ivjJMenuItemFieldData.setText("Field Data...");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjJMenuItemFieldData;
    }


    private JMenuItem getJMenuItemImport() {
        if (this.menuItemImport == null) {
            try {
                this.menuItemImport = new JMenuItem();
                this.menuItemImport.setName("JMenuItemImport");
                this.menuItemImport.setText("Import...");
            } catch (Throwable throwable) {
                this.handleException(throwable);
            }
        }
        return this.menuItemImport;
    }

    private javax.swing.JMenuItem getJMenuItemNewBioModel() {
        if (this.ivjJMenuItemNewBioModel == null) {
            try {
                this.ivjJMenuItemNewBioModel = new javax.swing.JMenuItem();
                this.ivjJMenuItemNewBioModel.setName("JMenuItemNewBioModel");
                this.ivjJMenuItemNewBioModel.setText("BioModel");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjJMenuItemNewBioModel;
    }


    private javax.swing.JMenuItem getJMenuItemOnlineHelp() {
        if (this.ivjJMenuItemOnlineHelp == null) {
            try {
                this.ivjJMenuItemOnlineHelp = new javax.swing.JMenuItem();
                this.ivjJMenuItemOnlineHelp.setName("JMenuItemOnlineHelp");
                this.ivjJMenuItemOnlineHelp.setText("VCell Website");        // "Online Resources"
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjJMenuItemOnlineHelp;
    }

    private javax.swing.JMenuItem getJMenuItemOnlineSupport() {
        if (this.ivjJMenuItemOnlineSupport == null) {
            try {
                this.ivjJMenuItemOnlineSupport = new javax.swing.JMenuItem();
                this.ivjJMenuItemOnlineSupport.setName("JMenuItemOnlineSupport");
                this.ivjJMenuItemOnlineSupport.setText("VCell Support on the Web");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjJMenuItemOnlineSupport;
    }

    private javax.swing.JMenuItem getJMenuItemDiscussionGroup() {
        if (this.ivjJMenuItemDiscussionGroup == null) {
            try {
                this.ivjJMenuItemDiscussionGroup = new javax.swing.JMenuItem();
                this.ivjJMenuItemDiscussionGroup.setName("JMenuItemDiscussionGroup");
                this.ivjJMenuItemDiscussionGroup.setText("VCell Open Discussion Forum");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjJMenuItemDiscussionGroup;
    }

    private javax.swing.JMenuItem getJMenuItemManagePermissions() {
        if (this.ivjJMenuItemManagePermissions == null) {
            try {
                this.ivjJMenuItemManagePermissions = new javax.swing.JMenuItem();
                this.ivjJMenuItemManagePermissions.setName("JMenuItemManagePermissions");
                this.ivjJMenuItemManagePermissions.setText("How to Change Permissions");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjJMenuItemManagePermissions;
    }

    private javax.swing.JMenuItem getJMenuItemOnlinePublish() {
        if (this.ivjJMenuItemOnlinePublish == null) {
            try {
                this.ivjJMenuItemOnlinePublish = new javax.swing.JMenuItem();
                this.ivjJMenuItemOnlinePublish.setName("JMenuItemOnlinePublish");
                this.ivjJMenuItemOnlinePublish.setText("How to Publish a Model ");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjJMenuItemOnlinePublish;
    }

    private javax.swing.JMenuItem getJMenuItemEmailSupport() {
        if (this.ivjJMenuItemEmailSupport == null) {
            try {
                this.ivjJMenuItemEmailSupport = new javax.swing.JMenuItem();
                this.ivjJMenuItemEmailSupport.setName("JMenuItemEmailSupport");
                this.ivjJMenuItemEmailSupport.setText("Contact VCell Support");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjJMenuItemEmailSupport;
    }

    private javax.swing.JMenuItem getNewHelpMenuItem() {
        if (this.newHelpMenuItem == null) {
            try {
                this.newHelpMenuItem = new javax.swing.JMenuItem();
                this.newHelpMenuItem.setName("newHelpMenuItem");
                this.newHelpMenuItem.setText("VCell Help");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.newHelpMenuItem;
    }

    private javax.swing.JMenuItem getJMenuItemOpenBioModel() {
        if (this.ivjJMenuItemOpenBioModel == null) {
            try {
                this.ivjJMenuItemOpenBioModel = new javax.swing.JMenuItem();
                this.ivjJMenuItemOpenBioModel.setName("JMenuItemOpenBioModel");
                this.ivjJMenuItemOpenBioModel.setText("BioModel...");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjJMenuItemOpenBioModel;
    }

    private javax.swing.JMenuItem getJMenuItemOpenLocal() {
        if (this.ivjJMenuItemOpenLocal == null) {
            try {
                this.ivjJMenuItemOpenLocal = new javax.swing.JMenuItem();
                this.ivjJMenuItemOpenLocal.setName("JMenuItemOpenLocal");
                this.ivjJMenuItemOpenLocal.setText("Local...");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjJMenuItemOpenLocal;
    }

    private javax.swing.JMenuItem getJMenuItemOpenMathModel() {
        if (this.ivjJMenuItemOpenMathModel == null) {
            try {
                this.ivjJMenuItemOpenMathModel = new javax.swing.JMenuItem();
                this.ivjJMenuItemOpenMathModel.setName("JMenuItemOpenMathModel");
                this.ivjJMenuItemOpenMathModel.setText("MathModel...");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjJMenuItemOpenMathModel;
    }

    private javax.swing.JMenuItem getJMenuItemRevert() {
        if (this.ivjJMenuItemRevert == null) {
            try {
                this.ivjJMenuItemRevert = new javax.swing.JMenuItem();
                this.ivjJMenuItemRevert.setName("JMenuItemRevert");
                this.ivjJMenuItemRevert.setText("Revert to Saved");
                this.ivjJMenuItemRevert.setEnabled(false);
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjJMenuItemRevert;
    }

    private javax.swing.JProgressBar getJProgressBarConnection() {
        if (this.ivjJProgressBarConnection == null) {
            try {
                this.ivjJProgressBarConnection = new javax.swing.JProgressBar();
                this.ivjJProgressBarConnection.setName("JProgressBarConnection");
                this.ivjJProgressBarConnection.setString("NOT CONNECTED");
                this.ivjJProgressBarConnection.setStringPainted(true);
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjJProgressBarConnection;
    }

    private javax.swing.JProgressBar getJProgressBarMemory() {
        if (this.ivjJProgressBarMemory == null) {
            try {
                this.ivjJProgressBarMemory = new javax.swing.JProgressBar();
                this.ivjJProgressBarMemory.setName("JProgressBarMemory");
                this.ivjJProgressBarMemory.setMinimum(0);
                this.ivjJProgressBarMemory.setStringPainted(true);
                this.ivjJProgressBarMemory.setToolTipText("Java Memory Usage");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjJProgressBarMemory;
    }

    private javax.swing.JSeparator getJSeparator6() {
        if (this.ivjJSeparator6 == null) {
            try {
                this.ivjJSeparator6 = new javax.swing.JSeparator();
                this.ivjJSeparator6.setName("JSeparator6");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjJSeparator6;
    }

    private javax.swing.JMenuItem getMathFromBioMenuItem() {
        if (this.ivjMathFromBioMenuItem == null) {
            try {
                this.ivjMathFromBioMenuItem = new javax.swing.JMenuItem();
                this.ivjMathFromBioMenuItem.setName("MathFromBioMenuItem");
                this.ivjMathFromBioMenuItem.setText("From BioModel");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjMathFromBioMenuItem;
    }

    private javax.swing.JMenu getMathMenu() {
        if (this.ivjMathMenu == null) {
            try {
                this.ivjMathMenu = new javax.swing.JMenu();
                this.ivjMathMenu.setName("MathMenu");
                this.ivjMathMenu.setText("MathModel");
                this.ivjMathMenu.add(this.getNonSpatialMenuItem());
                this.ivjMathMenu.add(this.getSpatialExistingMenuItem());
                this.ivjMathMenu.add(this.getSpatialCreateNewMenuItem());
                this.ivjMathMenu.add(this.getMathFromBioMenuItem());
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjMathMenu;
    }

    private javax.swing.JMenu getNewMenuItem() {
        if (this.ivjNewMenuItem == null) {
            try {
                this.ivjNewMenuItem = new javax.swing.JMenu();
                this.ivjNewMenuItem.setName("NewMenuItem");
                this.ivjNewMenuItem.setText("New");
                this.ivjNewMenuItem.add(this.getJMenuItemNewBioModel());
                this.ivjNewMenuItem.add(this.getMathMenu());
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjNewMenuItem;
    }

    private javax.swing.JMenuItem getNonSpatialMenuItem() {
        if (this.ivjNonSpatialMenuItem == null) {
            try {
                this.ivjNonSpatialMenuItem = new javax.swing.JMenuItem();
                this.ivjNonSpatialMenuItem.setName("NonSpatialMenuItem");
                this.ivjNonSpatialMenuItem.setText("Non-Spatial");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjNonSpatialMenuItem;
    }

    private javax.swing.JMenu getOpenMenuItem() {
        if (this.ivjOpenMenuItem == null) {
            try {
                this.ivjOpenMenuItem = new javax.swing.JMenu();
                this.ivjOpenMenuItem.setName("OpenMenuItem");
                this.ivjOpenMenuItem.setText("Open");
                this.ivjOpenMenuItem.setEnabled(false);
                this.ivjOpenMenuItem.add(this.getJMenuItemOpenBioModel());
                this.ivjOpenMenuItem.add(this.getJMenuItemOpenMathModel());
                this.ivjOpenMenuItem.add(this.getJMenuItemOpenLocal());
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjOpenMenuItem;
    }


    private JMenuItem getRunVFrapItem() {
        if (this.ivjRunVFrapMenuItem == null) {
            try {
                this.ivjRunVFrapMenuItem = new JMenuItem();
                this.ivjRunVFrapMenuItem.setName("RunVFrapMenuItem");
                this.ivjRunVFrapMenuItem.setText("Launch Virtual FRAP");
            } catch (Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjRunVFrapMenuItem;
    }

    private javax.swing.JMenuItem getSave_AsMenuItem() {
        if (this.ivjSave_AsMenuItem == null) {
            try {
                this.ivjSave_AsMenuItem = new javax.swing.JMenuItem();
                this.ivjSave_AsMenuItem.setName("Save_AsMenuItem");
                this.ivjSave_AsMenuItem.setText("Save As...");
                this.ivjSave_AsMenuItem.setEnabled(true);
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjSave_AsMenuItem;
    }

    private javax.swing.JMenuItem getSave_AsLocalMenuItem() {
        if (this.ivjSave_AsLocalMenuItem == null) {
            try {
                this.ivjSave_AsLocalMenuItem = new javax.swing.JMenuItem();
                this.ivjSave_AsLocalMenuItem.setName("Save_AsLocalMenuItem");
                this.ivjSave_AsLocalMenuItem.setText("Save As Local...");
                this.ivjSave_AsLocalMenuItem.setEnabled(true);
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjSave_AsLocalMenuItem;
    }

    private javax.swing.JMenuItem getSave_VersionMenuItem() {
        if (this.ivjSave_VersionMenuItem == null) {
            try {
                this.ivjSave_VersionMenuItem = new javax.swing.JMenuItem();
                this.ivjSave_VersionMenuItem.setName("Save_VersionMenuItem");
                this.ivjSave_VersionMenuItem.setText("Save New Version");
                this.ivjSave_VersionMenuItem.setEnabled(false);
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjSave_VersionMenuItem;
    }

    /**
     * Return the SaveMenuItem property value.
     *
     * @return javax.swing.JMenuItem
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JMenuItem getSaveMenuItem() {
        if (this.ivjSaveMenuItem == null) {
            try {
                this.ivjSaveMenuItem = new javax.swing.JMenuItem();
                this.ivjSaveMenuItem.setName("SaveMenuItem");
                this.ivjSaveMenuItem.setText("Save");
                this.ivjSaveMenuItem.setEnabled(false);
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjSaveMenuItem;
    }

    private javax.swing.JMenuItem getPermissionsMenuItem() {
        if (this.jMenuItemPermissions == null) {
            try {
                this.jMenuItemPermissions = new javax.swing.JMenuItem();
                this.jMenuItemPermissions.setText("Permissions...");
                this.jMenuItemPermissions.setEnabled(false);
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.jMenuItemPermissions;
    }

    private javax.swing.JMenuItem getGrantPermissionsToVCellSupportMenuItem() {
        if (this.jMenuItemGrantPermissionsToVCellSupport == null) {
            try {
                this.jMenuItemGrantPermissionsToVCellSupport = new javax.swing.JMenuItem();
                this.jMenuItemGrantPermissionsToVCellSupport.setText("Grant Permissions To VCell Support...");
                this.jMenuItemGrantPermissionsToVCellSupport.setEnabled(false);
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.jMenuItemGrantPermissionsToVCellSupport;
    }

    private javax.swing.JMenu getServerMenu() {
        if (this.ivjServerMenu == null) {
            try {
                this.ivjServerMenu = new javax.swing.JMenu();
                this.ivjServerMenu.setName("ServerMenu");
                this.ivjServerMenu.setText("Account");
                this.ivjServerMenu.add(this.getLoginItem());
                this.ivjServerMenu.add(this.getLoginAsGuestItem());
                this.ivjServerMenu.add(this.getLogOutMenuItem());
                this.ivjServerMenu.add(this.getManageUserMenuItem());
                this.ivjServerMenu.add(this.getChange_ProxyMenuItem());
                this.ivjServerMenu.add(this.getReconnectUserMenuItem());
                this.ivjServerMenu.add(new JSeparator());
                this.ivjServerMenu.add(this.getViewJobsMenuItem());
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjServerMenu;
    }

    /**
     * Return the SpatialMenuItem property value.
     *
     * @return javax.swing.JMenuItem
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private static final String MATHMODEL_SPATIAL_EXISTING = "Spatial from database geometry";

    private javax.swing.JMenuItem getSpatialExistingMenuItem() {
        if (this.ivjSpatialExistingMenuItem == null) {
            try {
                this.ivjSpatialExistingMenuItem = new javax.swing.JMenuItem();
                this.ivjSpatialExistingMenuItem.setName("SpatialMenuItem");
                this.ivjSpatialExistingMenuItem.setText(MATHMODEL_SPATIAL_EXISTING);
                // user code begin {1}
                // user code end
            } catch (java.lang.Throwable ivjExc) {
                // user code begin {2}
                // user code end
                this.handleException(ivjExc);
            }
        }
        return this.ivjSpatialExistingMenuItem;
    }

    private static final String MATHMODEL_SPATIAL_CREATENEW = "Spatial from new geometry";
    private JMenuItem mntmLicenseInformation;
    private JSeparator separator;

    private javax.swing.JMenuItem getSpatialCreateNewMenuItem() {
        if (this.ivjSpatialCreateNewMenuItem == null) {
            try {
                this.ivjSpatialCreateNewMenuItem = new javax.swing.JMenuItem();
                this.ivjSpatialCreateNewMenuItem.setName("SpatialMenuItem");
                this.ivjSpatialCreateNewMenuItem.setText(MATHMODEL_SPATIAL_CREATENEW);
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjSpatialCreateNewMenuItem;
    }

    /**
     * Return the StatusbarMenuItem property value.
     *
     * @return javax.swing.JCheckBoxMenuItem
     */
    private javax.swing.JCheckBoxMenuItem getStatusbarMenuItem() {
        if (this.ivjStatusbarMenuItem == null) {
            try {
                this.ivjStatusbarMenuItem = new javax.swing.JCheckBoxMenuItem();
                this.ivjStatusbarMenuItem.setName("StatusbarMenuItem");
                this.ivjStatusbarMenuItem.setSelected(true);
                this.ivjStatusbarMenuItem.setText("Status Bar");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjStatusbarMenuItem;
    }

    /**
     * Return the StatusBarPane property value.
     *
     * @return javax.swing.JPanel
     */
    private javax.swing.JPanel getStatusBarPane() {
        if (this.ivjStatusBarPane == null) {
            try {
                this.ivjStatusBarPane = new javax.swing.JPanel();
                this.ivjStatusBarPane.setName("StatusBarPane");
                this.ivjStatusBarPane.setLayout(new GridBagLayout());

                int gridx = 0;
                GridBagConstraints gbc = new GridBagConstraints();
                gbc.gridx = gridx;
                gbc.gridy = 0;
                gbc.weighty = 1;
                gbc.fill = GridBagConstraints.VERTICAL;
                gbc.insets = new Insets(4, 4, 4, 4);
                this.ivjStatusBarPane.add(this.getJProgressBarConnection(), gbc);

                gridx++;
                gbc = new GridBagConstraints();
                gbc.gridx = gridx;
                gbc.gridy = 0;
                gbc.insets = new Insets(2, 5, 2, 2);
                this.ivjStatusBarPane.add(this.getIconBar(), gbc);

                gridx++;
                gbc = new GridBagConstraints();
                gbc.gridx = gridx;
                gbc.gridy = 0;
                gbc.weightx = 1;
                gbc.fill = GridBagConstraints.HORIZONTAL;
                gbc.insets = new Insets(4, 4, 4, 4);
                this.ivjStatusBarPane.add(this.getWarningBar(), gbc);

                gridx++;
                gbc = new GridBagConstraints();
                gbc.gridx = gridx;
                gbc.gridy = 0;
                gbc.weighty = 1;
                gbc.fill = GridBagConstraints.VERTICAL;
                gbc.insets = new Insets(4, 4, 4, 4);
                this.ivjStatusBarPane.add(this.getJProgressBarMemory(), gbc);

            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.ivjStatusBarPane;
    }

    public JLabel getWarningBar() {
        if (this.warningText == null) {
            try {
                this.warningText = new JLabel();
                this.warningText.setName("");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.warningText;
    }

    public JLabel getIconBar() {
        if (this.iconText == null) {
            try {
                this.iconText = new JLabel();
                this.iconText.setName("");
                this.iconText.setIcon(VCellIcons.noteRedIcon);
                this.iconText.setToolTipText("View VCell Administrator Notification");
            } catch (java.lang.Throwable ivjExc) {
                this.handleException(ivjExc);
            }
        }
        return this.iconText;
    }

    //private static final String notificationsUrl = "//cfs05.cam.uchc.edu/vcell/apache_webroot/htdocs/webstart/VCell_alert/VCell_Alert.html";
    private void checkForNotifications() {
        int code = HttpURLConnection.HTTP_BAD_REQUEST;
        try {
            URL u = new URL(notificationsUrl);
            HttpURLConnection huc = (HttpURLConnection) u.openConnection();
            huc.setRequestMethod("HEAD");  // probably cheaper than  huc.setRequestMethod ("GET");
            huc.connect();
            code = huc.getResponseCode();
        } catch (IOException e) {
            // we just eat the exception
//		e.printStackTrace();
            code = HttpURLConnection.HTTP_INTERNAL_ERROR;
        }
        if (code != HttpURLConnection.HTTP_OK) {
            this.getIconBar().setEnabled(false);
            this.getIconBar().setVisible(false);
        } else {
            this.getIconBar().setEnabled(true);
            this.getIconBar().setVisible(true);

            Timer blinkTimer = new Timer(500, new ActionListener() {
                private int count = 0;
                private final int maxCount = 110;                                // 55 seconds

                public void actionPerformed(ActionEvent e) {
                    if (this.count >= this.maxCount) {
                        DocumentWindow.this.getIconBar().setIcon(VCellIcons.noteRedIcon);    // must remain on the noteRedIcon
                        ((Timer) e.getSource()).stop();
                    } else {
                        if (this.count % 2 == 0) {
                            DocumentWindow.this.getIconBar().setIcon(VCellIcons.noteRedIcon);
                        } else {
                            DocumentWindow.this.getIconBar().setIcon(VCellIcons.noteWhiteIcon);
                        }
                        this.count++;
                    }
                }
            });
            blinkTimer.start();
        }
    }

    private javax.swing.JMenuItem getTestingFrameworkMenuItem() {
        if (this.ivjTestingFrameworkMenuItem == null) {
            try {
                this.ivjTestingFrameworkMenuItem = new javax.swing.JMenuItem();
                this.ivjTestingFrameworkMenuItem.setName("TestingFrameworkMenuItem");
                this.ivjTestingFrameworkMenuItem.setText("Testing Framework ...");
                // user code begin {1}
                // user code end
            } catch (java.lang.Throwable ivjExc) {
                // user code begin {2}
                // user code end
                this.handleException(ivjExc);
            }
        }
        return this.ivjTestingFrameworkMenuItem;
    }


    /**
     * Insert the method's description here.
     * Creation date: (5/24/2004 3:38:47 PM)
     *
     * @return cbit.vcell.client.desktop.TopLevelWindowManager
     */
    public TopLevelWindowManager getTopLevelWindowManager() {
        return this.getWindowManager();
    }

    /**
     * Gets the windowManager property (cbit.vcell.client.desktop.DocumentWindowManager) value.
     *
     * @return The windowManager property value.
     * @see #setWindowManager
     */
    private DocumentWindowManager getWindowManager() {
        return this.fieldWindowManager;
    }

    /**
     * Called whenever the part throws an exception.
     *
     * @param exception java.lang.Throwable
     */
    private void handleException(java.lang.Throwable exception) {

        /* Uncomment the following lines to print uncaught exceptions to stdout */
        System.out.println("--------- UNCAUGHT EXCEPTION ---------");
        exception.printStackTrace(System.out);
    }

    private void importExternalDocument() {
        this.getWindowManager().openDocument(VCDocumentType.EXTERNALFILE_DOC);
    }

    private void importPathway(PathwayImportOption pathwayImportOption) {
        this.getWindowManager().importPathway(pathwayImportOption);
    }


    /**
     * Initializes connections
     *
     * @throws java.lang.Exception The exception description.
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private void initConnections() throws java.lang.Exception {
        // user code begin {1}
        // user code end
        this.getAbout_BoxMenuItem().addActionListener(this.ivjEventHandler);
        this.getStatusbarMenuItem().addItemListener(this.ivjEventHandler);
        this.getCloseMenuItem().addActionListener(this.ivjEventHandler);
        this.getExitMenuItem().addActionListener(this.ivjEventHandler);
        this.getJMenuItemNewBioModel().addActionListener(this.ivjEventHandler);
        this.getJMenuItemOpenBioModel().addActionListener(this.ivjEventHandler);
        this.getJMenuItemOpenMathModel().addActionListener(this.ivjEventHandler);
        this.getJMenuItemOpenLocal().addActionListener(this.ivjEventHandler);
        this.getSaveMenuItem().addActionListener(this.ivjEventHandler);
        this.getSave_AsMenuItem().addActionListener(this.ivjEventHandler);
        this.getSave_AsLocalMenuItem().addActionListener(this.ivjEventHandler);
        this.getJMenuItemImport().addActionListener(this.ivjEventHandler);
        this.getSave_VersionMenuItem().addActionListener(this.ivjEventHandler);
        this.getManageUserMenuItem().addActionListener(this.ivjEventHandler);
        this.getChange_ProxyMenuItem().addActionListener(this.ivjEventHandler);
        this.getLogOutMenuItem().addActionListener(this.ivjEventHandler);
        this.getReconnectUserMenuItem().addActionListener(this.ivjEventHandler);
        this.getLoginItem().addActionListener(this.ivjEventHandler);
        this.getLoginAsGuestItem().addActionListener(this.ivjEventHandler);
//	getImageJServiceMenuItem().addActionListener(ivjEventHandler);
        this.getJMenuItemRevert().addActionListener(this.ivjEventHandler);
        this.getJMenuItemCompare().addActionListener(this.ivjEventHandler);
        this.getNonSpatialMenuItem().addActionListener(this.ivjEventHandler);
        this.getMathFromBioMenuItem().addActionListener(this.ivjEventHandler);
        this.getSpatialExistingMenuItem().addActionListener(this.ivjEventHandler);
        this.getSpatialCreateNewMenuItem().addActionListener(this.ivjEventHandler);
        this.getJMenuItemExport().addActionListener(this.ivjEventHandler);
//	getEdit_Annotation_JMenuItem().addActionListener(ivjEventHandler);
        this.getTestingFrameworkMenuItem().addActionListener(this.ivjEventHandler);
        this.getJMenuItemOnlineHelp().addActionListener(this.ivjEventHandler);
        this.getJMenuItemOnlineSupport().addActionListener(this.ivjEventHandler);
        this.getJMenuItemDiscussionGroup().addActionListener(this.ivjEventHandler);
        this.getJMenuItemManagePermissions().addActionListener(this.ivjEventHandler);
        this.getJMenuItemOnlinePublish().addActionListener(this.ivjEventHandler);
        this.getGrantPermissionsToVCellSupportMenuItem().addActionListener(this.ivjEventHandler);

        this.getJMenuItemEmailSupport().addActionListener(this.ivjEventHandler);
        this.getNewHelpMenuItem().addActionListener(this.ivjEventHandler);
//	getRunBNGMenuItem().addActionListener(ivjEventHandler);
        this.getRunVFrapItem().addActionListener(this.ivjEventHandler);
        this.getViewJobsMenuItem().addActionListener(this.ivjEventHandler);
        this.getJMenuItemFieldData().addActionListener(this.ivjEventHandler);
        this.getPermissionsMenuItem().addActionListener(this.ivjEventHandler);

        this.getIconBar().addMouseListener(this.ivjEventHandler);
        this.getExportedDataViewer().addActionListener(this.ivjEventHandler);
    }

    /**
     * Initialize the class.
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private void initialize() {
        try {
            this.setName("DocumentWindow");
            this.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
            this.setIconImage(VCellIcons.getJFrameImageIcon());
            this.setJMenuBar(this.getDocumentWindowJMenuBar());
            this.setSize(460, 536);
            this.setTitle("DocumentWindow");
            this.getContentPane().add(this.getStatusBarPane(), BorderLayout.SOUTH);
            this.initConnections();
            this.checkForNotifications();
        } catch (java.lang.Throwable ivjExc) {
            this.handleException(ivjExc);
        }
        // user code begin {2}
        // user code end
    }


    private void invokeOnlineHelp() {

        PopupGenerator.browserLauncher(this, DynamicClientProperties.getDynamicClientProperties().getProperty(PropertyLoader.VCELL_URL),
                "Please visit " + DynamicClientProperties.getDynamicClientProperties().getProperty(PropertyLoader.VCELL_URL) + " for Online Help");
    }

    private void invokeOnlineSupport() {

        PopupGenerator.browserLauncher(this, DynamicClientProperties.getDynamicClientProperties().getProperty(PropertyLoader.VC_SUPPORT_URL),
                "Please visit " + DynamicClientProperties.getDynamicClientProperties().getProperty(PropertyLoader.VC_SUPPORT_URL) + " for Online Support");
    }

    private void invokeDiscussionGroup() {

        PopupGenerator.browserLauncher(this, DynamicClientProperties.getDynamicClientProperties().getProperty(PropertyLoader.VC_GOOGLE_DISCUSS_URL),
                "Please visit " + DynamicClientProperties.getDynamicClientProperties().getProperty(PropertyLoader.VC_GOOGLE_DISCUSS_URL) + " for Discussion Group");
    }

    private void invokeManagePermissions() {

        PopupGenerator.browserLauncher(this, DynamicClientProperties.getDynamicClientProperties().getProperty(PropertyLoader.VC_TUT_PERMISSION_URL),
                "Please visit " + DynamicClientProperties.getDynamicClientProperties().getProperty(PropertyLoader.VC_TUT_PERMISSION_URL) + " for instructions on how to change permissions to your Model");
    }

    private void invokeOnlinePublish() {

        PopupGenerator.browserLauncher(this, DynamicClientProperties.getDynamicClientProperties().getProperty(PropertyLoader.ACKNOWLEGE_PUB__WEB_URL),
                "Please visit " + DynamicClientProperties.getDynamicClientProperties().getProperty(PropertyLoader.ACKNOWLEGE_PUB__WEB_URL) + " for instructions on how to Publish your Model");
    }


    private void newDocument(java.awt.event.ActionEvent actionEvent) {
        AsynchClientTask[] taskArray = null;
        if (actionEvent.getActionCommand().equals("BioModel")) {
            taskArray = this.getWindowManager().newDocument(new VCDocument.DocumentCreationInfo(VCDocumentType.BIOMODEL_DOC, VCDocument.BIO_OPTION_DEFAULT));
        } else if (actionEvent.getActionCommand().equals("Non-Spatial")) {
            taskArray = this.getWindowManager().newDocument(new VCDocument.DocumentCreationInfo(VCDocumentType.MATHMODEL_DOC, VCDocument.MATH_OPTION_NONSPATIAL));
        } else if (actionEvent.getActionCommand().equals(MATHMODEL_SPATIAL_EXISTING)) {
            taskArray = this.getWindowManager().newDocument(new VCDocument.DocumentCreationInfo(VCDocumentType.MATHMODEL_DOC, VCDocument.MATH_OPTION_SPATIAL_EXISTS));
        } else if (actionEvent.getActionCommand().equals(MATHMODEL_SPATIAL_CREATENEW)) {
            this.getWindowManager().newDocument(new VCDocument.DocumentCreationInfo(VCDocumentType.MATHMODEL_DOC, VCDocument.MATH_OPTION_SPATIAL_NEW));
            return;
        } else if (actionEvent.getActionCommand().equals("From BioModel")) {
            taskArray = this.getWindowManager().newDocument(new VCDocument.DocumentCreationInfo(VCDocumentType.MATHMODEL_DOC, VCDocument.MATH_OPTION_FROMBIOMODELAPP));
        } else {
            return;
        }
        Hashtable<String, Object> hash = new Hashtable<String, Object>();
        hash.put(ClientRequestManager.GUI_PARENT, this);
        hash.put("requestManager", this.getWindowManager().getRequestManager());
        ClientTaskDispatcher.dispatch(this, hash, taskArray, false);
    }

    private void openDocument(java.awt.event.ActionEvent actionEvent) {
        if (actionEvent.getActionCommand().equals("BioModel...")) {
            this.getWindowManager().openDocument(VCDocumentType.BIOMODEL_DOC);
        } else if (actionEvent.getActionCommand().equals("MathModel...")) {
            this.getWindowManager().openDocument(VCDocumentType.MATHMODEL_DOC);
        } else if (actionEvent.getActionCommand().equals("Geometry...")) {
            this.getWindowManager().openDocument(VCDocumentType.GEOMETRY_DOC);
        }
    }

    private void login(boolean asGuest) {
        Hashtable<String, Object> hash = new Hashtable();
        VCellConnectionFactory vcellConnectionFactory = VCellClientMain.injector.getInstance(VCellConnectionFactory.class);

        String host = VCellClientMain.injector.getInstance(Key.get(String.class, Names.named(DependencyConstants.VCELL_API_HOST)));
        String port;
        String pathPrefix;
        try {
            port = VCellClientMain.injector.getInstance(Key.get(String.class, Names.named(DependencyConstants.VCELL_API_PORT)));
        } catch (ConfigurationException e) {
            port = "443";
        }
        try {
            pathPrefix = VCellClientMain.injector.getInstance(Key.get(String.class, Names.named(DependencyConstants.VCELL_API_PATH_PREFIX_V0)));
        } catch (ConfigurationException e) {
            pathPrefix = "";
        }

        ClientLogin.LoginOptions loginType = asGuest ?
                ClientLogin.LoginOptions.GUEST_LOGIN : ClientLogin.LoginOptions.STANDARD_LOGIN;
        AsynchClientTask task1a = ClientLogin.popupLogin(loginType);
        AsynchClientTask task1b = ClientLogin.loginWithAuth0(vcellConnectionFactory.getAuth0ConnectionUtils());
        AsynchClientTask task2 = ClientLogin.connectToServer(vcellConnectionFactory.getAuth0ConnectionUtils(),
                ClientServerInfo.createRemoteServerInfo(host, Integer.parseInt(port), pathPrefix, null));

        AsynchClientTask[] taskArray = new AsynchClientTask[]{task1a, task1b, task2};
        ClientTaskDispatcher.dispatch(null, hash, taskArray);
    }


    private void reconnect() {
        this.getWindowManager().reconnect();
    }


    private void saveDocument(boolean replace) {
        this.getWindowManager().saveDocument(replace);
    }


    private void saveAsLocal() {
        this.getWindowManager().exportDocument(FileFilters.FILE_FILTER_VCML);
    }

    /**
     * Sets the windowManager property (cbit.vcell.client.desktop.DocumentWindowManager) value.
     *
     * @param windowManager The new value for the property.
     * @see #getWindowManager
     */
    public void setWindowManager(DocumentWindowManager windowManager) {
        if (this.fieldWindowManager == windowManager) {
            return;
        }
        DocumentWindowManager oldValue = this.fieldWindowManager;
        this.fieldWindowManager = windowManager;
        this.firePropertyChange("windowManager", oldValue, windowManager);//May 2009,found it doesn't fire to any where.

    }


    public void setWorkArea(Component c) {
        this.getContentPane().add(c, BorderLayout.CENTER);
    }


    public static void showAboutBox(Component parent) {
        String version = "";
        String build = "";
        try {
            version = "Version " + DocumentWindowAboutBox.getVERSION_NO();
            build = DocumentWindowAboutBox.getEDITION() + " edition, build no. " + DocumentWindowAboutBox.getBUILD_NO();
        } catch (Exception exc) {
            System.out.println("Failed to parse vcell.softwareVersion: " + exc.getMessage());
            exc.printStackTrace(System.out);
        }
        /* Create the AboutBox dialog */
        DocumentWindowAboutBox aDocumentWindowAboutBox = new DocumentWindowAboutBox(version, build);
        DialogUtils.showComponentCloseDialog(parent, aDocumentWindowAboutBox, "About VCell");
    }


    private void showEditAnnotationWindow() {

        try {
            if (this.getWindowManager() != null) {
                VCDocument vcDoc = this.getWindowManager().getVCDocument();
                if (vcDoc != null) {
                    try {
                        // initialize fields - different for biomodel and mathmodel, geometry
                        String oldAnnotation = null;
                        if (vcDoc instanceof BioModel) {
                            oldAnnotation = ((BioModel) vcDoc).getVCMetaData().getFreeTextAnnotation((BioModel) vcDoc);
                        } else {
                            oldAnnotation = vcDoc.getDescription();
                        }
                        // show the editor
                        String newAnnotation = DialogUtils.showAnnotationDialog(this, oldAnnotation);
                        if (org.vcell.util.BeanUtils.triggersPropertyChangeEvent(oldAnnotation, newAnnotation)) {
                            // if VCDocument is a Biomodel, set the vcMetadata, else edit VCDoc.description for now
                            if (vcDoc instanceof BioModel) {
                                // update free text annotation in VCMetaData
                                VCMetaData vcMetaData = ((BioModel) vcDoc).getVCMetaData();
                                vcMetaData.setFreeTextAnnotation((BioModel) vcDoc, newAnnotation);
                            } else {
                                // Update VCDocument annotation
                                vcDoc.setDescription(newAnnotation);
                            }
                        }
                    } catch (UtilCancelException e) {
                        //Do Nothing
                    }
                } else {
                    throw new Exception("No Document to Edit");
                }
            }
        } catch (Throwable exc) {
            exc.printStackTrace(System.out);
            PopupGenerator.showErrorDialog(this, "Failed to edit annotation!\n" + exc.getMessage(), exc);
        }
    }


    private void showTestingFrameworkWindow() {
        this.getWindowManager().showTestingFrameworkWindow();
    }


    private void enableOpenMenuItems(boolean bEnableServerOps) {
        this.getOpenMenuItem().setEnabled(true);
        this.getJMenuItemOpenBioModel().setEnabled(bEnableServerOps);
        this.getJMenuItemOpenMathModel().setEnabled(bEnableServerOps);
        this.getJMenuItemOpenLocal().setEnabled(true);
    }

    /**
     * Insert the method's description here.
     * Creation date: (5/10/2004 4:32:17 PM)
     */
    public void updateConnectionStatus(ConnectionStatus connStatus) {

        // other updates
        String status = "";
        User user = this.getWindowManager().getUser();
        boolean isTestUser = user != null && (user.isTestAccount());
        switch (connStatus.getStatus()) {
            case ConnectionStatus.NOT_CONNECTED: {
                status = "";
                this.getJProgressBarConnection().setString("NOT CONNECTED");
                this.getJProgressBarConnection().setValue(0);
                this.getManageUserMenuItem().setEnabled(false);
                this.getLoginItem().setEnabled(true);
                this.getLoginAsGuestItem().setEnabled(true);
                this.getLogOutMenuItem().setEnabled(false);
                this.getReconnectUserMenuItem().setEnabled(false);
                this.getViewJobsMenuItem().setEnabled(false);

                this.enableOpenMenuItems(false);

                this.getSaveMenuItem().setEnabled(false);
                this.getSave_AsMenuItem().setEnabled(false);
                this.getSave_AsLocalMenuItem().setEnabled(true);
                this.getSave_VersionMenuItem().setEnabled(false);
                this.getJMenuItemRevert().setEnabled(false);
                this.getJMenuItemCompare().setEnabled(false);
                //getJMenuItemServer().setEnabled(true);
                this.getTestingFrameworkMenuItem().setVisible(isTestUser);
                this.getTestingFrameworkMenuItem().setEnabled(false);
                this.getJMenuItemFieldData().setEnabled(false);
                this.getPermissionsMenuItem().setEnabled(false);
                this.getGrantPermissionsToVCellSupportMenuItem().setEnabled(false);
                this.checkForReconnecting(connStatus);
                break;
            }
            case ConnectionStatus.CONNECTED: {
                status = "Server: " + connStatus.getApihost() + ":" + connStatus.getApiport() + " User: " + connStatus.getUserName();
                this.getJProgressBarConnection().setString("CONNECTED (" + connStatus.getUserName() + ")");
                this.getJProgressBarConnection().setValue(100);
                this.getManageUserMenuItem().setEnabled(true);
                this.getLoginItem().setEnabled(false);
                this.getLoginAsGuestItem().setEnabled(false);
                this.getLogOutMenuItem().setEnabled(true);
                this.getReconnectUserMenuItem().setEnabled(true);
                this.getViewJobsMenuItem().setEnabled(true);

                this.enableOpenMenuItems(true);

                boolean bVersionedDocument = this.getWindowManager() != null && this.getWindowManager().getVCDocument() != null
                        && this.getWindowManager().getVCDocument().getVersion() != null;
                this.getSaveMenuItem().setEnabled(
                        bVersionedDocument && !(
                                this.getWindowManager().getVCDocument().getVersion().getFlag().compareEqual(VersionFlag.Archived) ||
                                        this.getWindowManager().getVCDocument().getVersion().getFlag().compareEqual(VersionFlag.Published)
                        )
                );
                this.getSave_AsMenuItem().setEnabled(true);
                this.getSave_AsLocalMenuItem().setEnabled(true);
                this.getSave_VersionMenuItem().setEnabled(bVersionedDocument);
                this.getJMenuItemRevert().setEnabled(bVersionedDocument);
                this.getJMenuItemCompare().setEnabled(bVersionedDocument);
                //getJMenuItemServer().setEnabled(true);
                this.getTestingFrameworkMenuItem().setVisible(isTestUser);
                this.getTestingFrameworkMenuItem().setEnabled(true);
                this.getJMenuItemFieldData().setEnabled(true);
//			getJMenuItemMIRIAM().setEnabled(true);
                this.getJMenuItemPreferences().setEnabled(true);
                this.getViewJobsMenuItem().setEnabled(true);
                //getJMenuImportPathway().setEnabled(getWindowManager().getVCDocument() instanceof BioModel);
                this.getPermissionsMenuItem().setEnabled(bVersionedDocument && this.getWindowManager().getVCDocument().getVersion().getOwner().equals(this.getWindowManager().getUser()));
                this.getGrantPermissionsToVCellSupportMenuItem().setEnabled(bVersionedDocument && this.getWindowManager().getVCDocument().getVersion().getOwner().equals(this.getWindowManager().getUser()));
                break;
            }
            case ConnectionStatus.INITIALIZING: {
                status = "Server: " + connStatus.getApihost() + ":" + connStatus.getApiport() + " User: " + connStatus.getUserName();
                this.getJProgressBarConnection().setString("INITIALIZING...");
                this.getJProgressBarConnection().setValue(0);
                this.getManageUserMenuItem().setEnabled(false);
                this.getLoginItem().setEnabled(false);
                this.getLoginAsGuestItem().setEnabled(false);
                this.getLogOutMenuItem().setEnabled(false);
                this.getReconnectUserMenuItem().setEnabled(false);
                this.enableOpenMenuItems(false);
                this.getSave_AsLocalMenuItem().setEnabled(true);
                this.getSaveMenuItem().setEnabled(false);
                this.getSave_AsMenuItem().setEnabled(false);
                this.getSave_AsLocalMenuItem().setEnabled(true);
                this.getSave_VersionMenuItem().setEnabled(false);
                this.getJMenuItemRevert().setEnabled(false);
                this.getJMenuItemCompare().setEnabled(false);
                //getJMenuItemServer().setEnabled(false);
                this.getTestingFrameworkMenuItem().setVisible(isTestUser);
                this.getTestingFrameworkMenuItem().setEnabled(isTestUser);
                this.getJMenuItemFieldData().setEnabled(false);
//			getJMenuItemMIRIAM().setEnabled(false);
                this.getJMenuItemPreferences().setEnabled(false);
                this.getPermissionsMenuItem().setEnabled(false);
                this.getGrantPermissionsToVCellSupportMenuItem().setEnabled(false);
                break;
            }
            case ConnectionStatus.DISCONNECTED: {
                status = "Server: " + connStatus.getApihost() + ":" + connStatus.getApiport() + " User: " + connStatus.getUserName();
                this.getJProgressBarConnection().setString("DISCONNECTED");
                this.getJProgressBarConnection().setValue(0);
                this.getManageUserMenuItem().setEnabled(false);
                this.getLoginItem().setEnabled(false);
                this.getLoginAsGuestItem().setEnabled(false);
                this.getLogOutMenuItem().setEnabled(false);
                this.getReconnectUserMenuItem().setEnabled(true);
                this.enableOpenMenuItems(false);
                this.getSave_AsLocalMenuItem().setEnabled(true);
                this.getSaveMenuItem().setEnabled(false);
                this.getSave_AsMenuItem().setEnabled(false);
                this.getSave_VersionMenuItem().setEnabled(false);
                this.getJMenuItemRevert().setEnabled(false);
                this.getJMenuItemCompare().setEnabled(false);
                //getJMenuItemServer().setEnabled(true);
                this.getTestingFrameworkMenuItem().setVisible(isTestUser);
                this.getTestingFrameworkMenuItem().setEnabled(false);
                this.getJMenuItemFieldData().setEnabled(false);
//			getJMenuItemMIRIAM().setEnabled(false);
                this.getJMenuItemPreferences().setEnabled(false);
                this.getPermissionsMenuItem().setEnabled(false);
                this.getGrantPermissionsToVCellSupportMenuItem().setEnabled(false);
                this.checkForReconnecting(connStatus);
                break;
            }
        }
        this.getJProgressBarConnection().setToolTipText(status);
    }

    private void checkForReconnecting(ConnectionStatus connStatus) {
        Reconnector rc = connStatus.getReconnector();
        if (rc.isActive()) {
            rc.addListener(this);
        }
    }

    @Override
    public void refactorCountdown(long seconds) {
        if (seconds > 0) {
            this.getJProgressBarConnection().setString("RECONNECT in " + seconds-- + " s");
        }
    }

    /**
     * Insert the method's description here.
     * Creation date: (5/7/2004 11:51:20 AM)
     */
    public void updateMemoryStatus(long freeBytes, long totalBytes) {
        DecimalFormat df = (DecimalFormat) DecimalFormat.getInstance();
        df.setMaximumFractionDigits(1);
        String usedMB = df.format((totalBytes - freeBytes) / 1000000.0);
        String totalMB = df.format(totalBytes / 1000000.0);
        this.getJProgressBarMemory().setValue((int) (100 * (totalBytes - freeBytes) / totalBytes));
        this.getJProgressBarMemory().setString(usedMB + "MB / " + totalMB + "MB");
    }


    /**
     * Insert the method's description here.
     * Creation date: (5/10/2004 4:32:17 PM)
     */
    public void updateWhileInitializing(int i) {
        // extra animation while initializing connection
        this.getJProgressBarConnection().setValue(i);
    }

    private JMenuItem getJMenuItemPreferences() {
        if (this.jMenuItemPreferences == null) {
            this.jMenuItemPreferences = new JMenuItem();
            this.jMenuItemPreferences.setText("VCell Properties ...");
            this.jMenuItemPreferences.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent e) {
                    DocumentWindow.this.getTopLevelWindowManager().showPreferencesWindow();
                }
            });
        }
        return this.jMenuItemPreferences;
    }

    public void showViewJobsDialog() {
        System.out.println("ViewJobs menu item pressed.");
        // https://vcellapi.cam.uchc.edu/simtask?submitLow=&submitHigh=&startRow=1&maxRows=100&serverId=&computeHost+value%3D=&simId=&jobId=&taskId=&hasData=all&queued=on&dispatched=on&running=on
        DocumentWindowManager dwm = this.getWindowManager();
        ViewJobsPanel panel = new ViewJobsPanel(dwm);
        panel.setPreferredSize(new Dimension(1000, 600));

        if (this.viewSpeciesDialog != null) {        // uncomment these 3 lines to allow only one instance of the dialog
            this.viewSpeciesDialog.dispose();
        }

        JOptionPane pane = new JOptionPane(panel, JOptionPane.PLAIN_MESSAGE, 0, null, new Object[]{"Close"});
        this.viewSpeciesDialog = pane.createDialog(this, "View Simulation Jobs Status");
        this.viewSpeciesDialog.setModal(false);
        this.viewSpeciesDialog.setResizable(true);
        this.viewSpeciesDialog.setVisible(true);

//	ClientRequestManager.idToNameConversion(getWindowManager().getVCDocument());

    }

    public void showViewExportedDataDialog() {
        DocumentWindowManager dwm = this.getWindowManager();
        ExportedDataViewer exportedDataViewer = new ExportedDataViewer();
        exportedDataViewer.setPreferredSize(new Dimension(1030, 590));

        if (this.viewSpeciesDialog != null) {        // uncomment these 3 lines to allow only one instance of the dialog
            this.viewSpeciesDialog.dispose();
        }

        JOptionPane pane = new JOptionPane(exportedDataViewer, JOptionPane.PLAIN_MESSAGE, 0, null, new Object[]{"Close"});
        this.viewSpeciesDialog = pane.createDialog(this, "View Exported Data");
        this.viewSpeciesDialog.setModal(false);
        this.viewSpeciesDialog.setResizable(true);
        this.viewSpeciesDialog.setVisible(true);
    }

    private JMenuItem getMntmLicenseInformation() {
        if (this.mntmLicenseInformation == null) {
            this.mntmLicenseInformation = new JMenuItem("VCell License Information");
            this.mntmLicenseInformation.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent arg0) {
                    Integer year = 2013;
                    try {
                        int tempYear = Integer.parseInt((new SimpleDateFormat("yyyy")).format(Calendar.getInstance().getTime()));
                        if (tempYear > year && tempYear < 2100) {//sanity check
                            year = tempYear;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    final String OK = "OK";
                    final String SAVE_LICENSE = "Save VCell license";
                    final String SAVE_THIRD_PARTY = "Save third party licenses";
                    String licenseStr =
                            "The Virtual Cell is free software distributed under the following MIT licensing terms:\n\n" +
                                    "Copyright (c) 1998-" + year + " University of Connecticut Health Center\n\n" +
                                    "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n" +
                                    "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n" +
                                    "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n";

                    if (OperatingSystemInfo.getInstance().isWindows()) {
                        licenseStr += "The Virtual Cell Windows Edition is licensed under the GNU General Public License Version 3\n\n";
                    }

                    String result = DialogUtils.showWarningDialog(DocumentWindow.this, "VCell Licensing Information", licenseStr, new String[]{OK, SAVE_THIRD_PARTY, SAVE_LICENSE,}, OK);
                    if (result != null && (result.equals(SAVE_THIRD_PARTY) || result.equals(SAVE_LICENSE))) {
                        JFileChooser saveLicenseJFC = new JFileChooser();
                        int returnVal = saveLicenseJFC.showSaveDialog(DocumentWindow.this);
                        if (returnVal == JFileChooser.APPROVE_OPTION) {
                            File outFile = saveLicenseJFC.getSelectedFile();
                            try {
                                if (result.equals(SAVE_THIRD_PARTY)) {
                                    ResourceUtil.writeResourceToFile("/" + System.getProperty(PropertyLoader.vcellThirdPartyLicense), outFile);
                                } else if (result.equals(SAVE_LICENSE)) {
                                    XmlUtil.writeXMLStringToFile(licenseStr, outFile.getAbsolutePath(), false);
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                                DialogUtils.showErrorDialog(DocumentWindow.this, "Error saving license info: " + e.getMessage());
                            }
                        }
                    }
                }
            });
        }
        return this.mntmLicenseInformation;
    }

    private JSeparator getSeparator() {
        if (this.separator == null) {
            this.separator = new JSeparator();
        }
        return this.separator;
    }

    public ChildWindowManager getChildWindowManager() {
        return this.childWindowManager;
    }
}
