/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.api;

import org.vcell.restclient.ApiException;
import org.vcell.restclient.model.Extent;
import org.vcell.restclient.model.ExternalDataIdentifier;
import org.vcell.restclient.model.FieldData;
import org.vcell.restclient.model.FieldDataReference;
import org.vcell.restclient.model.FieldDataSavedResults;
import org.vcell.restclient.model.FieldDataShape;
import java.io.File;
import org.vcell.restclient.model.ISize;
import org.vcell.restclient.model.Origin;
import org.vcell.restclient.model.SourceModel;
import org.vcell.restclient.model.VCellHTTPError;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for FieldDataResourceApi
 */
@Ignore
public class FieldDataResourceApiTest {

    private final FieldDataResourceApi api = new FieldDataResourceApi();

    
    /**
     * Create Field Data with granular detail in one request.The following files are accepted: .tif and .zip.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advancedCreateTest() throws ApiException {
        File _file = null;
        String fileName = null;
        Extent extent = null;
        ISize iSize = null;
        List<String> channelNames = null;
        List<Double> times = null;
        String annotation = null;
        Origin origin = null;
        FieldDataSavedResults response = 
        api.advancedCreate(_file, fileName, extent, iSize, channelNames, times, annotation, origin);
        
        // TODO: test validations
    }
    
    /**
     * Analyze uploaded image file (Tiff, Zip, and Non-GPL BioFormats) and return field data. Color mapped images not supported (the colors in those images will be interpreted as separate channels). Filenames must be lowercase alphanumeric, and can contain underscores.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeFileTest() throws ApiException {
        File _file = null;
        String fileName = null;
        FieldData response = 
        api.analyzeFile(_file, fileName);
        
        // TODO: test validations
    }
    
    /**
     * Copy all existing field data from a BioModel/MathModel that you have access to, but don&#39;t own.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyModelsFieldDataTest() throws ApiException {
        SourceModel sourceModel = null;
        Map<String, ExternalDataIdentifier> response = 
        api.copyModelsFieldData(sourceModel);
        
        // TODO: test validations
    }
    
    /**
     * Submit a .zip or .tif file that converts into field data, with all defaults derived from the file submitted.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFromFileTest() throws ApiException {
        File _file = null;
        String fieldDataName = null;
        FieldDataSavedResults response = 
        api.createFromFile(_file, fieldDataName);
        
        // TODO: test validations
    }
    
    /**
     * Create new field data from existing simulation results.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFromSimulationTest() throws ApiException {
        String simKeyReference = null;
        Integer jobIndex = null;
        String newFieldDataName = null;
        
        api.createFromSimulation(simKeyReference, jobIndex, newFieldDataName);
        
        // TODO: test validations
    }
    
    /**
     * Delete the selected field data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        String fieldDataID = null;
        
        api.delete(fieldDataID);
        
        // TODO: test validations
    }
    
    /**
     * Get all of the ids used to identify, and retrieve field data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllIDsTest() throws ApiException {
        List<FieldDataReference> response = 
        api.getAllIDs();
        
        // TODO: test validations
    }
    
    /**
     * Get the shape of the field data. That is it&#39;s size, origin, extent, times, and data identifiers.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeFromIDTest() throws ApiException {
        String fieldDataID = null;
        FieldDataShape response = 
        api.getShapeFromID(fieldDataID);
        
        // TODO: test validations
    }
    
    /**
     * Take the generated field data, and save it to the server. User may adjust the analyzed file before uploading to edit defaults.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveTest() throws ApiException {
        FieldData fieldData = null;
        FieldDataSavedResults response = 
        api.save(fieldData);
        
        // TODO: test validations
    }
    
}
