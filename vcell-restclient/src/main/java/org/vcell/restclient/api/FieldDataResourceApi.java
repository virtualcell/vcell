/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.vcell.restclient.api;

import org.vcell.restclient.ApiClient;
import org.vcell.restclient.ApiException;
import org.vcell.restclient.ApiResponse;
import org.vcell.restclient.Pair;

import org.vcell.restclient.model.AnalyzedFile;
import org.vcell.restclient.model.Extent;
import org.vcell.restclient.model.ExternalDataIdentifier;
import org.vcell.restclient.model.FieldDataReference;
import org.vcell.restclient.model.FieldDataSavedResults;
import org.vcell.restclient.model.FieldDataShape;
import java.io.File;
import org.vcell.restclient.model.ISize;
import org.vcell.restclient.model.Origin;
import org.vcell.restclient.model.SourceModel;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FieldDataResourceApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public FieldDataResourceApi() {
    this(new ApiClient());
  }

  public FieldDataResourceApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Analyze uploaded image file (Tiff, Zip, and Non-GPL BioFormats) and create default field data specification. Color mapped images not supported (the colors in those images will be interpreted as separate channels). Filenames must be lowercase alphanumeric, and can contain underscores.
   * 
   * @param _file  (optional)
   * @param fileName  (optional)
   * @return AnalyzedFile
   * @throws ApiException if fails to make API call
   */
  public AnalyzedFile analyzeFile(File _file, String fileName) throws ApiException {
    ApiResponse<AnalyzedFile> localVarResponse = analyzeFileWithHttpInfo(_file, fileName);
    return localVarResponse.getData();
  }

  /**
   * Analyze uploaded image file (Tiff, Zip, and Non-GPL BioFormats) and create default field data specification. Color mapped images not supported (the colors in those images will be interpreted as separate channels). Filenames must be lowercase alphanumeric, and can contain underscores.
   * 
   * @param _file  (optional)
   * @param fileName  (optional)
   * @return ApiResponse&lt;AnalyzedFile&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AnalyzedFile> analyzeFileWithHttpInfo(File _file, String fileName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = analyzeFileRequestBuilder(_file, fileName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("analyzeFile", localVarResponse);
        }
        return new ApiResponse<AnalyzedFile>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AnalyzedFile>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder analyzeFileRequestBuilder(File _file, String fileName) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/fieldData/analyzeFile";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    MultipartEntityBuilder multiPartBuilder = MultipartEntityBuilder.create();
    boolean hasFiles = false;
    multiPartBuilder.addBinaryBody("file", _file);
    hasFiles = true;
    multiPartBuilder.addTextBody("fileName", fileName.toString());
    HttpEntity entity = multiPartBuilder.build();
    HttpRequest.BodyPublisher formDataPublisher;
    if (hasFiles) {
        Pipe pipe;
        try {
            pipe = Pipe.open();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        new Thread(() -> {
            try (OutputStream outputStream = Channels.newOutputStream(pipe.sink())) {
                entity.writeTo(outputStream);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }).start();
        formDataPublisher = HttpRequest.BodyPublishers.ofInputStream(() -> Channels.newInputStream(pipe.source()));
    } else {
        ByteArrayOutputStream formOutputStream = new ByteArrayOutputStream();
        try {
            entity.writeTo(formOutputStream);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        formDataPublisher = HttpRequest.BodyPublishers
            .ofInputStream(() -> new ByteArrayInputStream(formOutputStream.toByteArray()));
    }
    localVarRequestBuilder
        .header("Content-Type", entity.getContentType().getValue())
        .method("POST", formDataPublisher);
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * For advanced users who already understand the constraints of your field data and want to create it in one request.
   * 
   * @param _file  (optional)
   * @param fileName  (optional)
   * @param extent  (optional)
   * @param iSize  (optional)
   * @param channelNames  (optional
   * @param times  (optional
   * @param annotation  (optional)
   * @param origin  (optional)
   * @return FieldDataSavedResults
   * @throws ApiException if fails to make API call
   */
  public FieldDataSavedResults analyzeFileAndCreate(File _file, String fileName, Extent extent, ISize iSize, List<String> channelNames, List<Double> times, String annotation, Origin origin) throws ApiException {
    ApiResponse<FieldDataSavedResults> localVarResponse = analyzeFileAndCreateWithHttpInfo(_file, fileName, extent, iSize, channelNames, times, annotation, origin);
    return localVarResponse.getData();
  }

  /**
   * For advanced users who already understand the constraints of your field data and want to create it in one request.
   * 
   * @param _file  (optional)
   * @param fileName  (optional)
   * @param extent  (optional)
   * @param iSize  (optional)
   * @param channelNames  (optional
   * @param times  (optional
   * @param annotation  (optional)
   * @param origin  (optional)
   * @return ApiResponse&lt;FieldDataSavedResults&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FieldDataSavedResults> analyzeFileAndCreateWithHttpInfo(File _file, String fileName, Extent extent, ISize iSize, List<String> channelNames, List<Double> times, String annotation, Origin origin) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = analyzeFileAndCreateRequestBuilder(_file, fileName, extent, iSize, channelNames, times, annotation, origin);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("analyzeFileAndCreate", localVarResponse);
        }
        return new ApiResponse<FieldDataSavedResults>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FieldDataSavedResults>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder analyzeFileAndCreateRequestBuilder(File _file, String fileName, Extent extent, ISize iSize, List<String> channelNames, List<Double> times, String annotation, Origin origin) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/fieldData/analyzeAndCreateFromFile";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    MultipartEntityBuilder multiPartBuilder = MultipartEntityBuilder.create();
    boolean hasFiles = false;
    multiPartBuilder.addBinaryBody("file", _file);
    hasFiles = true;
    multiPartBuilder.addTextBody("fileName", fileName.toString());
    multiPartBuilder.addTextBody("extent", extent.toString());
    multiPartBuilder.addTextBody("iSize", iSize.toString());
    for (int i=0; i < channelNames.size(); i++) {
        multiPartBuilder.addTextBody("channelNames", channelNames.get(i).toString());
    }
    for (int i=0; i < times.size(); i++) {
        multiPartBuilder.addTextBody("times", times.get(i).toString());
    }
    multiPartBuilder.addTextBody("annotation", annotation.toString());
    multiPartBuilder.addTextBody("origin", origin.toString());
    HttpEntity entity = multiPartBuilder.build();
    HttpRequest.BodyPublisher formDataPublisher;
    if (hasFiles) {
        Pipe pipe;
        try {
            pipe = Pipe.open();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        new Thread(() -> {
            try (OutputStream outputStream = Channels.newOutputStream(pipe.sink())) {
                entity.writeTo(outputStream);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }).start();
        formDataPublisher = HttpRequest.BodyPublishers.ofInputStream(() -> Channels.newInputStream(pipe.source()));
    } else {
        ByteArrayOutputStream formOutputStream = new ByteArrayOutputStream();
        try {
            entity.writeTo(formOutputStream);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        formDataPublisher = HttpRequest.BodyPublishers
            .ofInputStream(() -> new ByteArrayInputStream(formOutputStream.toByteArray()));
    }
    localVarRequestBuilder
        .header("Content-Type", entity.getContentType().getValue())
        .method("POST", formDataPublisher);
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Copy all existing field data from a BioModel/MathModel that you have access to, but don&#39;t own.
   * 
   * @param sourceModel  (optional)
   * @return Map&lt;String, ExternalDataIdentifier&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, ExternalDataIdentifier> copyModelsFieldData(SourceModel sourceModel) throws ApiException {
    ApiResponse<Map<String, ExternalDataIdentifier>> localVarResponse = copyModelsFieldDataWithHttpInfo(sourceModel);
    return localVarResponse.getData();
  }

  /**
   * Copy all existing field data from a BioModel/MathModel that you have access to, but don&#39;t own.
   * 
   * @param sourceModel  (optional)
   * @return ApiResponse&lt;Map&lt;String, ExternalDataIdentifier&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Map<String, ExternalDataIdentifier>> copyModelsFieldDataWithHttpInfo(SourceModel sourceModel) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = copyModelsFieldDataRequestBuilder(sourceModel);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("copyModelsFieldData", localVarResponse);
        }
        return new ApiResponse<Map<String, ExternalDataIdentifier>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Map<String, ExternalDataIdentifier>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder copyModelsFieldDataRequestBuilder(SourceModel sourceModel) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/fieldData/copyModelsFieldData";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(sourceModel);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Take the field data specification, and save it to the server. User may adjust the analyzed file before uploading to edit defaults.
   * 
   * @param analyzedFile  (optional)
   * @return FieldDataSavedResults
   * @throws ApiException if fails to make API call
   */
  public FieldDataSavedResults createFromAnalyzedFile(AnalyzedFile analyzedFile) throws ApiException {
    ApiResponse<FieldDataSavedResults> localVarResponse = createFromAnalyzedFileWithHttpInfo(analyzedFile);
    return localVarResponse.getData();
  }

  /**
   * Take the field data specification, and save it to the server. User may adjust the analyzed file before uploading to edit defaults.
   * 
   * @param analyzedFile  (optional)
   * @return ApiResponse&lt;FieldDataSavedResults&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FieldDataSavedResults> createFromAnalyzedFileWithHttpInfo(AnalyzedFile analyzedFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createFromAnalyzedFileRequestBuilder(analyzedFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createFromAnalyzedFile", localVarResponse);
        }
        return new ApiResponse<FieldDataSavedResults>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FieldDataSavedResults>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createFromAnalyzedFileRequestBuilder(AnalyzedFile analyzedFile) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/fieldData/createFromSpecification";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(analyzedFile);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create new field data from existing simulation results.
   * 
   * @param simKeyReference  (optional)
   * @param jobIndex  (optional)
   * @param newFieldDataName  (optional)
   * @throws ApiException if fails to make API call
   */
  public void createFromSimulation(String simKeyReference, Integer jobIndex, String newFieldDataName) throws ApiException {
    createFromSimulationWithHttpInfo(simKeyReference, jobIndex, newFieldDataName);
  }

  /**
   * Create new field data from existing simulation results.
   * 
   * @param simKeyReference  (optional)
   * @param jobIndex  (optional)
   * @param newFieldDataName  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> createFromSimulationWithHttpInfo(String simKeyReference, Integer jobIndex, String newFieldDataName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createFromSimulationRequestBuilder(simKeyReference, jobIndex, newFieldDataName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createFromSimulation", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createFromSimulationRequestBuilder(String simKeyReference, Integer jobIndex, String newFieldDataName) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/fieldData/createFromSimulation";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    List<NameValuePair> formValues = new ArrayList<>();
    if (simKeyReference != null) {
        formValues.add(new BasicNameValuePair("simKeyReference", simKeyReference.toString()));
    }
    if (jobIndex != null) {
        formValues.add(new BasicNameValuePair("jobIndex", jobIndex.toString()));
    }
    if (newFieldDataName != null) {
        formValues.add(new BasicNameValuePair("newFieldDataName", newFieldDataName.toString()));
    }
    HttpEntity entity = new UrlEncodedFormEntity(formValues, java.nio.charset.StandardCharsets.UTF_8);
    ByteArrayOutputStream formOutputStream = new ByteArrayOutputStream();
    try {
        entity.writeTo(formOutputStream);
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
    localVarRequestBuilder
        .header("Content-Type", entity.getContentType().getValue())
        .method("POST", HttpRequest.BodyPublishers
            .ofInputStream(() -> new ByteArrayInputStream(formOutputStream.toByteArray())));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete the selected field data.
   * 
   * @param fieldDataID  (required)
   * @throws ApiException if fails to make API call
   */
  public void delete(String fieldDataID) throws ApiException {
    deleteWithHttpInfo(fieldDataID);
  }

  /**
   * Delete the selected field data.
   * 
   * @param fieldDataID  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteWithHttpInfo(String fieldDataID) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteRequestBuilder(fieldDataID);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("delete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteRequestBuilder(String fieldDataID) throws ApiException {
    // verify the required parameter 'fieldDataID' is set
    if (fieldDataID == null) {
      throw new ApiException(400, "Missing the required parameter 'fieldDataID' when calling delete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/fieldData/delete/{fieldDataID}"
        .replace("{fieldDataID}", ApiClient.urlEncode(fieldDataID.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all of the ids used to identify, and retrieve field data.
   * 
   * @return List&lt;FieldDataReference&gt;
   * @throws ApiException if fails to make API call
   */
  public List<FieldDataReference> getAllIDs() throws ApiException {
    ApiResponse<List<FieldDataReference>> localVarResponse = getAllIDsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get all of the ids used to identify, and retrieve field data.
   * 
   * @return ApiResponse&lt;List&lt;FieldDataReference&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<FieldDataReference>> getAllIDsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAllIDsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAllIDs", localVarResponse);
        }
        return new ApiResponse<List<FieldDataReference>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<FieldDataReference>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAllIDsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/fieldData/IDs";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get the shape of the field data. That is it&#39;s size, origin, extent, times, and data identifiers.
   * 
   * @param fieldDataID  (required)
   * @return FieldDataShape
   * @throws ApiException if fails to make API call
   */
  public FieldDataShape getShapeFromID(String fieldDataID) throws ApiException {
    ApiResponse<FieldDataShape> localVarResponse = getShapeFromIDWithHttpInfo(fieldDataID);
    return localVarResponse.getData();
  }

  /**
   * Get the shape of the field data. That is it&#39;s size, origin, extent, times, and data identifiers.
   * 
   * @param fieldDataID  (required)
   * @return ApiResponse&lt;FieldDataShape&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FieldDataShape> getShapeFromIDWithHttpInfo(String fieldDataID) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getShapeFromIDRequestBuilder(fieldDataID);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getShapeFromID", localVarResponse);
        }
        return new ApiResponse<FieldDataShape>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FieldDataShape>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getShapeFromIDRequestBuilder(String fieldDataID) throws ApiException {
    // verify the required parameter 'fieldDataID' is set
    if (fieldDataID == null) {
      throw new ApiException(400, "Missing the required parameter 'fieldDataID' when calling getShapeFromID");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/fieldData/shape/{fieldDataID}"
        .replace("{fieldDataID}", ApiClient.urlEncode(fieldDataID.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
