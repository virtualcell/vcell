/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.vcell.restclient.model.Domain;
import org.vcell.restclient.model.FunctionCategory;
import org.vcell.restclient.model.VariableType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * AnnotatedFunctionDTO
 */
@JsonPropertyOrder({
  AnnotatedFunctionDTO.JSON_PROPERTY_FUNCTION_NAME,
  AnnotatedFunctionDTO.JSON_PROPERTY_FUNCTION_EXPRESSION,
  AnnotatedFunctionDTO.JSON_PROPERTY_ERROR,
  AnnotatedFunctionDTO.JSON_PROPERTY_DOMAIN,
  AnnotatedFunctionDTO.JSON_PROPERTY_FUNCTION_TYPE,
  AnnotatedFunctionDTO.JSON_PROPERTY_CATEGORY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AnnotatedFunctionDTO {
  public static final String JSON_PROPERTY_FUNCTION_NAME = "functionName";
  private String functionName;

  public static final String JSON_PROPERTY_FUNCTION_EXPRESSION = "functionExpression";
  private String functionExpression;

  public static final String JSON_PROPERTY_ERROR = "error";
  private String error;

  public static final String JSON_PROPERTY_DOMAIN = "domain";
  private Domain domain;

  public static final String JSON_PROPERTY_FUNCTION_TYPE = "functionType";
  private VariableType functionType;

  public static final String JSON_PROPERTY_CATEGORY = "category";
  private FunctionCategory category;

  public AnnotatedFunctionDTO() { 
  }

  public AnnotatedFunctionDTO functionName(String functionName) {
    this.functionName = functionName;
    return this;
  }

   /**
   * Get functionName
   * @return functionName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FUNCTION_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFunctionName() {
    return functionName;
  }


  @JsonProperty(JSON_PROPERTY_FUNCTION_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFunctionName(String functionName) {
    this.functionName = functionName;
  }


  public AnnotatedFunctionDTO functionExpression(String functionExpression) {
    this.functionExpression = functionExpression;
    return this;
  }

   /**
   * Get functionExpression
   * @return functionExpression
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FUNCTION_EXPRESSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFunctionExpression() {
    return functionExpression;
  }


  @JsonProperty(JSON_PROPERTY_FUNCTION_EXPRESSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFunctionExpression(String functionExpression) {
    this.functionExpression = functionExpression;
  }


  public AnnotatedFunctionDTO error(String error) {
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getError() {
    return error;
  }


  @JsonProperty(JSON_PROPERTY_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setError(String error) {
    this.error = error;
  }


  public AnnotatedFunctionDTO domain(Domain domain) {
    this.domain = domain;
    return this;
  }

   /**
   * Get domain
   * @return domain
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Domain getDomain() {
    return domain;
  }


  @JsonProperty(JSON_PROPERTY_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDomain(Domain domain) {
    this.domain = domain;
  }


  public AnnotatedFunctionDTO functionType(VariableType functionType) {
    this.functionType = functionType;
    return this;
  }

   /**
   * Get functionType
   * @return functionType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FUNCTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VariableType getFunctionType() {
    return functionType;
  }


  @JsonProperty(JSON_PROPERTY_FUNCTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFunctionType(VariableType functionType) {
    this.functionType = functionType;
  }


  public AnnotatedFunctionDTO category(FunctionCategory category) {
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FunctionCategory getCategory() {
    return category;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategory(FunctionCategory category) {
    this.category = category;
  }


  /**
   * Return true if this AnnotatedFunctionDTO object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnnotatedFunctionDTO annotatedFunctionDTO = (AnnotatedFunctionDTO) o;
    return Objects.equals(this.functionName, annotatedFunctionDTO.functionName) &&
        Objects.equals(this.functionExpression, annotatedFunctionDTO.functionExpression) &&
        Objects.equals(this.error, annotatedFunctionDTO.error) &&
        Objects.equals(this.domain, annotatedFunctionDTO.domain) &&
        Objects.equals(this.functionType, annotatedFunctionDTO.functionType) &&
        Objects.equals(this.category, annotatedFunctionDTO.category);
  }

  @Override
  public int hashCode() {
    return Objects.hash(functionName, functionExpression, error, domain, functionType, category);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnnotatedFunctionDTO {\n");
    sb.append("    functionName: ").append(toIndentedString(functionName)).append("\n");
    sb.append("    functionExpression: ").append(toIndentedString(functionExpression)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    functionType: ").append(toIndentedString(functionType)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `functionName` to the URL query string
    if (getFunctionName() != null) {
      joiner.add(String.format("%sfunctionName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFunctionName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `functionExpression` to the URL query string
    if (getFunctionExpression() != null) {
      joiner.add(String.format("%sfunctionExpression%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFunctionExpression()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `error` to the URL query string
    if (getError() != null) {
      joiner.add(String.format("%serror%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getError()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `domain` to the URL query string
    if (getDomain() != null) {
      joiner.add(getDomain().toUrlQueryString(prefix + "domain" + suffix));
    }

    // add `functionType` to the URL query string
    if (getFunctionType() != null) {
      joiner.add(getFunctionType().toUrlQueryString(prefix + "functionType" + suffix));
    }

    // add `category` to the URL query string
    if (getCategory() != null) {
      joiner.add(String.format("%scategory%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCategory()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

