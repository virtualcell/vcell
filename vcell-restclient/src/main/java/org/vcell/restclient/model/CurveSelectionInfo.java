/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.vcell.restclient.model.Curve;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * CurveSelectionInfo
 */
@JsonPropertyOrder({
  CurveSelectionInfo.JSON_PROPERTY_FIELD_CURVE,
  CurveSelectionInfo.JSON_PROPERTY_FIELD_TYPE,
  CurveSelectionInfo.JSON_PROPERTY_FIELD_CONTROL_POINT,
  CurveSelectionInfo.JSON_PROPERTY_FIELD_SEGMENT,
  CurveSelectionInfo.JSON_PROPERTY_FIELD_U,
  CurveSelectionInfo.JSON_PROPERTY_FIELD_U_EXTENDED,
  CurveSelectionInfo.JSON_PROPERTY_FIELD_CONTROL_POINT_EXTENDED,
  CurveSelectionInfo.JSON_PROPERTY_FIELD_SEGMENT_EXTENDED,
  CurveSelectionInfo.JSON_PROPERTY_FIELD_DIRECTION_NEGATIVE,
  CurveSelectionInfo.JSON_PROPERTY_CROSSING
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CurveSelectionInfo {
  public static final String JSON_PROPERTY_FIELD_CURVE = "fieldCurve";
  private Curve fieldCurve;

  public static final String JSON_PROPERTY_FIELD_TYPE = "fieldType";
  private Integer fieldType;

  public static final String JSON_PROPERTY_FIELD_CONTROL_POINT = "fieldControlPoint";
  private Integer fieldControlPoint;

  public static final String JSON_PROPERTY_FIELD_SEGMENT = "fieldSegment";
  private Integer fieldSegment;

  public static final String JSON_PROPERTY_FIELD_U = "fieldU";
  private Double fieldU;

  public static final String JSON_PROPERTY_FIELD_U_EXTENDED = "fieldUExtended";
  private Double fieldUExtended;

  public static final String JSON_PROPERTY_FIELD_CONTROL_POINT_EXTENDED = "fieldControlPointExtended";
  private Integer fieldControlPointExtended;

  public static final String JSON_PROPERTY_FIELD_SEGMENT_EXTENDED = "fieldSegmentExtended";
  private Integer fieldSegmentExtended;

  public static final String JSON_PROPERTY_FIELD_DIRECTION_NEGATIVE = "fieldDirectionNegative";
  private Boolean fieldDirectionNegative;

  public static final String JSON_PROPERTY_CROSSING = "crossing";
  private Boolean crossing;

  public CurveSelectionInfo() { 
  }

  public CurveSelectionInfo fieldCurve(Curve fieldCurve) {
    this.fieldCurve = fieldCurve;
    return this;
  }

   /**
   * Get fieldCurve
   * @return fieldCurve
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIELD_CURVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Curve getFieldCurve() {
    return fieldCurve;
  }


  @JsonProperty(JSON_PROPERTY_FIELD_CURVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFieldCurve(Curve fieldCurve) {
    this.fieldCurve = fieldCurve;
  }


  public CurveSelectionInfo fieldType(Integer fieldType) {
    this.fieldType = fieldType;
    return this;
  }

   /**
   * Get fieldType
   * @return fieldType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIELD_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFieldType() {
    return fieldType;
  }


  @JsonProperty(JSON_PROPERTY_FIELD_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFieldType(Integer fieldType) {
    this.fieldType = fieldType;
  }


  public CurveSelectionInfo fieldControlPoint(Integer fieldControlPoint) {
    this.fieldControlPoint = fieldControlPoint;
    return this;
  }

   /**
   * Get fieldControlPoint
   * @return fieldControlPoint
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIELD_CONTROL_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFieldControlPoint() {
    return fieldControlPoint;
  }


  @JsonProperty(JSON_PROPERTY_FIELD_CONTROL_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFieldControlPoint(Integer fieldControlPoint) {
    this.fieldControlPoint = fieldControlPoint;
  }


  public CurveSelectionInfo fieldSegment(Integer fieldSegment) {
    this.fieldSegment = fieldSegment;
    return this;
  }

   /**
   * Get fieldSegment
   * @return fieldSegment
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIELD_SEGMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFieldSegment() {
    return fieldSegment;
  }


  @JsonProperty(JSON_PROPERTY_FIELD_SEGMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFieldSegment(Integer fieldSegment) {
    this.fieldSegment = fieldSegment;
  }


  public CurveSelectionInfo fieldU(Double fieldU) {
    this.fieldU = fieldU;
    return this;
  }

   /**
   * Get fieldU
   * @return fieldU
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIELD_U)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getFieldU() {
    return fieldU;
  }


  @JsonProperty(JSON_PROPERTY_FIELD_U)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFieldU(Double fieldU) {
    this.fieldU = fieldU;
  }


  public CurveSelectionInfo fieldUExtended(Double fieldUExtended) {
    this.fieldUExtended = fieldUExtended;
    return this;
  }

   /**
   * Get fieldUExtended
   * @return fieldUExtended
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIELD_U_EXTENDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getFieldUExtended() {
    return fieldUExtended;
  }


  @JsonProperty(JSON_PROPERTY_FIELD_U_EXTENDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFieldUExtended(Double fieldUExtended) {
    this.fieldUExtended = fieldUExtended;
  }


  public CurveSelectionInfo fieldControlPointExtended(Integer fieldControlPointExtended) {
    this.fieldControlPointExtended = fieldControlPointExtended;
    return this;
  }

   /**
   * Get fieldControlPointExtended
   * @return fieldControlPointExtended
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIELD_CONTROL_POINT_EXTENDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFieldControlPointExtended() {
    return fieldControlPointExtended;
  }


  @JsonProperty(JSON_PROPERTY_FIELD_CONTROL_POINT_EXTENDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFieldControlPointExtended(Integer fieldControlPointExtended) {
    this.fieldControlPointExtended = fieldControlPointExtended;
  }


  public CurveSelectionInfo fieldSegmentExtended(Integer fieldSegmentExtended) {
    this.fieldSegmentExtended = fieldSegmentExtended;
    return this;
  }

   /**
   * Get fieldSegmentExtended
   * @return fieldSegmentExtended
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIELD_SEGMENT_EXTENDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFieldSegmentExtended() {
    return fieldSegmentExtended;
  }


  @JsonProperty(JSON_PROPERTY_FIELD_SEGMENT_EXTENDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFieldSegmentExtended(Integer fieldSegmentExtended) {
    this.fieldSegmentExtended = fieldSegmentExtended;
  }


  public CurveSelectionInfo fieldDirectionNegative(Boolean fieldDirectionNegative) {
    this.fieldDirectionNegative = fieldDirectionNegative;
    return this;
  }

   /**
   * Get fieldDirectionNegative
   * @return fieldDirectionNegative
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIELD_DIRECTION_NEGATIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFieldDirectionNegative() {
    return fieldDirectionNegative;
  }


  @JsonProperty(JSON_PROPERTY_FIELD_DIRECTION_NEGATIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFieldDirectionNegative(Boolean fieldDirectionNegative) {
    this.fieldDirectionNegative = fieldDirectionNegative;
  }


  public CurveSelectionInfo crossing(Boolean crossing) {
    this.crossing = crossing;
    return this;
  }

   /**
   * Get crossing
   * @return crossing
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CROSSING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCrossing() {
    return crossing;
  }


  @JsonProperty(JSON_PROPERTY_CROSSING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCrossing(Boolean crossing) {
    this.crossing = crossing;
  }


  /**
   * Return true if this CurveSelectionInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurveSelectionInfo curveSelectionInfo = (CurveSelectionInfo) o;
    return Objects.equals(this.fieldCurve, curveSelectionInfo.fieldCurve) &&
        Objects.equals(this.fieldType, curveSelectionInfo.fieldType) &&
        Objects.equals(this.fieldControlPoint, curveSelectionInfo.fieldControlPoint) &&
        Objects.equals(this.fieldSegment, curveSelectionInfo.fieldSegment) &&
        Objects.equals(this.fieldU, curveSelectionInfo.fieldU) &&
        Objects.equals(this.fieldUExtended, curveSelectionInfo.fieldUExtended) &&
        Objects.equals(this.fieldControlPointExtended, curveSelectionInfo.fieldControlPointExtended) &&
        Objects.equals(this.fieldSegmentExtended, curveSelectionInfo.fieldSegmentExtended) &&
        Objects.equals(this.fieldDirectionNegative, curveSelectionInfo.fieldDirectionNegative) &&
        Objects.equals(this.crossing, curveSelectionInfo.crossing);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldCurve, fieldType, fieldControlPoint, fieldSegment, fieldU, fieldUExtended, fieldControlPointExtended, fieldSegmentExtended, fieldDirectionNegative, crossing);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurveSelectionInfo {\n");
    sb.append("    fieldCurve: ").append(toIndentedString(fieldCurve)).append("\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    fieldControlPoint: ").append(toIndentedString(fieldControlPoint)).append("\n");
    sb.append("    fieldSegment: ").append(toIndentedString(fieldSegment)).append("\n");
    sb.append("    fieldU: ").append(toIndentedString(fieldU)).append("\n");
    sb.append("    fieldUExtended: ").append(toIndentedString(fieldUExtended)).append("\n");
    sb.append("    fieldControlPointExtended: ").append(toIndentedString(fieldControlPointExtended)).append("\n");
    sb.append("    fieldSegmentExtended: ").append(toIndentedString(fieldSegmentExtended)).append("\n");
    sb.append("    fieldDirectionNegative: ").append(toIndentedString(fieldDirectionNegative)).append("\n");
    sb.append("    crossing: ").append(toIndentedString(crossing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `fieldCurve` to the URL query string
    if (getFieldCurve() != null) {
      joiner.add(getFieldCurve().toUrlQueryString(prefix + "fieldCurve" + suffix));
    }

    // add `fieldType` to the URL query string
    if (getFieldType() != null) {
      joiner.add(String.format("%sfieldType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFieldType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `fieldControlPoint` to the URL query string
    if (getFieldControlPoint() != null) {
      joiner.add(String.format("%sfieldControlPoint%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFieldControlPoint()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `fieldSegment` to the URL query string
    if (getFieldSegment() != null) {
      joiner.add(String.format("%sfieldSegment%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFieldSegment()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `fieldU` to the URL query string
    if (getFieldU() != null) {
      joiner.add(String.format("%sfieldU%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFieldU()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `fieldUExtended` to the URL query string
    if (getFieldUExtended() != null) {
      joiner.add(String.format("%sfieldUExtended%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFieldUExtended()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `fieldControlPointExtended` to the URL query string
    if (getFieldControlPointExtended() != null) {
      joiner.add(String.format("%sfieldControlPointExtended%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFieldControlPointExtended()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `fieldSegmentExtended` to the URL query string
    if (getFieldSegmentExtended() != null) {
      joiner.add(String.format("%sfieldSegmentExtended%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFieldSegmentExtended()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `fieldDirectionNegative` to the URL query string
    if (getFieldDirectionNegative() != null) {
      joiner.add(String.format("%sfieldDirectionNegative%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFieldDirectionNegative()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `crossing` to the URL query string
    if (getCrossing() != null) {
      joiner.add(String.format("%scrossing%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCrossing()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

