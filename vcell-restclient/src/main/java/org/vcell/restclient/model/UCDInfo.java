/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.vcell.restclient.model.Coordinate;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * UCDInfo
 */
@JsonPropertyOrder({
  UCDInfo.JSON_PROPERTY_UCD_GRID_NODES,
  UCDInfo.JSON_PROPERTY_UCD_MEMBRANE_QUADS,
  UCDInfo.JSON_PROPERTY_REDUCED_U_C_D_GRID_NODES_V,
  UCDInfo.JSON_PROPERTY_U_C_D_GRID_NODES,
  UCDInfo.JSON_PROPERTY_U_C_D_MEMBRANE_QUADS,
  UCDInfo.JSON_PROPERTY_NUM_VOLUME_NODES_X,
  UCDInfo.JSON_PROPERTY_NUM_VOLUME_NODES_Y,
  UCDInfo.JSON_PROPERTY_NUM_VOLUME_NODES_Z,
  UCDInfo.JSON_PROPERTY_NUM_POINTS_X_Y_Z,
  UCDInfo.JSON_PROPERTY_NUM_VOLUME_NODES_X_Y,
  UCDInfo.JSON_PROPERTY_NUM_VOLUME_CELLS,
  UCDInfo.JSON_PROPERTY_NUM_MEMBRANE_CELLS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UCDInfo {
  public static final String JSON_PROPERTY_UCD_GRID_NODES = "ucdGridNodes";
  private List<List<List<Coordinate>>> ucdGridNodes;

  public static final String JSON_PROPERTY_UCD_MEMBRANE_QUADS = "ucdMembraneQuads";
  private List<List<Integer>> ucdMembraneQuads;

  public static final String JSON_PROPERTY_REDUCED_U_C_D_GRID_NODES_V = "reducedUCDGridNodesV";
  private List<Coordinate> reducedUCDGridNodesV;

  public static final String JSON_PROPERTY_U_C_D_GRID_NODES = "uCDGridNodes";
  private List<List<List<Coordinate>>> uCDGridNodes;

  public static final String JSON_PROPERTY_U_C_D_MEMBRANE_QUADS = "uCDMembraneQuads";
  private List<List<Integer>> uCDMembraneQuads;

  public static final String JSON_PROPERTY_NUM_VOLUME_NODES_X = "numVolumeNodesX";
  private Integer numVolumeNodesX;

  public static final String JSON_PROPERTY_NUM_VOLUME_NODES_Y = "numVolumeNodesY";
  private Integer numVolumeNodesY;

  public static final String JSON_PROPERTY_NUM_VOLUME_NODES_Z = "numVolumeNodesZ";
  private Integer numVolumeNodesZ;

  public static final String JSON_PROPERTY_NUM_POINTS_X_Y_Z = "numPointsXYZ";
  private Integer numPointsXYZ;

  public static final String JSON_PROPERTY_NUM_VOLUME_NODES_X_Y = "numVolumeNodesXY";
  private Integer numVolumeNodesXY;

  public static final String JSON_PROPERTY_NUM_VOLUME_CELLS = "numVolumeCells";
  private Integer numVolumeCells;

  public static final String JSON_PROPERTY_NUM_MEMBRANE_CELLS = "numMembraneCells";
  private Integer numMembraneCells;

  public UCDInfo() { 
  }

  public UCDInfo ucdGridNodes(List<List<List<Coordinate>>> ucdGridNodes) {
    this.ucdGridNodes = ucdGridNodes;
    return this;
  }

  public UCDInfo addUcdGridNodesItem(List<List<Coordinate>> ucdGridNodesItem) {
    if (this.ucdGridNodes == null) {
      this.ucdGridNodes = new ArrayList<>();
    }
    this.ucdGridNodes.add(ucdGridNodesItem);
    return this;
  }

   /**
   * Get ucdGridNodes
   * @return ucdGridNodes
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UCD_GRID_NODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<List<List<Coordinate>>> getUcdGridNodes() {
    return ucdGridNodes;
  }


  @JsonProperty(JSON_PROPERTY_UCD_GRID_NODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUcdGridNodes(List<List<List<Coordinate>>> ucdGridNodes) {
    this.ucdGridNodes = ucdGridNodes;
  }


  public UCDInfo ucdMembraneQuads(List<List<Integer>> ucdMembraneQuads) {
    this.ucdMembraneQuads = ucdMembraneQuads;
    return this;
  }

  public UCDInfo addUcdMembraneQuadsItem(List<Integer> ucdMembraneQuadsItem) {
    if (this.ucdMembraneQuads == null) {
      this.ucdMembraneQuads = new ArrayList<>();
    }
    this.ucdMembraneQuads.add(ucdMembraneQuadsItem);
    return this;
  }

   /**
   * Get ucdMembraneQuads
   * @return ucdMembraneQuads
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UCD_MEMBRANE_QUADS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<List<Integer>> getUcdMembraneQuads() {
    return ucdMembraneQuads;
  }


  @JsonProperty(JSON_PROPERTY_UCD_MEMBRANE_QUADS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUcdMembraneQuads(List<List<Integer>> ucdMembraneQuads) {
    this.ucdMembraneQuads = ucdMembraneQuads;
  }


  public UCDInfo reducedUCDGridNodesV(List<Coordinate> reducedUCDGridNodesV) {
    this.reducedUCDGridNodesV = reducedUCDGridNodesV;
    return this;
  }

  public UCDInfo addReducedUCDGridNodesVItem(Coordinate reducedUCDGridNodesVItem) {
    if (this.reducedUCDGridNodesV == null) {
      this.reducedUCDGridNodesV = new ArrayList<>();
    }
    this.reducedUCDGridNodesV.add(reducedUCDGridNodesVItem);
    return this;
  }

   /**
   * Get reducedUCDGridNodesV
   * @return reducedUCDGridNodesV
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REDUCED_U_C_D_GRID_NODES_V)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Coordinate> getReducedUCDGridNodesV() {
    return reducedUCDGridNodesV;
  }


  @JsonProperty(JSON_PROPERTY_REDUCED_U_C_D_GRID_NODES_V)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReducedUCDGridNodesV(List<Coordinate> reducedUCDGridNodesV) {
    this.reducedUCDGridNodesV = reducedUCDGridNodesV;
  }


  public UCDInfo uCDGridNodes(List<List<List<Coordinate>>> uCDGridNodes) {
    this.uCDGridNodes = uCDGridNodes;
    return this;
  }

  public UCDInfo addUCDGridNodesItem(List<List<Coordinate>> uCDGridNodesItem) {
    if (this.uCDGridNodes == null) {
      this.uCDGridNodes = new ArrayList<>();
    }
    this.uCDGridNodes.add(uCDGridNodesItem);
    return this;
  }

   /**
   * Get uCDGridNodes
   * @return uCDGridNodes
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_U_C_D_GRID_NODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<List<List<Coordinate>>> getuCDGridNodes() {
    return uCDGridNodes;
  }


  @JsonProperty(JSON_PROPERTY_U_C_D_GRID_NODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setuCDGridNodes(List<List<List<Coordinate>>> uCDGridNodes) {
    this.uCDGridNodes = uCDGridNodes;
  }


  public UCDInfo uCDMembraneQuads(List<List<Integer>> uCDMembraneQuads) {
    this.uCDMembraneQuads = uCDMembraneQuads;
    return this;
  }

  public UCDInfo addUCDMembraneQuadsItem(List<Integer> uCDMembraneQuadsItem) {
    if (this.uCDMembraneQuads == null) {
      this.uCDMembraneQuads = new ArrayList<>();
    }
    this.uCDMembraneQuads.add(uCDMembraneQuadsItem);
    return this;
  }

   /**
   * Get uCDMembraneQuads
   * @return uCDMembraneQuads
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_U_C_D_MEMBRANE_QUADS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<List<Integer>> getuCDMembraneQuads() {
    return uCDMembraneQuads;
  }


  @JsonProperty(JSON_PROPERTY_U_C_D_MEMBRANE_QUADS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setuCDMembraneQuads(List<List<Integer>> uCDMembraneQuads) {
    this.uCDMembraneQuads = uCDMembraneQuads;
  }


  public UCDInfo numVolumeNodesX(Integer numVolumeNodesX) {
    this.numVolumeNodesX = numVolumeNodesX;
    return this;
  }

   /**
   * Get numVolumeNodesX
   * @return numVolumeNodesX
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_VOLUME_NODES_X)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumVolumeNodesX() {
    return numVolumeNodesX;
  }


  @JsonProperty(JSON_PROPERTY_NUM_VOLUME_NODES_X)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumVolumeNodesX(Integer numVolumeNodesX) {
    this.numVolumeNodesX = numVolumeNodesX;
  }


  public UCDInfo numVolumeNodesY(Integer numVolumeNodesY) {
    this.numVolumeNodesY = numVolumeNodesY;
    return this;
  }

   /**
   * Get numVolumeNodesY
   * @return numVolumeNodesY
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_VOLUME_NODES_Y)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumVolumeNodesY() {
    return numVolumeNodesY;
  }


  @JsonProperty(JSON_PROPERTY_NUM_VOLUME_NODES_Y)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumVolumeNodesY(Integer numVolumeNodesY) {
    this.numVolumeNodesY = numVolumeNodesY;
  }


  public UCDInfo numVolumeNodesZ(Integer numVolumeNodesZ) {
    this.numVolumeNodesZ = numVolumeNodesZ;
    return this;
  }

   /**
   * Get numVolumeNodesZ
   * @return numVolumeNodesZ
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_VOLUME_NODES_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumVolumeNodesZ() {
    return numVolumeNodesZ;
  }


  @JsonProperty(JSON_PROPERTY_NUM_VOLUME_NODES_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumVolumeNodesZ(Integer numVolumeNodesZ) {
    this.numVolumeNodesZ = numVolumeNodesZ;
  }


  public UCDInfo numPointsXYZ(Integer numPointsXYZ) {
    this.numPointsXYZ = numPointsXYZ;
    return this;
  }

   /**
   * Get numPointsXYZ
   * @return numPointsXYZ
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_POINTS_X_Y_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumPointsXYZ() {
    return numPointsXYZ;
  }


  @JsonProperty(JSON_PROPERTY_NUM_POINTS_X_Y_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumPointsXYZ(Integer numPointsXYZ) {
    this.numPointsXYZ = numPointsXYZ;
  }


  public UCDInfo numVolumeNodesXY(Integer numVolumeNodesXY) {
    this.numVolumeNodesXY = numVolumeNodesXY;
    return this;
  }

   /**
   * Get numVolumeNodesXY
   * @return numVolumeNodesXY
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_VOLUME_NODES_X_Y)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumVolumeNodesXY() {
    return numVolumeNodesXY;
  }


  @JsonProperty(JSON_PROPERTY_NUM_VOLUME_NODES_X_Y)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumVolumeNodesXY(Integer numVolumeNodesXY) {
    this.numVolumeNodesXY = numVolumeNodesXY;
  }


  public UCDInfo numVolumeCells(Integer numVolumeCells) {
    this.numVolumeCells = numVolumeCells;
    return this;
  }

   /**
   * Get numVolumeCells
   * @return numVolumeCells
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_VOLUME_CELLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumVolumeCells() {
    return numVolumeCells;
  }


  @JsonProperty(JSON_PROPERTY_NUM_VOLUME_CELLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumVolumeCells(Integer numVolumeCells) {
    this.numVolumeCells = numVolumeCells;
  }


  public UCDInfo numMembraneCells(Integer numMembraneCells) {
    this.numMembraneCells = numMembraneCells;
    return this;
  }

   /**
   * Get numMembraneCells
   * @return numMembraneCells
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_MEMBRANE_CELLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumMembraneCells() {
    return numMembraneCells;
  }


  @JsonProperty(JSON_PROPERTY_NUM_MEMBRANE_CELLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumMembraneCells(Integer numMembraneCells) {
    this.numMembraneCells = numMembraneCells;
  }


  /**
   * Return true if this UCDInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UCDInfo ucDInfo = (UCDInfo) o;
    return Objects.equals(this.ucdGridNodes, ucDInfo.ucdGridNodes) &&
        Objects.equals(this.ucdMembraneQuads, ucDInfo.ucdMembraneQuads) &&
        Objects.equals(this.reducedUCDGridNodesV, ucDInfo.reducedUCDGridNodesV) &&
        Objects.equals(this.uCDGridNodes, ucDInfo.uCDGridNodes) &&
        Objects.equals(this.uCDMembraneQuads, ucDInfo.uCDMembraneQuads) &&
        Objects.equals(this.numVolumeNodesX, ucDInfo.numVolumeNodesX) &&
        Objects.equals(this.numVolumeNodesY, ucDInfo.numVolumeNodesY) &&
        Objects.equals(this.numVolumeNodesZ, ucDInfo.numVolumeNodesZ) &&
        Objects.equals(this.numPointsXYZ, ucDInfo.numPointsXYZ) &&
        Objects.equals(this.numVolumeNodesXY, ucDInfo.numVolumeNodesXY) &&
        Objects.equals(this.numVolumeCells, ucDInfo.numVolumeCells) &&
        Objects.equals(this.numMembraneCells, ucDInfo.numMembraneCells);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ucdGridNodes, ucdMembraneQuads, reducedUCDGridNodesV, uCDGridNodes, uCDMembraneQuads, numVolumeNodesX, numVolumeNodesY, numVolumeNodesZ, numPointsXYZ, numVolumeNodesXY, numVolumeCells, numMembraneCells);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UCDInfo {\n");
    sb.append("    ucdGridNodes: ").append(toIndentedString(ucdGridNodes)).append("\n");
    sb.append("    ucdMembraneQuads: ").append(toIndentedString(ucdMembraneQuads)).append("\n");
    sb.append("    reducedUCDGridNodesV: ").append(toIndentedString(reducedUCDGridNodesV)).append("\n");
    sb.append("    uCDGridNodes: ").append(toIndentedString(uCDGridNodes)).append("\n");
    sb.append("    uCDMembraneQuads: ").append(toIndentedString(uCDMembraneQuads)).append("\n");
    sb.append("    numVolumeNodesX: ").append(toIndentedString(numVolumeNodesX)).append("\n");
    sb.append("    numVolumeNodesY: ").append(toIndentedString(numVolumeNodesY)).append("\n");
    sb.append("    numVolumeNodesZ: ").append(toIndentedString(numVolumeNodesZ)).append("\n");
    sb.append("    numPointsXYZ: ").append(toIndentedString(numPointsXYZ)).append("\n");
    sb.append("    numVolumeNodesXY: ").append(toIndentedString(numVolumeNodesXY)).append("\n");
    sb.append("    numVolumeCells: ").append(toIndentedString(numVolumeCells)).append("\n");
    sb.append("    numMembraneCells: ").append(toIndentedString(numMembraneCells)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `ucdGridNodes` to the URL query string
    if (getUcdGridNodes() != null) {
      for (int i = 0; i < getUcdGridNodes().size(); i++) {
        if (getUcdGridNodes().get(i) != null) {
          joiner.add(String.format("%sucdGridNodes%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getUcdGridNodes().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
      }
    }

    // add `ucdMembraneQuads` to the URL query string
    if (getUcdMembraneQuads() != null) {
      for (int i = 0; i < getUcdMembraneQuads().size(); i++) {
        joiner.add(String.format("%sucdMembraneQuads%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getUcdMembraneQuads().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `reducedUCDGridNodesV` to the URL query string
    if (getReducedUCDGridNodesV() != null) {
      for (int i = 0; i < getReducedUCDGridNodesV().size(); i++) {
        if (getReducedUCDGridNodesV().get(i) != null) {
          joiner.add(getReducedUCDGridNodesV().get(i).toUrlQueryString(String.format("%sreducedUCDGridNodesV%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `uCDGridNodes` to the URL query string
    if (getuCDGridNodes() != null) {
      for (int i = 0; i < getuCDGridNodes().size(); i++) {
        if (getuCDGridNodes().get(i) != null) {
          joiner.add(String.format("%suCDGridNodes%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getuCDGridNodes().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
      }
    }

    // add `uCDMembraneQuads` to the URL query string
    if (getuCDMembraneQuads() != null) {
      for (int i = 0; i < getuCDMembraneQuads().size(); i++) {
        joiner.add(String.format("%suCDMembraneQuads%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getuCDMembraneQuads().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `numVolumeNodesX` to the URL query string
    if (getNumVolumeNodesX() != null) {
      joiner.add(String.format("%snumVolumeNodesX%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumVolumeNodesX()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `numVolumeNodesY` to the URL query string
    if (getNumVolumeNodesY() != null) {
      joiner.add(String.format("%snumVolumeNodesY%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumVolumeNodesY()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `numVolumeNodesZ` to the URL query string
    if (getNumVolumeNodesZ() != null) {
      joiner.add(String.format("%snumVolumeNodesZ%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumVolumeNodesZ()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `numPointsXYZ` to the URL query string
    if (getNumPointsXYZ() != null) {
      joiner.add(String.format("%snumPointsXYZ%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumPointsXYZ()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `numVolumeNodesXY` to the URL query string
    if (getNumVolumeNodesXY() != null) {
      joiner.add(String.format("%snumVolumeNodesXY%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumVolumeNodesXY()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `numVolumeCells` to the URL query string
    if (getNumVolumeCells() != null) {
      joiner.add(String.format("%snumVolumeCells%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumVolumeCells()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `numMembraneCells` to the URL query string
    if (getNumMembraneCells() != null) {
      joiner.add(String.format("%snumMembraneCells%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumMembraneCells()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

