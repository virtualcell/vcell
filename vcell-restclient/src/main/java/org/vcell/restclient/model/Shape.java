/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.vcell.restclient.model.DataIdentifier;
import org.vcell.restclient.model.Extent;
import org.vcell.restclient.model.ISize;
import org.vcell.restclient.model.Origin;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Shape
 */
@JsonPropertyOrder({
  Shape.JSON_PROPERTY_EXTENT,
  Shape.JSON_PROPERTY_ORIGIN,
  Shape.JSON_PROPERTY_ISIZE,
  Shape.JSON_PROPERTY_DATA_IDENTIFIER,
  Shape.JSON_PROPERTY_TIMES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Shape {
  public static final String JSON_PROPERTY_EXTENT = "extent";
  private Extent extent;

  public static final String JSON_PROPERTY_ORIGIN = "origin";
  private Origin origin;

  public static final String JSON_PROPERTY_ISIZE = "isize";
  private ISize isize;

  public static final String JSON_PROPERTY_DATA_IDENTIFIER = "dataIdentifier";
  private List<DataIdentifier> dataIdentifier;

  public static final String JSON_PROPERTY_TIMES = "times";
  private List<Double> times;

  public Shape() { 
  }

  public Shape extent(Extent extent) {
    this.extent = extent;
    return this;
  }

   /**
   * Get extent
   * @return extent
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Extent getExtent() {
    return extent;
  }


  @JsonProperty(JSON_PROPERTY_EXTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtent(Extent extent) {
    this.extent = extent;
  }


  public Shape origin(Origin origin) {
    this.origin = origin;
    return this;
  }

   /**
   * Get origin
   * @return origin
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORIGIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Origin getOrigin() {
    return origin;
  }


  @JsonProperty(JSON_PROPERTY_ORIGIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrigin(Origin origin) {
    this.origin = origin;
  }


  public Shape isize(ISize isize) {
    this.isize = isize;
    return this;
  }

   /**
   * Get isize
   * @return isize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ISIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ISize getIsize() {
    return isize;
  }


  @JsonProperty(JSON_PROPERTY_ISIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsize(ISize isize) {
    this.isize = isize;
  }


  public Shape dataIdentifier(List<DataIdentifier> dataIdentifier) {
    this.dataIdentifier = dataIdentifier;
    return this;
  }

  public Shape addDataIdentifierItem(DataIdentifier dataIdentifierItem) {
    if (this.dataIdentifier == null) {
      this.dataIdentifier = new ArrayList<>();
    }
    this.dataIdentifier.add(dataIdentifierItem);
    return this;
  }

   /**
   * Get dataIdentifier
   * @return dataIdentifier
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATA_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DataIdentifier> getDataIdentifier() {
    return dataIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_DATA_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDataIdentifier(List<DataIdentifier> dataIdentifier) {
    this.dataIdentifier = dataIdentifier;
  }


  public Shape times(List<Double> times) {
    this.times = times;
    return this;
  }

  public Shape addTimesItem(Double timesItem) {
    if (this.times == null) {
      this.times = new ArrayList<>();
    }
    this.times.add(timesItem);
    return this;
  }

   /**
   * Get times
   * @return times
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Double> getTimes() {
    return times;
  }


  @JsonProperty(JSON_PROPERTY_TIMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimes(List<Double> times) {
    this.times = times;
  }


  /**
   * Return true if this Shape object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Shape shape = (Shape) o;
    return Objects.equals(this.extent, shape.extent) &&
        Objects.equals(this.origin, shape.origin) &&
        Objects.equals(this.isize, shape.isize) &&
        Objects.equals(this.dataIdentifier, shape.dataIdentifier) &&
        Objects.equals(this.times, shape.times);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extent, origin, isize, dataIdentifier, times);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Shape {\n");
    sb.append("    extent: ").append(toIndentedString(extent)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    isize: ").append(toIndentedString(isize)).append("\n");
    sb.append("    dataIdentifier: ").append(toIndentedString(dataIdentifier)).append("\n");
    sb.append("    times: ").append(toIndentedString(times)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `extent` to the URL query string
    if (getExtent() != null) {
      joiner.add(getExtent().toUrlQueryString(prefix + "extent" + suffix));
    }

    // add `origin` to the URL query string
    if (getOrigin() != null) {
      joiner.add(getOrigin().toUrlQueryString(prefix + "origin" + suffix));
    }

    // add `isize` to the URL query string
    if (getIsize() != null) {
      joiner.add(getIsize().toUrlQueryString(prefix + "isize" + suffix));
    }

    // add `dataIdentifier` to the URL query string
    if (getDataIdentifier() != null) {
      for (int i = 0; i < getDataIdentifier().size(); i++) {
        if (getDataIdentifier().get(i) != null) {
          joiner.add(getDataIdentifier().get(i).toUrlQueryString(String.format("%sdataIdentifier%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `times` to the URL query string
    if (getTimes() != null) {
      for (int i = 0; i < getTimes().size(); i++) {
        joiner.add(String.format("%stimes%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getTimes().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

