/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.vcell.restclient.model.VariableDomain;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * VariableType
 */
@JsonPropertyOrder({
  VariableType.JSON_PROPERTY_TYPE,
  VariableType.JSON_PROPERTY_VARIABLE_DOMAIN,
  VariableType.JSON_PROPERTY_NAME,
  VariableType.JSON_PROPERTY_UNITS,
  VariableType.JSON_PROPERTY_LABEL,
  VariableType.JSON_PROPERTY_LEGACY_WARN,
  VariableType.JSON_PROPERTY_DEFAULT_LABEL,
  VariableType.JSON_PROPERTY_DEFAULT_UNITS,
  VariableType.JSON_PROPERTY_TYPE_NAME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class VariableType {
  public static final String JSON_PROPERTY_TYPE = "type";
  private Integer type;

  public static final String JSON_PROPERTY_VARIABLE_DOMAIN = "variableDomain";
  private VariableDomain variableDomain;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_UNITS = "units";
  private String units;

  public static final String JSON_PROPERTY_LABEL = "label";
  private String label;

  public static final String JSON_PROPERTY_LEGACY_WARN = "legacyWarn";
  private Boolean legacyWarn;

  public static final String JSON_PROPERTY_DEFAULT_LABEL = "defaultLabel";
  private String defaultLabel;

  public static final String JSON_PROPERTY_DEFAULT_UNITS = "defaultUnits";
  private String defaultUnits;

  public static final String JSON_PROPERTY_TYPE_NAME = "typeName";
  private String typeName;

  public VariableType() { 
  }

  public VariableType type(Integer type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(Integer type) {
    this.type = type;
  }


  public VariableType variableDomain(VariableDomain variableDomain) {
    this.variableDomain = variableDomain;
    return this;
  }

   /**
   * Get variableDomain
   * @return variableDomain
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VARIABLE_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VariableDomain getVariableDomain() {
    return variableDomain;
  }


  @JsonProperty(JSON_PROPERTY_VARIABLE_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVariableDomain(VariableDomain variableDomain) {
    this.variableDomain = variableDomain;
  }


  public VariableType name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public VariableType units(String units) {
    this.units = units;
    return this;
  }

   /**
   * Get units
   * @return units
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUnits() {
    return units;
  }


  @JsonProperty(JSON_PROPERTY_UNITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnits(String units) {
    this.units = units;
  }


  public VariableType label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLabel() {
    return label;
  }


  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabel(String label) {
    this.label = label;
  }


  public VariableType legacyWarn(Boolean legacyWarn) {
    this.legacyWarn = legacyWarn;
    return this;
  }

   /**
   * Get legacyWarn
   * @return legacyWarn
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LEGACY_WARN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLegacyWarn() {
    return legacyWarn;
  }


  @JsonProperty(JSON_PROPERTY_LEGACY_WARN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLegacyWarn(Boolean legacyWarn) {
    this.legacyWarn = legacyWarn;
  }


  public VariableType defaultLabel(String defaultLabel) {
    this.defaultLabel = defaultLabel;
    return this;
  }

   /**
   * Get defaultLabel
   * @return defaultLabel
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDefaultLabel() {
    return defaultLabel;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultLabel(String defaultLabel) {
    this.defaultLabel = defaultLabel;
  }


  public VariableType defaultUnits(String defaultUnits) {
    this.defaultUnits = defaultUnits;
    return this;
  }

   /**
   * Get defaultUnits
   * @return defaultUnits
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_UNITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDefaultUnits() {
    return defaultUnits;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_UNITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultUnits(String defaultUnits) {
    this.defaultUnits = defaultUnits;
  }


  public VariableType typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

   /**
   * Get typeName
   * @return typeName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTypeName() {
    return typeName;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


  /**
   * Return true if this VariableType object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VariableType variableType = (VariableType) o;
    return Objects.equals(this.type, variableType.type) &&
        Objects.equals(this.variableDomain, variableType.variableDomain) &&
        Objects.equals(this.name, variableType.name) &&
        Objects.equals(this.units, variableType.units) &&
        Objects.equals(this.label, variableType.label) &&
        Objects.equals(this.legacyWarn, variableType.legacyWarn) &&
        Objects.equals(this.defaultLabel, variableType.defaultLabel) &&
        Objects.equals(this.defaultUnits, variableType.defaultUnits) &&
        Objects.equals(this.typeName, variableType.typeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, variableDomain, name, units, label, legacyWarn, defaultLabel, defaultUnits, typeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VariableType {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    variableDomain: ").append(toIndentedString(variableDomain)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    legacyWarn: ").append(toIndentedString(legacyWarn)).append("\n");
    sb.append("    defaultLabel: ").append(toIndentedString(defaultLabel)).append("\n");
    sb.append("    defaultUnits: ").append(toIndentedString(defaultUnits)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `variableDomain` to the URL query string
    if (getVariableDomain() != null) {
      joiner.add(String.format("%svariableDomain%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVariableDomain()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `units` to the URL query string
    if (getUnits() != null) {
      joiner.add(String.format("%sunits%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUnits()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `label` to the URL query string
    if (getLabel() != null) {
      joiner.add(String.format("%slabel%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLabel()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `legacyWarn` to the URL query string
    if (getLegacyWarn() != null) {
      joiner.add(String.format("%slegacyWarn%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLegacyWarn()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `defaultLabel` to the URL query string
    if (getDefaultLabel() != null) {
      joiner.add(String.format("%sdefaultLabel%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDefaultLabel()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `defaultUnits` to the URL query string
    if (getDefaultUnits() != null) {
      joiner.add(String.format("%sdefaultUnits%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDefaultUnits()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `typeName` to the URL query string
    if (getTypeName() != null) {
      joiner.add(String.format("%stypeName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTypeName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

