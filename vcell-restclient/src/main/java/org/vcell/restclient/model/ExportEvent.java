/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.vcell.restclient.model.ExportProgressType;
import org.vcell.restclient.model.HumanReadableExportData;
import org.vcell.restclient.model.User;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ExportEvent
 */
@JsonPropertyOrder({
  ExportEvent.JSON_PROPERTY_EVENT_TYPE,
  ExportEvent.JSON_PROPERTY_PROGRESS,
  ExportEvent.JSON_PROPERTY_FORMAT,
  ExportEvent.JSON_PROPERTY_LOCATION,
  ExportEvent.JSON_PROPERTY_USER,
  ExportEvent.JSON_PROPERTY_JOB_I_D,
  ExportEvent.JSON_PROPERTY_DATA_KEY,
  ExportEvent.JSON_PROPERTY_DATA_ID_STRING,
  ExportEvent.JSON_PROPERTY_HUMAN_READABLE_DATA
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ExportEvent {
  public static final String JSON_PROPERTY_EVENT_TYPE = "eventType";
  private ExportProgressType eventType;

  public static final String JSON_PROPERTY_PROGRESS = "progress";
  private Double progress;

  public static final String JSON_PROPERTY_FORMAT = "format";
  private String format;

  public static final String JSON_PROPERTY_LOCATION = "location";
  private String location;

  public static final String JSON_PROPERTY_USER = "user";
  private User user;

  public static final String JSON_PROPERTY_JOB_I_D = "jobID";
  private Long jobID;

  public static final String JSON_PROPERTY_DATA_KEY = "dataKey";
  private String dataKey;

  public static final String JSON_PROPERTY_DATA_ID_STRING = "dataIdString";
  private String dataIdString;

  public static final String JSON_PROPERTY_HUMAN_READABLE_DATA = "humanReadableData";
  private HumanReadableExportData humanReadableData;

  public ExportEvent() { 
  }

  public ExportEvent eventType(ExportProgressType eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * Get eventType
   * @return eventType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExportProgressType getEventType() {
    return eventType;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventType(ExportProgressType eventType) {
    this.eventType = eventType;
  }


  public ExportEvent progress(Double progress) {
    this.progress = progress;
    return this;
  }

   /**
   * Get progress
   * @return progress
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROGRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getProgress() {
    return progress;
  }


  @JsonProperty(JSON_PROPERTY_PROGRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProgress(Double progress) {
    this.progress = progress;
  }


  public ExportEvent format(String format) {
    this.format = format;
    return this;
  }

   /**
   * Get format
   * @return format
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFormat() {
    return format;
  }


  @JsonProperty(JSON_PROPERTY_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFormat(String format) {
    this.format = format;
  }


  public ExportEvent location(String location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLocation() {
    return location;
  }


  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocation(String location) {
    this.location = location;
  }


  public ExportEvent user(User user) {
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public User getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(User user) {
    this.user = user;
  }


  public ExportEvent jobID(Long jobID) {
    this.jobID = jobID;
    return this;
  }

   /**
   * Get jobID
   * @return jobID
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_JOB_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getJobID() {
    return jobID;
  }


  @JsonProperty(JSON_PROPERTY_JOB_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setJobID(Long jobID) {
    this.jobID = jobID;
  }


  public ExportEvent dataKey(String dataKey) {
    this.dataKey = dataKey;
    return this;
  }

   /**
   * Get dataKey
   * @return dataKey
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATA_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDataKey() {
    return dataKey;
  }


  @JsonProperty(JSON_PROPERTY_DATA_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDataKey(String dataKey) {
    this.dataKey = dataKey;
  }


  public ExportEvent dataIdString(String dataIdString) {
    this.dataIdString = dataIdString;
    return this;
  }

   /**
   * Get dataIdString
   * @return dataIdString
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATA_ID_STRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDataIdString() {
    return dataIdString;
  }


  @JsonProperty(JSON_PROPERTY_DATA_ID_STRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDataIdString(String dataIdString) {
    this.dataIdString = dataIdString;
  }


  public ExportEvent humanReadableData(HumanReadableExportData humanReadableData) {
    this.humanReadableData = humanReadableData;
    return this;
  }

   /**
   * Get humanReadableData
   * @return humanReadableData
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HUMAN_READABLE_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public HumanReadableExportData getHumanReadableData() {
    return humanReadableData;
  }


  @JsonProperty(JSON_PROPERTY_HUMAN_READABLE_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHumanReadableData(HumanReadableExportData humanReadableData) {
    this.humanReadableData = humanReadableData;
  }


  /**
   * Return true if this ExportEvent object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportEvent exportEvent = (ExportEvent) o;
    return Objects.equals(this.eventType, exportEvent.eventType) &&
        Objects.equals(this.progress, exportEvent.progress) &&
        Objects.equals(this.format, exportEvent.format) &&
        Objects.equals(this.location, exportEvent.location) &&
        Objects.equals(this.user, exportEvent.user) &&
        Objects.equals(this.jobID, exportEvent.jobID) &&
        Objects.equals(this.dataKey, exportEvent.dataKey) &&
        Objects.equals(this.dataIdString, exportEvent.dataIdString) &&
        Objects.equals(this.humanReadableData, exportEvent.humanReadableData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventType, progress, format, location, user, jobID, dataKey, dataIdString, humanReadableData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportEvent {\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    jobID: ").append(toIndentedString(jobID)).append("\n");
    sb.append("    dataKey: ").append(toIndentedString(dataKey)).append("\n");
    sb.append("    dataIdString: ").append(toIndentedString(dataIdString)).append("\n");
    sb.append("    humanReadableData: ").append(toIndentedString(humanReadableData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `eventType` to the URL query string
    if (getEventType() != null) {
      joiner.add(String.format("%seventType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEventType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `progress` to the URL query string
    if (getProgress() != null) {
      joiner.add(String.format("%sprogress%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProgress()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `format` to the URL query string
    if (getFormat() != null) {
      joiner.add(String.format("%sformat%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFormat()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `location` to the URL query string
    if (getLocation() != null) {
      joiner.add(String.format("%slocation%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLocation()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `user` to the URL query string
    if (getUser() != null) {
      joiner.add(getUser().toUrlQueryString(prefix + "user" + suffix));
    }

    // add `jobID` to the URL query string
    if (getJobID() != null) {
      joiner.add(String.format("%sjobID%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getJobID()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `dataKey` to the URL query string
    if (getDataKey() != null) {
      joiner.add(String.format("%sdataKey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDataKey()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `dataIdString` to the URL query string
    if (getDataIdString() != null) {
      joiner.add(String.format("%sdataIdString%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDataIdString()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `humanReadableData` to the URL query string
    if (getHumanReadableData() != null) {
      joiner.add(getHumanReadableData().toUrlQueryString(prefix + "humanReadableData" + suffix));
    }

    return joiner.toString();
  }
}

