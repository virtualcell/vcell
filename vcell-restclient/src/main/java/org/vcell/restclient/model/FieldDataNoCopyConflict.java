/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.vcell.restclient.model.ExternalDataIdentifier;
import org.vcell.restclient.model.KeyValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * FieldDataNoCopyConflict
 */
@JsonPropertyOrder({
  FieldDataNoCopyConflict.JSON_PROPERTY_OLD_NAME_NEW_I_D_HASH,
  FieldDataNoCopyConflict.JSON_PROPERTY_OLD_NAME_OLD_EXT_DATA_I_D_KEY_HASH
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FieldDataNoCopyConflict {
  public static final String JSON_PROPERTY_OLD_NAME_NEW_I_D_HASH = "oldNameNewIDHash";
  private Map<String, ExternalDataIdentifier> oldNameNewIDHash = new HashMap<>();

  public static final String JSON_PROPERTY_OLD_NAME_OLD_EXT_DATA_I_D_KEY_HASH = "oldNameOldExtDataIDKeyHash";
  private Map<String, KeyValue> oldNameOldExtDataIDKeyHash = new HashMap<>();

  public FieldDataNoCopyConflict() { 
  }

  public FieldDataNoCopyConflict oldNameNewIDHash(Map<String, ExternalDataIdentifier> oldNameNewIDHash) {
    this.oldNameNewIDHash = oldNameNewIDHash;
    return this;
  }

  public FieldDataNoCopyConflict putOldNameNewIDHashItem(String key, ExternalDataIdentifier oldNameNewIDHashItem) {
    if (this.oldNameNewIDHash == null) {
      this.oldNameNewIDHash = new HashMap<>();
    }
    this.oldNameNewIDHash.put(key, oldNameNewIDHashItem);
    return this;
  }

   /**
   * Get oldNameNewIDHash
   * @return oldNameNewIDHash
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OLD_NAME_NEW_I_D_HASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, ExternalDataIdentifier> getOldNameNewIDHash() {
    return oldNameNewIDHash;
  }


  @JsonProperty(JSON_PROPERTY_OLD_NAME_NEW_I_D_HASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOldNameNewIDHash(Map<String, ExternalDataIdentifier> oldNameNewIDHash) {
    this.oldNameNewIDHash = oldNameNewIDHash;
  }


  public FieldDataNoCopyConflict oldNameOldExtDataIDKeyHash(Map<String, KeyValue> oldNameOldExtDataIDKeyHash) {
    this.oldNameOldExtDataIDKeyHash = oldNameOldExtDataIDKeyHash;
    return this;
  }

  public FieldDataNoCopyConflict putOldNameOldExtDataIDKeyHashItem(String key, KeyValue oldNameOldExtDataIDKeyHashItem) {
    if (this.oldNameOldExtDataIDKeyHash == null) {
      this.oldNameOldExtDataIDKeyHash = new HashMap<>();
    }
    this.oldNameOldExtDataIDKeyHash.put(key, oldNameOldExtDataIDKeyHashItem);
    return this;
  }

   /**
   * Get oldNameOldExtDataIDKeyHash
   * @return oldNameOldExtDataIDKeyHash
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OLD_NAME_OLD_EXT_DATA_I_D_KEY_HASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, KeyValue> getOldNameOldExtDataIDKeyHash() {
    return oldNameOldExtDataIDKeyHash;
  }


  @JsonProperty(JSON_PROPERTY_OLD_NAME_OLD_EXT_DATA_I_D_KEY_HASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOldNameOldExtDataIDKeyHash(Map<String, KeyValue> oldNameOldExtDataIDKeyHash) {
    this.oldNameOldExtDataIDKeyHash = oldNameOldExtDataIDKeyHash;
  }


  /**
   * Return true if this FieldDataNoCopyConflict object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldDataNoCopyConflict fieldDataNoCopyConflict = (FieldDataNoCopyConflict) o;
    return Objects.equals(this.oldNameNewIDHash, fieldDataNoCopyConflict.oldNameNewIDHash) &&
        Objects.equals(this.oldNameOldExtDataIDKeyHash, fieldDataNoCopyConflict.oldNameOldExtDataIDKeyHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oldNameNewIDHash, oldNameOldExtDataIDKeyHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldDataNoCopyConflict {\n");
    sb.append("    oldNameNewIDHash: ").append(toIndentedString(oldNameNewIDHash)).append("\n");
    sb.append("    oldNameOldExtDataIDKeyHash: ").append(toIndentedString(oldNameOldExtDataIDKeyHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `oldNameNewIDHash` to the URL query string
    if (getOldNameNewIDHash() != null) {
      for (String _key : getOldNameNewIDHash().keySet()) {
        if (getOldNameNewIDHash().get(_key) != null) {
          joiner.add(getOldNameNewIDHash().get(_key).toUrlQueryString(String.format("%soldNameNewIDHash%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix))));
        }
      }
    }

    // add `oldNameOldExtDataIDKeyHash` to the URL query string
    if (getOldNameOldExtDataIDKeyHash() != null) {
      for (String _key : getOldNameOldExtDataIDKeyHash().keySet()) {
        if (getOldNameOldExtDataIDKeyHash().get(_key) != null) {
          joiner.add(getOldNameOldExtDataIDKeyHash().get(_key).toUrlQueryString(String.format("%soldNameOldExtDataIDKeyHash%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

