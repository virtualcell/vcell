/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * HumanReadableExportData
 */
@JsonPropertyOrder({
  HumanReadableExportData.JSON_PROPERTY_SIMULATION_NAME,
  HumanReadableExportData.JSON_PROPERTY_BIOMODEL_NAME,
  HumanReadableExportData.JSON_PROPERTY_APPLICATION_NAME,
  HumanReadableExportData.JSON_PROPERTY_DIFFERENT_PARAMETER_VALUES,
  HumanReadableExportData.JSON_PROPERTY_APPLICATION_TYPE,
  HumanReadableExportData.JSON_PROPERTY_SERVER_SAVED_FILE_NAME,
  HumanReadableExportData.JSON_PROPERTY_NON_SPATIAL,
  HumanReadableExportData.JSON_PROPERTY_SUB_VOLUME,
  HumanReadableExportData.JSON_PROPERTY_Z_SLICES,
  HumanReadableExportData.JSON_PROPERTY_T_SLICES,
  HumanReadableExportData.JSON_PROPERTY_NUM_CHANNELS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class HumanReadableExportData {
  public static final String JSON_PROPERTY_SIMULATION_NAME = "simulationName";
  private String simulationName;

  public static final String JSON_PROPERTY_BIOMODEL_NAME = "biomodelName";
  private String biomodelName;

  public static final String JSON_PROPERTY_APPLICATION_NAME = "applicationName";
  private String applicationName;

  public static final String JSON_PROPERTY_DIFFERENT_PARAMETER_VALUES = "differentParameterValues";
  private List<String> differentParameterValues;

  public static final String JSON_PROPERTY_APPLICATION_TYPE = "applicationType";
  private String applicationType;

  public static final String JSON_PROPERTY_SERVER_SAVED_FILE_NAME = "serverSavedFileName";
  private String serverSavedFileName;

  public static final String JSON_PROPERTY_NON_SPATIAL = "nonSpatial";
  private Boolean nonSpatial;

  public static final String JSON_PROPERTY_SUB_VOLUME = "subVolume";
  private Map<String, String> subVolume = new HashMap<>();

  public static final String JSON_PROPERTY_Z_SLICES = "zSlices";
  private Integer zSlices;

  public static final String JSON_PROPERTY_T_SLICES = "tSlices";
  private Integer tSlices;

  public static final String JSON_PROPERTY_NUM_CHANNELS = "numChannels";
  private Integer numChannels;

  public HumanReadableExportData() { 
  }

  public HumanReadableExportData simulationName(String simulationName) {
    this.simulationName = simulationName;
    return this;
  }

   /**
   * Get simulationName
   * @return simulationName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIMULATION_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSimulationName() {
    return simulationName;
  }


  @JsonProperty(JSON_PROPERTY_SIMULATION_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSimulationName(String simulationName) {
    this.simulationName = simulationName;
  }


  public HumanReadableExportData biomodelName(String biomodelName) {
    this.biomodelName = biomodelName;
    return this;
  }

   /**
   * Get biomodelName
   * @return biomodelName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BIOMODEL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBiomodelName() {
    return biomodelName;
  }


  @JsonProperty(JSON_PROPERTY_BIOMODEL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBiomodelName(String biomodelName) {
    this.biomodelName = biomodelName;
  }


  public HumanReadableExportData applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

   /**
   * Get applicationName
   * @return applicationName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APPLICATION_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getApplicationName() {
    return applicationName;
  }


  @JsonProperty(JSON_PROPERTY_APPLICATION_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }


  public HumanReadableExportData differentParameterValues(List<String> differentParameterValues) {
    this.differentParameterValues = differentParameterValues;
    return this;
  }

  public HumanReadableExportData addDifferentParameterValuesItem(String differentParameterValuesItem) {
    if (this.differentParameterValues == null) {
      this.differentParameterValues = new ArrayList<>();
    }
    this.differentParameterValues.add(differentParameterValuesItem);
    return this;
  }

   /**
   * Get differentParameterValues
   * @return differentParameterValues
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIFFERENT_PARAMETER_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getDifferentParameterValues() {
    return differentParameterValues;
  }


  @JsonProperty(JSON_PROPERTY_DIFFERENT_PARAMETER_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDifferentParameterValues(List<String> differentParameterValues) {
    this.differentParameterValues = differentParameterValues;
  }


  public HumanReadableExportData applicationType(String applicationType) {
    this.applicationType = applicationType;
    return this;
  }

   /**
   * Get applicationType
   * @return applicationType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APPLICATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getApplicationType() {
    return applicationType;
  }


  @JsonProperty(JSON_PROPERTY_APPLICATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApplicationType(String applicationType) {
    this.applicationType = applicationType;
  }


  public HumanReadableExportData serverSavedFileName(String serverSavedFileName) {
    this.serverSavedFileName = serverSavedFileName;
    return this;
  }

   /**
   * Get serverSavedFileName
   * @return serverSavedFileName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVER_SAVED_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getServerSavedFileName() {
    return serverSavedFileName;
  }


  @JsonProperty(JSON_PROPERTY_SERVER_SAVED_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServerSavedFileName(String serverSavedFileName) {
    this.serverSavedFileName = serverSavedFileName;
  }


  public HumanReadableExportData nonSpatial(Boolean nonSpatial) {
    this.nonSpatial = nonSpatial;
    return this;
  }

   /**
   * Get nonSpatial
   * @return nonSpatial
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NON_SPATIAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getNonSpatial() {
    return nonSpatial;
  }


  @JsonProperty(JSON_PROPERTY_NON_SPATIAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNonSpatial(Boolean nonSpatial) {
    this.nonSpatial = nonSpatial;
  }


  public HumanReadableExportData subVolume(Map<String, String> subVolume) {
    this.subVolume = subVolume;
    return this;
  }

  public HumanReadableExportData putSubVolumeItem(String key, String subVolumeItem) {
    if (this.subVolume == null) {
      this.subVolume = new HashMap<>();
    }
    this.subVolume.put(key, subVolumeItem);
    return this;
  }

   /**
   * Get subVolume
   * @return subVolume
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUB_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getSubVolume() {
    return subVolume;
  }


  @JsonProperty(JSON_PROPERTY_SUB_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubVolume(Map<String, String> subVolume) {
    this.subVolume = subVolume;
  }


  public HumanReadableExportData zSlices(Integer zSlices) {
    this.zSlices = zSlices;
    return this;
  }

   /**
   * Get zSlices
   * @return zSlices
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_Z_SLICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getzSlices() {
    return zSlices;
  }


  @JsonProperty(JSON_PROPERTY_Z_SLICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setzSlices(Integer zSlices) {
    this.zSlices = zSlices;
  }


  public HumanReadableExportData tSlices(Integer tSlices) {
    this.tSlices = tSlices;
    return this;
  }

   /**
   * Get tSlices
   * @return tSlices
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_T_SLICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer gettSlices() {
    return tSlices;
  }


  @JsonProperty(JSON_PROPERTY_T_SLICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void settSlices(Integer tSlices) {
    this.tSlices = tSlices;
  }


  public HumanReadableExportData numChannels(Integer numChannels) {
    this.numChannels = numChannels;
    return this;
  }

   /**
   * Get numChannels
   * @return numChannels
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_CHANNELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumChannels() {
    return numChannels;
  }


  @JsonProperty(JSON_PROPERTY_NUM_CHANNELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumChannels(Integer numChannels) {
    this.numChannels = numChannels;
  }


  /**
   * Return true if this HumanReadableExportData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HumanReadableExportData humanReadableExportData = (HumanReadableExportData) o;
    return Objects.equals(this.simulationName, humanReadableExportData.simulationName) &&
        Objects.equals(this.biomodelName, humanReadableExportData.biomodelName) &&
        Objects.equals(this.applicationName, humanReadableExportData.applicationName) &&
        Objects.equals(this.differentParameterValues, humanReadableExportData.differentParameterValues) &&
        Objects.equals(this.applicationType, humanReadableExportData.applicationType) &&
        Objects.equals(this.serverSavedFileName, humanReadableExportData.serverSavedFileName) &&
        Objects.equals(this.nonSpatial, humanReadableExportData.nonSpatial) &&
        Objects.equals(this.subVolume, humanReadableExportData.subVolume) &&
        Objects.equals(this.zSlices, humanReadableExportData.zSlices) &&
        Objects.equals(this.tSlices, humanReadableExportData.tSlices) &&
        Objects.equals(this.numChannels, humanReadableExportData.numChannels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(simulationName, biomodelName, applicationName, differentParameterValues, applicationType, serverSavedFileName, nonSpatial, subVolume, zSlices, tSlices, numChannels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HumanReadableExportData {\n");
    sb.append("    simulationName: ").append(toIndentedString(simulationName)).append("\n");
    sb.append("    biomodelName: ").append(toIndentedString(biomodelName)).append("\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    differentParameterValues: ").append(toIndentedString(differentParameterValues)).append("\n");
    sb.append("    applicationType: ").append(toIndentedString(applicationType)).append("\n");
    sb.append("    serverSavedFileName: ").append(toIndentedString(serverSavedFileName)).append("\n");
    sb.append("    nonSpatial: ").append(toIndentedString(nonSpatial)).append("\n");
    sb.append("    subVolume: ").append(toIndentedString(subVolume)).append("\n");
    sb.append("    zSlices: ").append(toIndentedString(zSlices)).append("\n");
    sb.append("    tSlices: ").append(toIndentedString(tSlices)).append("\n");
    sb.append("    numChannels: ").append(toIndentedString(numChannels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `simulationName` to the URL query string
    if (getSimulationName() != null) {
      joiner.add(String.format("%ssimulationName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSimulationName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `biomodelName` to the URL query string
    if (getBiomodelName() != null) {
      joiner.add(String.format("%sbiomodelName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBiomodelName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `applicationName` to the URL query string
    if (getApplicationName() != null) {
      joiner.add(String.format("%sapplicationName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getApplicationName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `differentParameterValues` to the URL query string
    if (getDifferentParameterValues() != null) {
      for (int i = 0; i < getDifferentParameterValues().size(); i++) {
        joiner.add(String.format("%sdifferentParameterValues%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getDifferentParameterValues().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `applicationType` to the URL query string
    if (getApplicationType() != null) {
      joiner.add(String.format("%sapplicationType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getApplicationType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `serverSavedFileName` to the URL query string
    if (getServerSavedFileName() != null) {
      joiner.add(String.format("%sserverSavedFileName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getServerSavedFileName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `nonSpatial` to the URL query string
    if (getNonSpatial() != null) {
      joiner.add(String.format("%snonSpatial%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNonSpatial()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `subVolume` to the URL query string
    if (getSubVolume() != null) {
      for (String _key : getSubVolume().keySet()) {
        joiner.add(String.format("%ssubVolume%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getSubVolume().get(_key), URLEncoder.encode(String.valueOf(getSubVolume().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `zSlices` to the URL query string
    if (getzSlices() != null) {
      joiner.add(String.format("%szSlices%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getzSlices()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `tSlices` to the URL query string
    if (gettSlices() != null) {
      joiner.add(String.format("%stSlices%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(gettSlices()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `numChannels` to the URL query string
    if (getNumChannels() != null) {
      joiner.add(String.format("%snumChannels%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumChannels()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

