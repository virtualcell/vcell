/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * VersionFlag
 */
@JsonPropertyOrder({
  VersionFlag.JSON_PROPERTY_VERSION_FLAG,
  VersionFlag.JSON_PROPERTY_INT_VALUE,
  VersionFlag.JSON_PROPERTY_ARCHIVED,
  VersionFlag.JSON_PROPERTY_CURRENT,
  VersionFlag.JSON_PROPERTY_PUBLISHED
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class VersionFlag {
  public static final String JSON_PROPERTY_VERSION_FLAG = "versionFlag";
  private Integer versionFlag;

  public static final String JSON_PROPERTY_INT_VALUE = "intValue";
  private Integer intValue;

  public static final String JSON_PROPERTY_ARCHIVED = "archived";
  private Boolean archived;

  public static final String JSON_PROPERTY_CURRENT = "current";
  private Boolean current;

  public static final String JSON_PROPERTY_PUBLISHED = "published";
  private Boolean published;

  public VersionFlag() { 
  }

  public VersionFlag versionFlag(Integer versionFlag) {
    this.versionFlag = versionFlag;
    return this;
  }

   /**
   * Get versionFlag
   * @return versionFlag
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getVersionFlag() {
    return versionFlag;
  }


  @JsonProperty(JSON_PROPERTY_VERSION_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersionFlag(Integer versionFlag) {
    this.versionFlag = versionFlag;
  }


  public VersionFlag intValue(Integer intValue) {
    this.intValue = intValue;
    return this;
  }

   /**
   * Get intValue
   * @return intValue
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INT_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getIntValue() {
    return intValue;
  }


  @JsonProperty(JSON_PROPERTY_INT_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIntValue(Integer intValue) {
    this.intValue = intValue;
  }


  public VersionFlag archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

   /**
   * Get archived
   * @return archived
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARCHIVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getArchived() {
    return archived;
  }


  @JsonProperty(JSON_PROPERTY_ARCHIVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public VersionFlag current(Boolean current) {
    this.current = current;
    return this;
  }

   /**
   * Get current
   * @return current
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCurrent() {
    return current;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrent(Boolean current) {
    this.current = current;
  }


  public VersionFlag published(Boolean published) {
    this.published = published;
    return this;
  }

   /**
   * Get published
   * @return published
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLISHED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPublished() {
    return published;
  }


  @JsonProperty(JSON_PROPERTY_PUBLISHED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublished(Boolean published) {
    this.published = published;
  }


  /**
   * Return true if this VersionFlag object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionFlag versionFlag = (VersionFlag) o;
    return Objects.equals(this.versionFlag, versionFlag.versionFlag) &&
        Objects.equals(this.intValue, versionFlag.intValue) &&
        Objects.equals(this.archived, versionFlag.archived) &&
        Objects.equals(this.current, versionFlag.current) &&
        Objects.equals(this.published, versionFlag.published);
  }

  @Override
  public int hashCode() {
    return Objects.hash(versionFlag, intValue, archived, current, published);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionFlag {\n");
    sb.append("    versionFlag: ").append(toIndentedString(versionFlag)).append("\n");
    sb.append("    intValue: ").append(toIndentedString(intValue)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `versionFlag` to the URL query string
    if (getVersionFlag() != null) {
      joiner.add(String.format("%sversionFlag%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVersionFlag()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `intValue` to the URL query string
    if (getIntValue() != null) {
      joiner.add(String.format("%sintValue%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIntValue()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `archived` to the URL query string
    if (getArchived() != null) {
      joiner.add(String.format("%sarchived%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getArchived()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `current` to the URL query string
    if (getCurrent() != null) {
      joiner.add(String.format("%scurrent%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCurrent()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `published` to the URL query string
    if (getPublished() != null) {
      joiner.add(String.format("%spublished%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPublished()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

