/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.vcell.restclient.model.Coordinate;
import org.vcell.restclient.model.Curve;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.vcell.restclient.JSON;
/**
 * AnalyticCurve
 */
@JsonPropertyOrder({
  AnalyticCurve.JSON_PROPERTY_TYPE,
  AnalyticCurve.JSON_PROPERTY_EXP_X,
  AnalyticCurve.JSON_PROPERTY_EXP_Y,
  AnalyticCurve.JSON_PROPERTY_EXP_Z,
  AnalyticCurve.JSON_PROPERTY_OFFSET,
  AnalyticCurve.JSON_PROPERTY_ANALYTIC_OFFSET,
  AnalyticCurve.JSON_PROPERTY_DEFAULT_NUM_SAMPLES,
  AnalyticCurve.JSON_PROPERTY_SEGMENT_COUNT,
  AnalyticCurve.JSON_PROPERTY_VALID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)

public class AnalyticCurve extends Curve {
  public static final String JSON_PROPERTY_TYPE = "type";
  private String type = "AnalyticCurve";

  public static final String JSON_PROPERTY_EXP_X = "expX";
  private String expX;

  public static final String JSON_PROPERTY_EXP_Y = "expY";
  private String expY;

  public static final String JSON_PROPERTY_EXP_Z = "expZ";
  private String expZ;

  public static final String JSON_PROPERTY_OFFSET = "offset";
  private Coordinate offset;

  public static final String JSON_PROPERTY_ANALYTIC_OFFSET = "analyticOffset";
  private Coordinate analyticOffset;

  public static final String JSON_PROPERTY_DEFAULT_NUM_SAMPLES = "defaultNumSamples";
  private Integer defaultNumSamples;

  public static final String JSON_PROPERTY_SEGMENT_COUNT = "segmentCount";
  private Integer segmentCount;

  public static final String JSON_PROPERTY_VALID = "valid";
  private Boolean valid;

  public AnalyticCurve() { 
  }

  public AnalyticCurve type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(String type) {
    this.type = type;
  }


  public AnalyticCurve expX(String expX) {
    this.expX = expX;
    return this;
  }

   /**
   * Get expX
   * @return expX
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXP_X)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpX() {
    return expX;
  }


  @JsonProperty(JSON_PROPERTY_EXP_X)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpX(String expX) {
    this.expX = expX;
  }


  public AnalyticCurve expY(String expY) {
    this.expY = expY;
    return this;
  }

   /**
   * Get expY
   * @return expY
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXP_Y)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpY() {
    return expY;
  }


  @JsonProperty(JSON_PROPERTY_EXP_Y)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpY(String expY) {
    this.expY = expY;
  }


  public AnalyticCurve expZ(String expZ) {
    this.expZ = expZ;
    return this;
  }

   /**
   * Get expZ
   * @return expZ
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXP_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpZ() {
    return expZ;
  }


  @JsonProperty(JSON_PROPERTY_EXP_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpZ(String expZ) {
    this.expZ = expZ;
  }


  public AnalyticCurve offset(Coordinate offset) {
    this.offset = offset;
    return this;
  }

   /**
   * Get offset
   * @return offset
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Coordinate getOffset() {
    return offset;
  }


  @JsonProperty(JSON_PROPERTY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOffset(Coordinate offset) {
    this.offset = offset;
  }


  public AnalyticCurve analyticOffset(Coordinate analyticOffset) {
    this.analyticOffset = analyticOffset;
    return this;
  }

   /**
   * Get analyticOffset
   * @return analyticOffset
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ANALYTIC_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Coordinate getAnalyticOffset() {
    return analyticOffset;
  }


  @JsonProperty(JSON_PROPERTY_ANALYTIC_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnalyticOffset(Coordinate analyticOffset) {
    this.analyticOffset = analyticOffset;
  }


  public AnalyticCurve defaultNumSamples(Integer defaultNumSamples) {
    this.defaultNumSamples = defaultNumSamples;
    return this;
  }

   /**
   * Get defaultNumSamples
   * @return defaultNumSamples
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_NUM_SAMPLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDefaultNumSamples() {
    return defaultNumSamples;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_NUM_SAMPLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultNumSamples(Integer defaultNumSamples) {
    this.defaultNumSamples = defaultNumSamples;
  }


  public AnalyticCurve segmentCount(Integer segmentCount) {
    this.segmentCount = segmentCount;
    return this;
  }

   /**
   * Get segmentCount
   * @return segmentCount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEGMENT_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSegmentCount() {
    return segmentCount;
  }


  @JsonProperty(JSON_PROPERTY_SEGMENT_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSegmentCount(Integer segmentCount) {
    this.segmentCount = segmentCount;
  }


  public AnalyticCurve valid(Boolean valid) {
    this.valid = valid;
    return this;
  }

   /**
   * Get valid
   * @return valid
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getValid() {
    return valid;
  }


  @JsonProperty(JSON_PROPERTY_VALID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValid(Boolean valid) {
    this.valid = valid;
  }


  @Override
  public AnalyticCurve bClosed(Boolean bClosed) {
    this.setbClosed(bClosed);
    return this;
  }

  @Override
  public AnalyticCurve description(String description) {
    this.setDescription(description);
    return this;
  }

  @Override
  public AnalyticCurve beginningCoordinate(Coordinate beginningCoordinate) {
    this.setBeginningCoordinate(beginningCoordinate);
    return this;
  }

  @Override
  public AnalyticCurve endingCoordinate(Coordinate endingCoordinate) {
    this.setEndingCoordinate(endingCoordinate);
    return this;
  }

  @Override
  public AnalyticCurve numSamplePoints(Integer numSamplePoints) {
    this.setNumSamplePoints(numSamplePoints);
    return this;
  }

  @Override
  public AnalyticCurve spatialLength(Double spatialLength) {
    this.setSpatialLength(spatialLength);
    return this;
  }

  @Override
  public AnalyticCurve closed(Boolean closed) {
    this.setClosed(closed);
    return this;
  }

  /**
   * Return true if this AnalyticCurve object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyticCurve analyticCurve = (AnalyticCurve) o;
    return Objects.equals(this.type, analyticCurve.type) &&
        Objects.equals(this.expX, analyticCurve.expX) &&
        Objects.equals(this.expY, analyticCurve.expY) &&
        Objects.equals(this.expZ, analyticCurve.expZ) &&
        Objects.equals(this.offset, analyticCurve.offset) &&
        Objects.equals(this.analyticOffset, analyticCurve.analyticOffset) &&
        Objects.equals(this.defaultNumSamples, analyticCurve.defaultNumSamples) &&
        Objects.equals(this.segmentCount, analyticCurve.segmentCount) &&
        Objects.equals(this.valid, analyticCurve.valid) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, expX, expY, expZ, offset, analyticOffset, defaultNumSamples, segmentCount, valid, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyticCurve {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    expX: ").append(toIndentedString(expX)).append("\n");
    sb.append("    expY: ").append(toIndentedString(expY)).append("\n");
    sb.append("    expZ: ").append(toIndentedString(expZ)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    analyticOffset: ").append(toIndentedString(analyticOffset)).append("\n");
    sb.append("    defaultNumSamples: ").append(toIndentedString(defaultNumSamples)).append("\n");
    sb.append("    segmentCount: ").append(toIndentedString(segmentCount)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `bClosed` to the URL query string
    if (getbClosed() != null) {
      joiner.add(String.format("%sbClosed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getbClosed()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `beginningCoordinate` to the URL query string
    if (getBeginningCoordinate() != null) {
      joiner.add(getBeginningCoordinate().toUrlQueryString(prefix + "beginningCoordinate" + suffix));
    }

    // add `defaultNumSamples` to the URL query string
    if (getDefaultNumSamples() != null) {
      joiner.add(String.format("%sdefaultNumSamples%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDefaultNumSamples()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `endingCoordinate` to the URL query string
    if (getEndingCoordinate() != null) {
      joiner.add(getEndingCoordinate().toUrlQueryString(prefix + "endingCoordinate" + suffix));
    }

    // add `numSamplePoints` to the URL query string
    if (getNumSamplePoints() != null) {
      joiner.add(String.format("%snumSamplePoints%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumSamplePoints()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `segmentCount` to the URL query string
    if (getSegmentCount() != null) {
      joiner.add(String.format("%ssegmentCount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSegmentCount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `spatialLength` to the URL query string
    if (getSpatialLength() != null) {
      joiner.add(String.format("%sspatialLength%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSpatialLength()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `closed` to the URL query string
    if (getClosed() != null) {
      joiner.add(String.format("%sclosed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClosed()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `valid` to the URL query string
    if (getValid() != null) {
      joiner.add(String.format("%svalid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getValid()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("AnalyticCurve", AnalyticCurve.class);
  JSON.registerDiscriminator(AnalyticCurve.class, "type", mappings);
}
}

