/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.vcell.restclient.model.GeometryMode;
import org.vcell.restclient.model.SpatialSelection;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * GeometrySpecDTO
 */
@JsonPropertyOrder({
  GeometrySpecDTO.JSON_PROPERTY_SELECTIONS,
  GeometrySpecDTO.JSON_PROPERTY_AXIS,
  GeometrySpecDTO.JSON_PROPERTY_SLICE_NUMBER,
  GeometrySpecDTO.JSON_PROPERTY_GEOMETRY_MODE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GeometrySpecDTO {
  public static final String JSON_PROPERTY_SELECTIONS = "selections";
  private List<SpatialSelection> selections;

  public static final String JSON_PROPERTY_AXIS = "axis";
  private Integer axis;

  public static final String JSON_PROPERTY_SLICE_NUMBER = "sliceNumber";
  private Integer sliceNumber;

  public static final String JSON_PROPERTY_GEOMETRY_MODE = "geometryMode";
  private GeometryMode geometryMode;

  public GeometrySpecDTO() { 
  }

  public GeometrySpecDTO selections(List<SpatialSelection> selections) {
    this.selections = selections;
    return this;
  }

  public GeometrySpecDTO addSelectionsItem(SpatialSelection selectionsItem) {
    if (this.selections == null) {
      this.selections = new ArrayList<>();
    }
    this.selections.add(selectionsItem);
    return this;
  }

   /**
   * Get selections
   * @return selections
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SELECTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SpatialSelection> getSelections() {
    return selections;
  }


  @JsonProperty(JSON_PROPERTY_SELECTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSelections(List<SpatialSelection> selections) {
    this.selections = selections;
  }


  public GeometrySpecDTO axis(Integer axis) {
    this.axis = axis;
    return this;
  }

   /**
   * Get axis
   * @return axis
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AXIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAxis() {
    return axis;
  }


  @JsonProperty(JSON_PROPERTY_AXIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAxis(Integer axis) {
    this.axis = axis;
  }


  public GeometrySpecDTO sliceNumber(Integer sliceNumber) {
    this.sliceNumber = sliceNumber;
    return this;
  }

   /**
   * Get sliceNumber
   * @return sliceNumber
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SLICE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSliceNumber() {
    return sliceNumber;
  }


  @JsonProperty(JSON_PROPERTY_SLICE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSliceNumber(Integer sliceNumber) {
    this.sliceNumber = sliceNumber;
  }


  public GeometrySpecDTO geometryMode(GeometryMode geometryMode) {
    this.geometryMode = geometryMode;
    return this;
  }

   /**
   * Get geometryMode
   * @return geometryMode
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GEOMETRY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public GeometryMode getGeometryMode() {
    return geometryMode;
  }


  @JsonProperty(JSON_PROPERTY_GEOMETRY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGeometryMode(GeometryMode geometryMode) {
    this.geometryMode = geometryMode;
  }


  /**
   * Return true if this GeometrySpecDTO object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeometrySpecDTO geometrySpecDTO = (GeometrySpecDTO) o;
    return Objects.equals(this.selections, geometrySpecDTO.selections) &&
        Objects.equals(this.axis, geometrySpecDTO.axis) &&
        Objects.equals(this.sliceNumber, geometrySpecDTO.sliceNumber) &&
        Objects.equals(this.geometryMode, geometrySpecDTO.geometryMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(selections, axis, sliceNumber, geometryMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeometrySpecDTO {\n");
    sb.append("    selections: ").append(toIndentedString(selections)).append("\n");
    sb.append("    axis: ").append(toIndentedString(axis)).append("\n");
    sb.append("    sliceNumber: ").append(toIndentedString(sliceNumber)).append("\n");
    sb.append("    geometryMode: ").append(toIndentedString(geometryMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `selections` to the URL query string
    if (getSelections() != null) {
      for (int i = 0; i < getSelections().size(); i++) {
        if (getSelections().get(i) != null) {
          joiner.add(getSelections().get(i).toUrlQueryString(String.format("%sselections%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `axis` to the URL query string
    if (getAxis() != null) {
      joiner.add(String.format("%saxis%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAxis()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `sliceNumber` to the URL query string
    if (getSliceNumber() != null) {
      joiner.add(String.format("%ssliceNumber%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSliceNumber()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `geometryMode` to the URL query string
    if (getGeometryMode() != null) {
      joiner.add(String.format("%sgeometryMode%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGeometryMode()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

