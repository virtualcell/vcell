/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.vcell.restclient.model.Coordinate;
import org.vcell.restclient.model.Curve;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.vcell.restclient.JSON;
/**
 * ControlPointCurve
 */
@JsonPropertyOrder({
  ControlPointCurve.JSON_PROPERTY_TYPE,
  ControlPointCurve.JSON_PROPERTY_CONTROL_POINTS,
  ControlPointCurve.JSON_PROPERTY_CONTROL_POINT_COUNT,
  ControlPointCurve.JSON_PROPERTY_CONTROL_POINTS_VECTOR,
  ControlPointCurve.JSON_PROPERTY_MAX_CONTROL_POINTS,
  ControlPointCurve.JSON_PROPERTY_MIN_CONTROL_POINTS,
  ControlPointCurve.JSON_PROPERTY_CONTROL_POINT_ADDABLE,
  ControlPointCurve.JSON_PROPERTY_VALID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = SampledCurve.class, name = "SampledCurve"),
  @JsonSubTypes.Type(value = Spline.class, name = "Spline"),
})

public class ControlPointCurve extends Curve {
  public static final String JSON_PROPERTY_TYPE = "type";
  private String type = "ControlPointCurve";

  public static final String JSON_PROPERTY_CONTROL_POINTS = "controlPoints";
  private List<Coordinate> controlPoints;

  public static final String JSON_PROPERTY_CONTROL_POINT_COUNT = "controlPointCount";
  private Integer controlPointCount;

  public static final String JSON_PROPERTY_CONTROL_POINTS_VECTOR = "controlPointsVector";
  private List<Coordinate> controlPointsVector;

  public static final String JSON_PROPERTY_MAX_CONTROL_POINTS = "maxControlPoints";
  private Integer maxControlPoints;

  public static final String JSON_PROPERTY_MIN_CONTROL_POINTS = "minControlPoints";
  private Integer minControlPoints;

  public static final String JSON_PROPERTY_CONTROL_POINT_ADDABLE = "controlPointAddable";
  private Boolean controlPointAddable;

  public static final String JSON_PROPERTY_VALID = "valid";
  private Boolean valid;

  public ControlPointCurve() { 
  }

  public ControlPointCurve type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(String type) {
    this.type = type;
  }


  public ControlPointCurve controlPoints(List<Coordinate> controlPoints) {
    this.controlPoints = controlPoints;
    return this;
  }

  public ControlPointCurve addControlPointsItem(Coordinate controlPointsItem) {
    if (this.controlPoints == null) {
      this.controlPoints = new ArrayList<>();
    }
    this.controlPoints.add(controlPointsItem);
    return this;
  }

   /**
   * Get controlPoints
   * @return controlPoints
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTROL_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Coordinate> getControlPoints() {
    return controlPoints;
  }


  @JsonProperty(JSON_PROPERTY_CONTROL_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setControlPoints(List<Coordinate> controlPoints) {
    this.controlPoints = controlPoints;
  }


  public ControlPointCurve controlPointCount(Integer controlPointCount) {
    this.controlPointCount = controlPointCount;
    return this;
  }

   /**
   * Get controlPointCount
   * @return controlPointCount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTROL_POINT_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getControlPointCount() {
    return controlPointCount;
  }


  @JsonProperty(JSON_PROPERTY_CONTROL_POINT_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setControlPointCount(Integer controlPointCount) {
    this.controlPointCount = controlPointCount;
  }


  public ControlPointCurve controlPointsVector(List<Coordinate> controlPointsVector) {
    this.controlPointsVector = controlPointsVector;
    return this;
  }

  public ControlPointCurve addControlPointsVectorItem(Coordinate controlPointsVectorItem) {
    if (this.controlPointsVector == null) {
      this.controlPointsVector = new ArrayList<>();
    }
    this.controlPointsVector.add(controlPointsVectorItem);
    return this;
  }

   /**
   * Get controlPointsVector
   * @return controlPointsVector
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTROL_POINTS_VECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Coordinate> getControlPointsVector() {
    return controlPointsVector;
  }


  @JsonProperty(JSON_PROPERTY_CONTROL_POINTS_VECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setControlPointsVector(List<Coordinate> controlPointsVector) {
    this.controlPointsVector = controlPointsVector;
  }


  public ControlPointCurve maxControlPoints(Integer maxControlPoints) {
    this.maxControlPoints = maxControlPoints;
    return this;
  }

   /**
   * Get maxControlPoints
   * @return maxControlPoints
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_CONTROL_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMaxControlPoints() {
    return maxControlPoints;
  }


  @JsonProperty(JSON_PROPERTY_MAX_CONTROL_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxControlPoints(Integer maxControlPoints) {
    this.maxControlPoints = maxControlPoints;
  }


  public ControlPointCurve minControlPoints(Integer minControlPoints) {
    this.minControlPoints = minControlPoints;
    return this;
  }

   /**
   * Get minControlPoints
   * @return minControlPoints
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIN_CONTROL_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMinControlPoints() {
    return minControlPoints;
  }


  @JsonProperty(JSON_PROPERTY_MIN_CONTROL_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinControlPoints(Integer minControlPoints) {
    this.minControlPoints = minControlPoints;
  }


  public ControlPointCurve controlPointAddable(Boolean controlPointAddable) {
    this.controlPointAddable = controlPointAddable;
    return this;
  }

   /**
   * Get controlPointAddable
   * @return controlPointAddable
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTROL_POINT_ADDABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getControlPointAddable() {
    return controlPointAddable;
  }


  @JsonProperty(JSON_PROPERTY_CONTROL_POINT_ADDABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setControlPointAddable(Boolean controlPointAddable) {
    this.controlPointAddable = controlPointAddable;
  }


  public ControlPointCurve valid(Boolean valid) {
    this.valid = valid;
    return this;
  }

   /**
   * Get valid
   * @return valid
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getValid() {
    return valid;
  }


  @JsonProperty(JSON_PROPERTY_VALID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValid(Boolean valid) {
    this.valid = valid;
  }


  @Override
  public ControlPointCurve bClosed(Boolean bClosed) {
    this.setbClosed(bClosed);
    return this;
  }

  @Override
  public ControlPointCurve description(String description) {
    this.setDescription(description);
    return this;
  }

  @Override
  public ControlPointCurve beginningCoordinate(Coordinate beginningCoordinate) {
    this.setBeginningCoordinate(beginningCoordinate);
    return this;
  }

  @Override
  public ControlPointCurve endingCoordinate(Coordinate endingCoordinate) {
    this.setEndingCoordinate(endingCoordinate);
    return this;
  }

  @Override
  public ControlPointCurve numSamplePoints(Integer numSamplePoints) {
    this.setNumSamplePoints(numSamplePoints);
    return this;
  }

  @Override
  public ControlPointCurve spatialLength(Double spatialLength) {
    this.setSpatialLength(spatialLength);
    return this;
  }

  @Override
  public ControlPointCurve closed(Boolean closed) {
    this.setClosed(closed);
    return this;
  }

  /**
   * Return true if this ControlPointCurve object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ControlPointCurve controlPointCurve = (ControlPointCurve) o;
    return Objects.equals(this.type, controlPointCurve.type) &&
        Objects.equals(this.controlPoints, controlPointCurve.controlPoints) &&
        Objects.equals(this.controlPointCount, controlPointCurve.controlPointCount) &&
        Objects.equals(this.controlPointsVector, controlPointCurve.controlPointsVector) &&
        Objects.equals(this.maxControlPoints, controlPointCurve.maxControlPoints) &&
        Objects.equals(this.minControlPoints, controlPointCurve.minControlPoints) &&
        Objects.equals(this.controlPointAddable, controlPointCurve.controlPointAddable) &&
        Objects.equals(this.valid, controlPointCurve.valid) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, controlPoints, controlPointCount, controlPointsVector, maxControlPoints, minControlPoints, controlPointAddable, valid, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ControlPointCurve {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    controlPoints: ").append(toIndentedString(controlPoints)).append("\n");
    sb.append("    controlPointCount: ").append(toIndentedString(controlPointCount)).append("\n");
    sb.append("    controlPointsVector: ").append(toIndentedString(controlPointsVector)).append("\n");
    sb.append("    maxControlPoints: ").append(toIndentedString(maxControlPoints)).append("\n");
    sb.append("    minControlPoints: ").append(toIndentedString(minControlPoints)).append("\n");
    sb.append("    controlPointAddable: ").append(toIndentedString(controlPointAddable)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `bClosed` to the URL query string
    if (getbClosed() != null) {
      joiner.add(String.format("%sbClosed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getbClosed()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `beginningCoordinate` to the URL query string
    if (getBeginningCoordinate() != null) {
      joiner.add(getBeginningCoordinate().toUrlQueryString(prefix + "beginningCoordinate" + suffix));
    }

    // add `defaultNumSamples` to the URL query string
    if (getDefaultNumSamples() != null) {
      joiner.add(String.format("%sdefaultNumSamples%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDefaultNumSamples()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `endingCoordinate` to the URL query string
    if (getEndingCoordinate() != null) {
      joiner.add(getEndingCoordinate().toUrlQueryString(prefix + "endingCoordinate" + suffix));
    }

    // add `numSamplePoints` to the URL query string
    if (getNumSamplePoints() != null) {
      joiner.add(String.format("%snumSamplePoints%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumSamplePoints()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `segmentCount` to the URL query string
    if (getSegmentCount() != null) {
      joiner.add(String.format("%ssegmentCount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSegmentCount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `spatialLength` to the URL query string
    if (getSpatialLength() != null) {
      joiner.add(String.format("%sspatialLength%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSpatialLength()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `closed` to the URL query string
    if (getClosed() != null) {
      joiner.add(String.format("%sclosed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClosed()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `valid` to the URL query string
    if (getValid() != null) {
      joiner.add(String.format("%svalid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getValid()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("SampledCurve", SampledCurve.class);
  mappings.put("Spline", Spline.class);
  mappings.put("ControlPointCurve", ControlPointCurve.class);
  JSON.registerDiscriminator(ControlPointCurve.class, "type", mappings);
}
}

