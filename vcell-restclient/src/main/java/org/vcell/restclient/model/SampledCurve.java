/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.vcell.restclient.model.ControlPointCurve;
import org.vcell.restclient.model.Coordinate;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.vcell.restclient.JSON;
/**
 * SampledCurve
 */
@JsonPropertyOrder({
  SampledCurve.JSON_PROPERTY_TYPE,
  SampledCurve.JSON_PROPERTY_DEFAULT_NUM_SAMPLES,
  SampledCurve.JSON_PROPERTY_MAX_CONTROL_POINTS,
  SampledCurve.JSON_PROPERTY_MIN_CONTROL_POINTS,
  SampledCurve.JSON_PROPERTY_SEGMENT_COUNT,
  SampledCurve.JSON_PROPERTY_SPATIAL_LENGTH
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)

public class SampledCurve extends ControlPointCurve {
  public static final String JSON_PROPERTY_TYPE = "type";
  private String type = "SampledCurve";

  public static final String JSON_PROPERTY_DEFAULT_NUM_SAMPLES = "defaultNumSamples";
  private Integer defaultNumSamples;

  public static final String JSON_PROPERTY_MAX_CONTROL_POINTS = "maxControlPoints";
  private Integer maxControlPoints;

  public static final String JSON_PROPERTY_MIN_CONTROL_POINTS = "minControlPoints";
  private Integer minControlPoints;

  public static final String JSON_PROPERTY_SEGMENT_COUNT = "segmentCount";
  private Integer segmentCount;

  public static final String JSON_PROPERTY_SPATIAL_LENGTH = "spatialLength";
  private Double spatialLength;

  public SampledCurve() { 
  }

  public SampledCurve type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(String type) {
    this.type = type;
  }


  public SampledCurve defaultNumSamples(Integer defaultNumSamples) {
    this.defaultNumSamples = defaultNumSamples;
    return this;
  }

   /**
   * Get defaultNumSamples
   * @return defaultNumSamples
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_NUM_SAMPLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDefaultNumSamples() {
    return defaultNumSamples;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_NUM_SAMPLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultNumSamples(Integer defaultNumSamples) {
    this.defaultNumSamples = defaultNumSamples;
  }


  public SampledCurve maxControlPoints(Integer maxControlPoints) {
    this.maxControlPoints = maxControlPoints;
    return this;
  }

   /**
   * Get maxControlPoints
   * @return maxControlPoints
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_CONTROL_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMaxControlPoints() {
    return maxControlPoints;
  }


  @JsonProperty(JSON_PROPERTY_MAX_CONTROL_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxControlPoints(Integer maxControlPoints) {
    this.maxControlPoints = maxControlPoints;
  }


  public SampledCurve minControlPoints(Integer minControlPoints) {
    this.minControlPoints = minControlPoints;
    return this;
  }

   /**
   * Get minControlPoints
   * @return minControlPoints
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIN_CONTROL_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMinControlPoints() {
    return minControlPoints;
  }


  @JsonProperty(JSON_PROPERTY_MIN_CONTROL_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinControlPoints(Integer minControlPoints) {
    this.minControlPoints = minControlPoints;
  }


  public SampledCurve segmentCount(Integer segmentCount) {
    this.segmentCount = segmentCount;
    return this;
  }

   /**
   * Get segmentCount
   * @return segmentCount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEGMENT_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSegmentCount() {
    return segmentCount;
  }


  @JsonProperty(JSON_PROPERTY_SEGMENT_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSegmentCount(Integer segmentCount) {
    this.segmentCount = segmentCount;
  }


  public SampledCurve spatialLength(Double spatialLength) {
    this.spatialLength = spatialLength;
    return this;
  }

   /**
   * Get spatialLength
   * @return spatialLength
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SPATIAL_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getSpatialLength() {
    return spatialLength;
  }


  @JsonProperty(JSON_PROPERTY_SPATIAL_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpatialLength(Double spatialLength) {
    this.spatialLength = spatialLength;
  }


  @Override
  public SampledCurve bClosed(Boolean bClosed) {
    this.setbClosed(bClosed);
    return this;
  }

  @Override
  public SampledCurve beginningCoordinate(Coordinate beginningCoordinate) {
    this.setBeginningCoordinate(beginningCoordinate);
    return this;
  }

  @Override
  public SampledCurve endingCoordinate(Coordinate endingCoordinate) {
    this.setEndingCoordinate(endingCoordinate);
    return this;
  }

  @Override
  public SampledCurve numSamplePoints(Integer numSamplePoints) {
    this.setNumSamplePoints(numSamplePoints);
    return this;
  }

  @Override
  public SampledCurve closed(Boolean closed) {
    this.setClosed(closed);
    return this;
  }

  /**
   * Return true if this SampledCurve object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SampledCurve sampledCurve = (SampledCurve) o;
    return Objects.equals(this.type, sampledCurve.type) &&
        Objects.equals(this.defaultNumSamples, sampledCurve.defaultNumSamples) &&
        Objects.equals(this.maxControlPoints, sampledCurve.maxControlPoints) &&
        Objects.equals(this.minControlPoints, sampledCurve.minControlPoints) &&
        Objects.equals(this.segmentCount, sampledCurve.segmentCount) &&
        Objects.equals(this.spatialLength, sampledCurve.spatialLength) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, defaultNumSamples, maxControlPoints, minControlPoints, segmentCount, spatialLength, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SampledCurve {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    defaultNumSamples: ").append(toIndentedString(defaultNumSamples)).append("\n");
    sb.append("    maxControlPoints: ").append(toIndentedString(maxControlPoints)).append("\n");
    sb.append("    minControlPoints: ").append(toIndentedString(minControlPoints)).append("\n");
    sb.append("    segmentCount: ").append(toIndentedString(segmentCount)).append("\n");
    sb.append("    spatialLength: ").append(toIndentedString(spatialLength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `bClosed` to the URL query string
    if (getbClosed() != null) {
      joiner.add(String.format("%sbClosed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getbClosed()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `beginningCoordinate` to the URL query string
    if (getBeginningCoordinate() != null) {
      joiner.add(getBeginningCoordinate().toUrlQueryString(prefix + "beginningCoordinate" + suffix));
    }

    // add `defaultNumSamples` to the URL query string
    if (getDefaultNumSamples() != null) {
      joiner.add(String.format("%sdefaultNumSamples%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDefaultNumSamples()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `endingCoordinate` to the URL query string
    if (getEndingCoordinate() != null) {
      joiner.add(getEndingCoordinate().toUrlQueryString(prefix + "endingCoordinate" + suffix));
    }

    // add `numSamplePoints` to the URL query string
    if (getNumSamplePoints() != null) {
      joiner.add(String.format("%snumSamplePoints%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumSamplePoints()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `segmentCount` to the URL query string
    if (getSegmentCount() != null) {
      joiner.add(String.format("%ssegmentCount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSegmentCount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `spatialLength` to the URL query string
    if (getSpatialLength() != null) {
      joiner.add(String.format("%sspatialLength%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSpatialLength()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `closed` to the URL query string
    if (getClosed() != null) {
      joiner.add(String.format("%sclosed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClosed()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `valid` to the URL query string
    if (getValid() != null) {
      joiner.add(String.format("%svalid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getValid()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("SampledCurve", SampledCurve.class);
  JSON.registerDiscriminator(SampledCurve.class, "type", mappings);
}
}

