/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.vcell.restclient.model.CurveSelectionInfo;
import org.vcell.restclient.model.SampledCurve;
import org.vcell.restclient.model.SpatialSelection;
import org.vcell.restclient.model.VariableType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.vcell.restclient.JSON;
/**
 * SpatialSelectionMembrane
 */
@JsonPropertyOrder({
  SpatialSelectionMembrane.JSON_PROPERTY_TYPE,
  SpatialSelectionMembrane.JSON_PROPERTY_FIELD_SAMPLED_DATA_INDEXES,
  SpatialSelectionMembrane.JSON_PROPERTY_SELECTION_SOURCE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)

public class SpatialSelectionMembrane extends SpatialSelection {
  public static final String JSON_PROPERTY_TYPE = "type";
  private String type = "Membrane";

  public static final String JSON_PROPERTY_FIELD_SAMPLED_DATA_INDEXES = "fieldSampledDataIndexes";
  private List<Integer> fieldSampledDataIndexes;

  public static final String JSON_PROPERTY_SELECTION_SOURCE = "selectionSource";
  private SampledCurve selectionSource;

  public SpatialSelectionMembrane() { 
  }

  public SpatialSelectionMembrane type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(String type) {
    this.type = type;
  }


  public SpatialSelectionMembrane fieldSampledDataIndexes(List<Integer> fieldSampledDataIndexes) {
    this.fieldSampledDataIndexes = fieldSampledDataIndexes;
    return this;
  }

  public SpatialSelectionMembrane addFieldSampledDataIndexesItem(Integer fieldSampledDataIndexesItem) {
    if (this.fieldSampledDataIndexes == null) {
      this.fieldSampledDataIndexes = new ArrayList<>();
    }
    this.fieldSampledDataIndexes.add(fieldSampledDataIndexesItem);
    return this;
  }

   /**
   * Get fieldSampledDataIndexes
   * @return fieldSampledDataIndexes
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIELD_SAMPLED_DATA_INDEXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Integer> getFieldSampledDataIndexes() {
    return fieldSampledDataIndexes;
  }


  @JsonProperty(JSON_PROPERTY_FIELD_SAMPLED_DATA_INDEXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFieldSampledDataIndexes(List<Integer> fieldSampledDataIndexes) {
    this.fieldSampledDataIndexes = fieldSampledDataIndexes;
  }


  public SpatialSelectionMembrane selectionSource(SampledCurve selectionSource) {
    this.selectionSource = selectionSource;
    return this;
  }

   /**
   * Get selectionSource
   * @return selectionSource
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SELECTION_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SampledCurve getSelectionSource() {
    return selectionSource;
  }


  @JsonProperty(JSON_PROPERTY_SELECTION_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSelectionSource(SampledCurve selectionSource) {
    this.selectionSource = selectionSource;
  }


  @Override
  public SpatialSelectionMembrane curveSelectionInfo(CurveSelectionInfo curveSelectionInfo) {
    this.setCurveSelectionInfo(curveSelectionInfo);
    return this;
  }

  @Override
  public SpatialSelectionMembrane varType(VariableType varType) {
    this.setVarType(varType);
    return this;
  }

  @Override
  public SpatialSelectionMembrane smallestMeshCellDimensionLength(Double smallestMeshCellDimensionLength) {
    this.setSmallestMeshCellDimensionLength(smallestMeshCellDimensionLength);
    return this;
  }

  @Override
  public SpatialSelectionMembrane variableType(VariableType variableType) {
    this.setVariableType(variableType);
    return this;
  }

  @Override
  public SpatialSelectionMembrane closed(Boolean closed) {
    this.setClosed(closed);
    return this;
  }

  @Override
  public SpatialSelectionMembrane point(Boolean point) {
    this.setPoint(point);
    return this;
  }

  /**
   * Return true if this SpatialSelectionMembrane object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpatialSelectionMembrane spatialSelectionMembrane = (SpatialSelectionMembrane) o;
    return Objects.equals(this.type, spatialSelectionMembrane.type) &&
        Objects.equals(this.fieldSampledDataIndexes, spatialSelectionMembrane.fieldSampledDataIndexes) &&
        Objects.equals(this.selectionSource, spatialSelectionMembrane.selectionSource) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, fieldSampledDataIndexes, selectionSource, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpatialSelectionMembrane {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    fieldSampledDataIndexes: ").append(toIndentedString(fieldSampledDataIndexes)).append("\n");
    sb.append("    selectionSource: ").append(toIndentedString(selectionSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `curveSelectionInfo` to the URL query string
    if (getCurveSelectionInfo() != null) {
      joiner.add(getCurveSelectionInfo().toUrlQueryString(prefix + "curveSelectionInfo" + suffix));
    }

    // add `varType` to the URL query string
    if (getVarType() != null) {
      joiner.add(getVarType().toUrlQueryString(prefix + "varType" + suffix));
    }

    // add `type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `smallestMeshCellDimensionLength` to the URL query string
    if (getSmallestMeshCellDimensionLength() != null) {
      joiner.add(String.format("%ssmallestMeshCellDimensionLength%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSmallestMeshCellDimensionLength()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `variableType` to the URL query string
    if (getVariableType() != null) {
      joiner.add(getVariableType().toUrlQueryString(prefix + "variableType" + suffix));
    }

    // add `closed` to the URL query string
    if (getClosed() != null) {
      joiner.add(String.format("%sclosed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClosed()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `point` to the URL query string
    if (getPoint() != null) {
      joiner.add(String.format("%spoint%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPoint()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("SpatialSelectionMembrane", SpatialSelectionMembrane.class);
  JSON.registerDiscriminator(SpatialSelectionMembrane.class, "type", mappings);
}
}

