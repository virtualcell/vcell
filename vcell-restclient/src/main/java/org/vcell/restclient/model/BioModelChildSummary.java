/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.vcell.restclient.model.ApplicationInfo;
import org.vcell.restclient.model.MathType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * BioModelChildSummary
 */
@JsonPropertyOrder({
  BioModelChildSummary.JSON_PROPERTY_APP_TYPES,
  BioModelChildSummary.JSON_PROPERTY_GEOMETRY_DIMENSIONS,
  BioModelChildSummary.JSON_PROPERTY_GEOMETRY_NAMES,
  BioModelChildSummary.JSON_PROPERTY_SIMULATION_CONTEXT_ANNOTATIONS,
  BioModelChildSummary.JSON_PROPERTY_SIMULATION_CONTEXT_NAMES,
  BioModelChildSummary.JSON_PROPERTY_ALL_SIMULATION_NAMES,
  BioModelChildSummary.JSON_PROPERTY_ALL_SIMULATION_ANNOTS,
  BioModelChildSummary.JSON_PROPERTY_APPLICATION_INFO
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BioModelChildSummary {
  public static final String JSON_PROPERTY_APP_TYPES = "appTypes";
  private List<MathType> appTypes;

  public static final String JSON_PROPERTY_GEOMETRY_DIMENSIONS = "geometryDimensions";
  private List<Integer> geometryDimensions;

  public static final String JSON_PROPERTY_GEOMETRY_NAMES = "geometryNames";
  private List<String> geometryNames;

  public static final String JSON_PROPERTY_SIMULATION_CONTEXT_ANNOTATIONS = "simulationContextAnnotations";
  private List<String> simulationContextAnnotations;

  public static final String JSON_PROPERTY_SIMULATION_CONTEXT_NAMES = "simulationContextNames";
  private List<String> simulationContextNames;

  public static final String JSON_PROPERTY_ALL_SIMULATION_NAMES = "allSimulationNames";
  private List<List<String>> allSimulationNames;

  public static final String JSON_PROPERTY_ALL_SIMULATION_ANNOTS = "allSimulationAnnots";
  private List<List<String>> allSimulationAnnots;

  public static final String JSON_PROPERTY_APPLICATION_INFO = "applicationInfo";
  private List<ApplicationInfo> applicationInfo;

  public BioModelChildSummary() { 
  }

  public BioModelChildSummary appTypes(List<MathType> appTypes) {
    this.appTypes = appTypes;
    return this;
  }

  public BioModelChildSummary addAppTypesItem(MathType appTypesItem) {
    if (this.appTypes == null) {
      this.appTypes = new ArrayList<>();
    }
    this.appTypes.add(appTypesItem);
    return this;
  }

   /**
   * Get appTypes
   * @return appTypes
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APP_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MathType> getAppTypes() {
    return appTypes;
  }


  @JsonProperty(JSON_PROPERTY_APP_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAppTypes(List<MathType> appTypes) {
    this.appTypes = appTypes;
  }


  public BioModelChildSummary geometryDimensions(List<Integer> geometryDimensions) {
    this.geometryDimensions = geometryDimensions;
    return this;
  }

  public BioModelChildSummary addGeometryDimensionsItem(Integer geometryDimensionsItem) {
    if (this.geometryDimensions == null) {
      this.geometryDimensions = new ArrayList<>();
    }
    this.geometryDimensions.add(geometryDimensionsItem);
    return this;
  }

   /**
   * Get geometryDimensions
   * @return geometryDimensions
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GEOMETRY_DIMENSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Integer> getGeometryDimensions() {
    return geometryDimensions;
  }


  @JsonProperty(JSON_PROPERTY_GEOMETRY_DIMENSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGeometryDimensions(List<Integer> geometryDimensions) {
    this.geometryDimensions = geometryDimensions;
  }


  public BioModelChildSummary geometryNames(List<String> geometryNames) {
    this.geometryNames = geometryNames;
    return this;
  }

  public BioModelChildSummary addGeometryNamesItem(String geometryNamesItem) {
    if (this.geometryNames == null) {
      this.geometryNames = new ArrayList<>();
    }
    this.geometryNames.add(geometryNamesItem);
    return this;
  }

   /**
   * Get geometryNames
   * @return geometryNames
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GEOMETRY_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getGeometryNames() {
    return geometryNames;
  }


  @JsonProperty(JSON_PROPERTY_GEOMETRY_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGeometryNames(List<String> geometryNames) {
    this.geometryNames = geometryNames;
  }


  public BioModelChildSummary simulationContextAnnotations(List<String> simulationContextAnnotations) {
    this.simulationContextAnnotations = simulationContextAnnotations;
    return this;
  }

  public BioModelChildSummary addSimulationContextAnnotationsItem(String simulationContextAnnotationsItem) {
    if (this.simulationContextAnnotations == null) {
      this.simulationContextAnnotations = new ArrayList<>();
    }
    this.simulationContextAnnotations.add(simulationContextAnnotationsItem);
    return this;
  }

   /**
   * Get simulationContextAnnotations
   * @return simulationContextAnnotations
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIMULATION_CONTEXT_ANNOTATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSimulationContextAnnotations() {
    return simulationContextAnnotations;
  }


  @JsonProperty(JSON_PROPERTY_SIMULATION_CONTEXT_ANNOTATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSimulationContextAnnotations(List<String> simulationContextAnnotations) {
    this.simulationContextAnnotations = simulationContextAnnotations;
  }


  public BioModelChildSummary simulationContextNames(List<String> simulationContextNames) {
    this.simulationContextNames = simulationContextNames;
    return this;
  }

  public BioModelChildSummary addSimulationContextNamesItem(String simulationContextNamesItem) {
    if (this.simulationContextNames == null) {
      this.simulationContextNames = new ArrayList<>();
    }
    this.simulationContextNames.add(simulationContextNamesItem);
    return this;
  }

   /**
   * Get simulationContextNames
   * @return simulationContextNames
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIMULATION_CONTEXT_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSimulationContextNames() {
    return simulationContextNames;
  }


  @JsonProperty(JSON_PROPERTY_SIMULATION_CONTEXT_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSimulationContextNames(List<String> simulationContextNames) {
    this.simulationContextNames = simulationContextNames;
  }


  public BioModelChildSummary allSimulationNames(List<List<String>> allSimulationNames) {
    this.allSimulationNames = allSimulationNames;
    return this;
  }

  public BioModelChildSummary addAllSimulationNamesItem(List<String> allSimulationNamesItem) {
    if (this.allSimulationNames == null) {
      this.allSimulationNames = new ArrayList<>();
    }
    this.allSimulationNames.add(allSimulationNamesItem);
    return this;
  }

   /**
   * Get allSimulationNames
   * @return allSimulationNames
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALL_SIMULATION_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<List<String>> getAllSimulationNames() {
    return allSimulationNames;
  }


  @JsonProperty(JSON_PROPERTY_ALL_SIMULATION_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllSimulationNames(List<List<String>> allSimulationNames) {
    this.allSimulationNames = allSimulationNames;
  }


  public BioModelChildSummary allSimulationAnnots(List<List<String>> allSimulationAnnots) {
    this.allSimulationAnnots = allSimulationAnnots;
    return this;
  }

  public BioModelChildSummary addAllSimulationAnnotsItem(List<String> allSimulationAnnotsItem) {
    if (this.allSimulationAnnots == null) {
      this.allSimulationAnnots = new ArrayList<>();
    }
    this.allSimulationAnnots.add(allSimulationAnnotsItem);
    return this;
  }

   /**
   * Get allSimulationAnnots
   * @return allSimulationAnnots
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALL_SIMULATION_ANNOTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<List<String>> getAllSimulationAnnots() {
    return allSimulationAnnots;
  }


  @JsonProperty(JSON_PROPERTY_ALL_SIMULATION_ANNOTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllSimulationAnnots(List<List<String>> allSimulationAnnots) {
    this.allSimulationAnnots = allSimulationAnnots;
  }


  public BioModelChildSummary applicationInfo(List<ApplicationInfo> applicationInfo) {
    this.applicationInfo = applicationInfo;
    return this;
  }

  public BioModelChildSummary addApplicationInfoItem(ApplicationInfo applicationInfoItem) {
    if (this.applicationInfo == null) {
      this.applicationInfo = new ArrayList<>();
    }
    this.applicationInfo.add(applicationInfoItem);
    return this;
  }

   /**
   * Get applicationInfo
   * @return applicationInfo
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APPLICATION_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ApplicationInfo> getApplicationInfo() {
    return applicationInfo;
  }


  @JsonProperty(JSON_PROPERTY_APPLICATION_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApplicationInfo(List<ApplicationInfo> applicationInfo) {
    this.applicationInfo = applicationInfo;
  }


  /**
   * Return true if this BioModelChildSummary object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BioModelChildSummary bioModelChildSummary = (BioModelChildSummary) o;
    return Objects.equals(this.appTypes, bioModelChildSummary.appTypes) &&
        Objects.equals(this.geometryDimensions, bioModelChildSummary.geometryDimensions) &&
        Objects.equals(this.geometryNames, bioModelChildSummary.geometryNames) &&
        Objects.equals(this.simulationContextAnnotations, bioModelChildSummary.simulationContextAnnotations) &&
        Objects.equals(this.simulationContextNames, bioModelChildSummary.simulationContextNames) &&
        Objects.equals(this.allSimulationNames, bioModelChildSummary.allSimulationNames) &&
        Objects.equals(this.allSimulationAnnots, bioModelChildSummary.allSimulationAnnots) &&
        Objects.equals(this.applicationInfo, bioModelChildSummary.applicationInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appTypes, geometryDimensions, geometryNames, simulationContextAnnotations, simulationContextNames, allSimulationNames, allSimulationAnnots, applicationInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BioModelChildSummary {\n");
    sb.append("    appTypes: ").append(toIndentedString(appTypes)).append("\n");
    sb.append("    geometryDimensions: ").append(toIndentedString(geometryDimensions)).append("\n");
    sb.append("    geometryNames: ").append(toIndentedString(geometryNames)).append("\n");
    sb.append("    simulationContextAnnotations: ").append(toIndentedString(simulationContextAnnotations)).append("\n");
    sb.append("    simulationContextNames: ").append(toIndentedString(simulationContextNames)).append("\n");
    sb.append("    allSimulationNames: ").append(toIndentedString(allSimulationNames)).append("\n");
    sb.append("    allSimulationAnnots: ").append(toIndentedString(allSimulationAnnots)).append("\n");
    sb.append("    applicationInfo: ").append(toIndentedString(applicationInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `appTypes` to the URL query string
    if (getAppTypes() != null) {
      for (int i = 0; i < getAppTypes().size(); i++) {
        if (getAppTypes().get(i) != null) {
          joiner.add(String.format("%sappTypes%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getAppTypes().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
      }
    }

    // add `geometryDimensions` to the URL query string
    if (getGeometryDimensions() != null) {
      for (int i = 0; i < getGeometryDimensions().size(); i++) {
        joiner.add(String.format("%sgeometryDimensions%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getGeometryDimensions().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `geometryNames` to the URL query string
    if (getGeometryNames() != null) {
      for (int i = 0; i < getGeometryNames().size(); i++) {
        joiner.add(String.format("%sgeometryNames%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getGeometryNames().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `simulationContextAnnotations` to the URL query string
    if (getSimulationContextAnnotations() != null) {
      for (int i = 0; i < getSimulationContextAnnotations().size(); i++) {
        joiner.add(String.format("%ssimulationContextAnnotations%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getSimulationContextAnnotations().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `simulationContextNames` to the URL query string
    if (getSimulationContextNames() != null) {
      for (int i = 0; i < getSimulationContextNames().size(); i++) {
        joiner.add(String.format("%ssimulationContextNames%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getSimulationContextNames().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `allSimulationNames` to the URL query string
    if (getAllSimulationNames() != null) {
      for (int i = 0; i < getAllSimulationNames().size(); i++) {
        joiner.add(String.format("%sallSimulationNames%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getAllSimulationNames().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `allSimulationAnnots` to the URL query string
    if (getAllSimulationAnnots() != null) {
      for (int i = 0; i < getAllSimulationAnnots().size(); i++) {
        joiner.add(String.format("%sallSimulationAnnots%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getAllSimulationAnnots().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `applicationInfo` to the URL query string
    if (getApplicationInfo() != null) {
      for (int i = 0; i < getApplicationInfo().size(); i++) {
        if (getApplicationInfo().get(i) != null) {
          joiner.add(getApplicationInfo().get(i).toUrlQueryString(String.format("%sapplicationInfo%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

