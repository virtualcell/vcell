/*
 * VCell API (development)
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * AccesTokenRepresentationRecord
 */
@JsonPropertyOrder({
  AccesTokenRepresentationRecord.JSON_PROPERTY_TOKEN,
  AccesTokenRepresentationRecord.JSON_PROPERTY_CREATION_DATE_SECONDS,
  AccesTokenRepresentationRecord.JSON_PROPERTY_EXPIRE_DATE_SECONDS,
  AccesTokenRepresentationRecord.JSON_PROPERTY_USER_ID,
  AccesTokenRepresentationRecord.JSON_PROPERTY_USER_KEY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AccesTokenRepresentationRecord {
  public static final String JSON_PROPERTY_TOKEN = "token";
  private String token;

  public static final String JSON_PROPERTY_CREATION_DATE_SECONDS = "creationDateSeconds";
  private Long creationDateSeconds;

  public static final String JSON_PROPERTY_EXPIRE_DATE_SECONDS = "expireDateSeconds";
  private Long expireDateSeconds;

  public static final String JSON_PROPERTY_USER_ID = "userId";
  private String userId;

  public static final String JSON_PROPERTY_USER_KEY = "userKey";
  private String userKey;

  public AccesTokenRepresentationRecord() { 
  }

  public AccesTokenRepresentationRecord token(String token) {
    this.token = token;
    return this;
  }

   /**
   * Get token
   * @return token
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getToken() {
    return token;
  }


  @JsonProperty(JSON_PROPERTY_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToken(String token) {
    this.token = token;
  }


  public AccesTokenRepresentationRecord creationDateSeconds(Long creationDateSeconds) {
    this.creationDateSeconds = creationDateSeconds;
    return this;
  }

   /**
   * Get creationDateSeconds
   * @return creationDateSeconds
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATION_DATE_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getCreationDateSeconds() {
    return creationDateSeconds;
  }


  @JsonProperty(JSON_PROPERTY_CREATION_DATE_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreationDateSeconds(Long creationDateSeconds) {
    this.creationDateSeconds = creationDateSeconds;
  }


  public AccesTokenRepresentationRecord expireDateSeconds(Long expireDateSeconds) {
    this.expireDateSeconds = expireDateSeconds;
    return this;
  }

   /**
   * Get expireDateSeconds
   * @return expireDateSeconds
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRE_DATE_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getExpireDateSeconds() {
    return expireDateSeconds;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRE_DATE_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpireDateSeconds(Long expireDateSeconds) {
    this.expireDateSeconds = expireDateSeconds;
  }


  public AccesTokenRepresentationRecord userId(String userId) {
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserId(String userId) {
    this.userId = userId;
  }


  public AccesTokenRepresentationRecord userKey(String userKey) {
    this.userKey = userKey;
    return this;
  }

   /**
   * Get userKey
   * @return userKey
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserKey() {
    return userKey;
  }


  @JsonProperty(JSON_PROPERTY_USER_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserKey(String userKey) {
    this.userKey = userKey;
  }


  /**
   * Return true if this AccesTokenRepresentationRecord object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccesTokenRepresentationRecord accesTokenRepresentationRecord = (AccesTokenRepresentationRecord) o;
    return Objects.equals(this.token, accesTokenRepresentationRecord.token) &&
        Objects.equals(this.creationDateSeconds, accesTokenRepresentationRecord.creationDateSeconds) &&
        Objects.equals(this.expireDateSeconds, accesTokenRepresentationRecord.expireDateSeconds) &&
        Objects.equals(this.userId, accesTokenRepresentationRecord.userId) &&
        Objects.equals(this.userKey, accesTokenRepresentationRecord.userKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(token, creationDateSeconds, expireDateSeconds, userId, userKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccesTokenRepresentationRecord {\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    creationDateSeconds: ").append(toIndentedString(creationDateSeconds)).append("\n");
    sb.append("    expireDateSeconds: ").append(toIndentedString(expireDateSeconds)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userKey: ").append(toIndentedString(userKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `token` to the URL query string
    if (getToken() != null) {
      joiner.add(String.format("%stoken%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getToken()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `creationDateSeconds` to the URL query string
    if (getCreationDateSeconds() != null) {
      joiner.add(String.format("%screationDateSeconds%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreationDateSeconds()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `expireDateSeconds` to the URL query string
    if (getExpireDateSeconds() != null) {
      joiner.add(String.format("%sexpireDateSeconds%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpireDateSeconds()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `userId` to the URL query string
    if (getUserId() != null) {
      joiner.add(String.format("%suserId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `userKey` to the URL query string
    if (getUserKey() != null) {
      joiner.add(String.format("%suserKey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserKey()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

