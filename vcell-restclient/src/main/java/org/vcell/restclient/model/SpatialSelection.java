/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.vcell.restclient.model.CurveSelectionInfo;
import org.vcell.restclient.model.VariableType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.vcell.restclient.JSON;
/**
 * SpatialSelection
 */
@JsonPropertyOrder({
  SpatialSelection.JSON_PROPERTY_CURVE_SELECTION_INFO,
  SpatialSelection.JSON_PROPERTY_VAR_TYPE,
  SpatialSelection.JSON_PROPERTY_TYPE,
  SpatialSelection.JSON_PROPERTY_SMALLEST_MESH_CELL_DIMENSION_LENGTH,
  SpatialSelection.JSON_PROPERTY_VARIABLE_TYPE,
  SpatialSelection.JSON_PROPERTY_CLOSED,
  SpatialSelection.JSON_PROPERTY_POINT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = SpatialSelectionContour.class, name = "Contour"),
  @JsonSubTypes.Type(value = SpatialSelectionMembrane.class, name = "Membrane"),
  @JsonSubTypes.Type(value = SpatialSelectionVolume.class, name = "Volume"),
})

public class SpatialSelection {
  public static final String JSON_PROPERTY_CURVE_SELECTION_INFO = "curveSelectionInfo";
  private CurveSelectionInfo curveSelectionInfo;

  public static final String JSON_PROPERTY_VAR_TYPE = "varType";
  private VariableType varType;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_SMALLEST_MESH_CELL_DIMENSION_LENGTH = "smallestMeshCellDimensionLength";
  private Double smallestMeshCellDimensionLength;

  public static final String JSON_PROPERTY_VARIABLE_TYPE = "variableType";
  private VariableType variableType;

  public static final String JSON_PROPERTY_CLOSED = "closed";
  private Boolean closed;

  public static final String JSON_PROPERTY_POINT = "point";
  private Boolean point;

  public SpatialSelection() { 
  }

  public SpatialSelection curveSelectionInfo(CurveSelectionInfo curveSelectionInfo) {
    this.curveSelectionInfo = curveSelectionInfo;
    return this;
  }

   /**
   * Get curveSelectionInfo
   * @return curveSelectionInfo
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURVE_SELECTION_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CurveSelectionInfo getCurveSelectionInfo() {
    return curveSelectionInfo;
  }


  @JsonProperty(JSON_PROPERTY_CURVE_SELECTION_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurveSelectionInfo(CurveSelectionInfo curveSelectionInfo) {
    this.curveSelectionInfo = curveSelectionInfo;
  }


  public SpatialSelection varType(VariableType varType) {
    this.varType = varType;
    return this;
  }

   /**
   * Get varType
   * @return varType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VAR_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VariableType getVarType() {
    return varType;
  }


  @JsonProperty(JSON_PROPERTY_VAR_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVarType(VariableType varType) {
    this.varType = varType;
  }


  public SpatialSelection type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(String type) {
    this.type = type;
  }


  public SpatialSelection smallestMeshCellDimensionLength(Double smallestMeshCellDimensionLength) {
    this.smallestMeshCellDimensionLength = smallestMeshCellDimensionLength;
    return this;
  }

   /**
   * Get smallestMeshCellDimensionLength
   * @return smallestMeshCellDimensionLength
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SMALLEST_MESH_CELL_DIMENSION_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getSmallestMeshCellDimensionLength() {
    return smallestMeshCellDimensionLength;
  }


  @JsonProperty(JSON_PROPERTY_SMALLEST_MESH_CELL_DIMENSION_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSmallestMeshCellDimensionLength(Double smallestMeshCellDimensionLength) {
    this.smallestMeshCellDimensionLength = smallestMeshCellDimensionLength;
  }


  public SpatialSelection variableType(VariableType variableType) {
    this.variableType = variableType;
    return this;
  }

   /**
   * Get variableType
   * @return variableType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VARIABLE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VariableType getVariableType() {
    return variableType;
  }


  @JsonProperty(JSON_PROPERTY_VARIABLE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVariableType(VariableType variableType) {
    this.variableType = variableType;
  }


  public SpatialSelection closed(Boolean closed) {
    this.closed = closed;
    return this;
  }

   /**
   * Get closed
   * @return closed
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLOSED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getClosed() {
    return closed;
  }


  @JsonProperty(JSON_PROPERTY_CLOSED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClosed(Boolean closed) {
    this.closed = closed;
  }


  public SpatialSelection point(Boolean point) {
    this.point = point;
    return this;
  }

   /**
   * Get point
   * @return point
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPoint() {
    return point;
  }


  @JsonProperty(JSON_PROPERTY_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPoint(Boolean point) {
    this.point = point;
  }


  /**
   * Return true if this SpatialSelection object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpatialSelection spatialSelection = (SpatialSelection) o;
    return Objects.equals(this.curveSelectionInfo, spatialSelection.curveSelectionInfo) &&
        Objects.equals(this.varType, spatialSelection.varType) &&
        Objects.equals(this.type, spatialSelection.type) &&
        Objects.equals(this.smallestMeshCellDimensionLength, spatialSelection.smallestMeshCellDimensionLength) &&
        Objects.equals(this.variableType, spatialSelection.variableType) &&
        Objects.equals(this.closed, spatialSelection.closed) &&
        Objects.equals(this.point, spatialSelection.point);
  }

  @Override
  public int hashCode() {
    return Objects.hash(curveSelectionInfo, varType, type, smallestMeshCellDimensionLength, variableType, closed, point);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpatialSelection {\n");
    sb.append("    curveSelectionInfo: ").append(toIndentedString(curveSelectionInfo)).append("\n");
    sb.append("    varType: ").append(toIndentedString(varType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    smallestMeshCellDimensionLength: ").append(toIndentedString(smallestMeshCellDimensionLength)).append("\n");
    sb.append("    variableType: ").append(toIndentedString(variableType)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    point: ").append(toIndentedString(point)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `curveSelectionInfo` to the URL query string
    if (getCurveSelectionInfo() != null) {
      joiner.add(getCurveSelectionInfo().toUrlQueryString(prefix + "curveSelectionInfo" + suffix));
    }

    // add `varType` to the URL query string
    if (getVarType() != null) {
      joiner.add(getVarType().toUrlQueryString(prefix + "varType" + suffix));
    }

    // add `type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `smallestMeshCellDimensionLength` to the URL query string
    if (getSmallestMeshCellDimensionLength() != null) {
      joiner.add(String.format("%ssmallestMeshCellDimensionLength%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSmallestMeshCellDimensionLength()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `variableType` to the URL query string
    if (getVariableType() != null) {
      joiner.add(getVariableType().toUrlQueryString(prefix + "variableType" + suffix));
    }

    // add `closed` to the URL query string
    if (getClosed() != null) {
      joiner.add(String.format("%sclosed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClosed()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `point` to the URL query string
    if (getPoint() != null) {
      joiner.add(String.format("%spoint%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPoint()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("Contour", SpatialSelectionContour.class);
  mappings.put("Membrane", SpatialSelectionMembrane.class);
  mappings.put("Volume", SpatialSelectionVolume.class);
  mappings.put("SpatialSelection", SpatialSelection.class);
  JSON.registerDiscriminator(SpatialSelection.class, "type", mappings);
}
}

