/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.vcell.restclient.model.ExportableDataType;
import org.vcell.restclient.model.StandardExportInfo;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * N5ExportRequest
 */
@JsonPropertyOrder({
  N5ExportRequest.JSON_PROPERTY_STANDARD_EXPORT_INFORMATION,
  N5ExportRequest.JSON_PROPERTY_SUB_VOLUME,
  N5ExportRequest.JSON_PROPERTY_EXPORTABLE_DATA_TYPE,
  N5ExportRequest.JSON_PROPERTY_DATASET_NAME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class N5ExportRequest {
  public static final String JSON_PROPERTY_STANDARD_EXPORT_INFORMATION = "standardExportInformation";
  private StandardExportInfo standardExportInformation;

  public static final String JSON_PROPERTY_SUB_VOLUME = "subVolume";
  private Map<String, String> subVolume = new HashMap<>();

  public static final String JSON_PROPERTY_EXPORTABLE_DATA_TYPE = "exportableDataType";
  private ExportableDataType exportableDataType;

  public static final String JSON_PROPERTY_DATASET_NAME = "datasetName";
  private String datasetName;

  public N5ExportRequest() { 
  }

  public N5ExportRequest standardExportInformation(StandardExportInfo standardExportInformation) {
    this.standardExportInformation = standardExportInformation;
    return this;
  }

   /**
   * Get standardExportInformation
   * @return standardExportInformation
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STANDARD_EXPORT_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StandardExportInfo getStandardExportInformation() {
    return standardExportInformation;
  }


  @JsonProperty(JSON_PROPERTY_STANDARD_EXPORT_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStandardExportInformation(StandardExportInfo standardExportInformation) {
    this.standardExportInformation = standardExportInformation;
  }


  public N5ExportRequest subVolume(Map<String, String> subVolume) {
    this.subVolume = subVolume;
    return this;
  }

  public N5ExportRequest putSubVolumeItem(String key, String subVolumeItem) {
    if (this.subVolume == null) {
      this.subVolume = new HashMap<>();
    }
    this.subVolume.put(key, subVolumeItem);
    return this;
  }

   /**
   * Get subVolume
   * @return subVolume
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUB_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getSubVolume() {
    return subVolume;
  }


  @JsonProperty(JSON_PROPERTY_SUB_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubVolume(Map<String, String> subVolume) {
    this.subVolume = subVolume;
  }


  public N5ExportRequest exportableDataType(ExportableDataType exportableDataType) {
    this.exportableDataType = exportableDataType;
    return this;
  }

   /**
   * Get exportableDataType
   * @return exportableDataType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPORTABLE_DATA_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExportableDataType getExportableDataType() {
    return exportableDataType;
  }


  @JsonProperty(JSON_PROPERTY_EXPORTABLE_DATA_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExportableDataType(ExportableDataType exportableDataType) {
    this.exportableDataType = exportableDataType;
  }


  public N5ExportRequest datasetName(String datasetName) {
    this.datasetName = datasetName;
    return this;
  }

   /**
   * Get datasetName
   * @return datasetName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATASET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDatasetName() {
    return datasetName;
  }


  @JsonProperty(JSON_PROPERTY_DATASET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDatasetName(String datasetName) {
    this.datasetName = datasetName;
  }


  /**
   * Return true if this N5ExportRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    N5ExportRequest n5ExportRequest = (N5ExportRequest) o;
    return Objects.equals(this.standardExportInformation, n5ExportRequest.standardExportInformation) &&
        Objects.equals(this.subVolume, n5ExportRequest.subVolume) &&
        Objects.equals(this.exportableDataType, n5ExportRequest.exportableDataType) &&
        Objects.equals(this.datasetName, n5ExportRequest.datasetName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(standardExportInformation, subVolume, exportableDataType, datasetName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class N5ExportRequest {\n");
    sb.append("    standardExportInformation: ").append(toIndentedString(standardExportInformation)).append("\n");
    sb.append("    subVolume: ").append(toIndentedString(subVolume)).append("\n");
    sb.append("    exportableDataType: ").append(toIndentedString(exportableDataType)).append("\n");
    sb.append("    datasetName: ").append(toIndentedString(datasetName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `standardExportInformation` to the URL query string
    if (getStandardExportInformation() != null) {
      joiner.add(getStandardExportInformation().toUrlQueryString(prefix + "standardExportInformation" + suffix));
    }

    // add `subVolume` to the URL query string
    if (getSubVolume() != null) {
      for (String _key : getSubVolume().keySet()) {
        joiner.add(String.format("%ssubVolume%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getSubVolume().get(_key), URLEncoder.encode(String.valueOf(getSubVolume().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `exportableDataType` to the URL query string
    if (getExportableDataType() != null) {
      joiner.add(String.format("%sexportableDataType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExportableDataType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `datasetName` to the URL query string
    if (getDatasetName() != null) {
      joiner.add(String.format("%sdatasetName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDatasetName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

