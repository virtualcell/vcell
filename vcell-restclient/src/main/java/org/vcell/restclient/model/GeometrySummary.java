/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.vcell.restclient.model.Extent;
import org.vcell.restclient.model.Origin;
import org.vcell.restclient.model.VCellSoftwareVersion;
import org.vcell.restclient.model.Version;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * GeometrySummary
 */
@JsonPropertyOrder({
  GeometrySummary.JSON_PROPERTY_DIMENSION,
  GeometrySummary.JSON_PROPERTY_ORIGIN,
  GeometrySummary.JSON_PROPERTY_EXTENT,
  GeometrySummary.JSON_PROPERTY_IMAGE_REF,
  GeometrySummary.JSON_PROPERTY_VERSION,
  GeometrySummary.JSON_PROPERTY_SOFTWARE_VERSION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GeometrySummary {
  public static final String JSON_PROPERTY_DIMENSION = "dimension";
  private Integer dimension;

  public static final String JSON_PROPERTY_ORIGIN = "origin";
  private Origin origin;

  public static final String JSON_PROPERTY_EXTENT = "extent";
  private Extent extent;

  public static final String JSON_PROPERTY_IMAGE_REF = "imageRef";
  private String imageRef;

  public static final String JSON_PROPERTY_VERSION = "version";
  private Version version;

  public static final String JSON_PROPERTY_SOFTWARE_VERSION = "softwareVersion";
  private VCellSoftwareVersion softwareVersion;

  public GeometrySummary() { 
  }

  public GeometrySummary dimension(Integer dimension) {
    this.dimension = dimension;
    return this;
  }

   /**
   * Get dimension
   * @return dimension
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIMENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDimension() {
    return dimension;
  }


  @JsonProperty(JSON_PROPERTY_DIMENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDimension(Integer dimension) {
    this.dimension = dimension;
  }


  public GeometrySummary origin(Origin origin) {
    this.origin = origin;
    return this;
  }

   /**
   * Get origin
   * @return origin
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORIGIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Origin getOrigin() {
    return origin;
  }


  @JsonProperty(JSON_PROPERTY_ORIGIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrigin(Origin origin) {
    this.origin = origin;
  }


  public GeometrySummary extent(Extent extent) {
    this.extent = extent;
    return this;
  }

   /**
   * Get extent
   * @return extent
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Extent getExtent() {
    return extent;
  }


  @JsonProperty(JSON_PROPERTY_EXTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtent(Extent extent) {
    this.extent = extent;
  }


  public GeometrySummary imageRef(String imageRef) {
    this.imageRef = imageRef;
    return this;
  }

   /**
   * Get imageRef
   * @return imageRef
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAGE_REF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getImageRef() {
    return imageRef;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_REF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImageRef(String imageRef) {
    this.imageRef = imageRef;
  }


  public GeometrySummary version(Version version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Version getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(Version version) {
    this.version = version;
  }


  public GeometrySummary softwareVersion(VCellSoftwareVersion softwareVersion) {
    this.softwareVersion = softwareVersion;
    return this;
  }

   /**
   * Get softwareVersion
   * @return softwareVersion
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOFTWARE_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VCellSoftwareVersion getSoftwareVersion() {
    return softwareVersion;
  }


  @JsonProperty(JSON_PROPERTY_SOFTWARE_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSoftwareVersion(VCellSoftwareVersion softwareVersion) {
    this.softwareVersion = softwareVersion;
  }


  /**
   * Return true if this GeometrySummary object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeometrySummary geometrySummary = (GeometrySummary) o;
    return Objects.equals(this.dimension, geometrySummary.dimension) &&
        Objects.equals(this.origin, geometrySummary.origin) &&
        Objects.equals(this.extent, geometrySummary.extent) &&
        Objects.equals(this.imageRef, geometrySummary.imageRef) &&
        Objects.equals(this.version, geometrySummary.version) &&
        Objects.equals(this.softwareVersion, geometrySummary.softwareVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimension, origin, extent, imageRef, version, softwareVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeometrySummary {\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    extent: ").append(toIndentedString(extent)).append("\n");
    sb.append("    imageRef: ").append(toIndentedString(imageRef)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    softwareVersion: ").append(toIndentedString(softwareVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `dimension` to the URL query string
    if (getDimension() != null) {
      joiner.add(String.format("%sdimension%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDimension()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `origin` to the URL query string
    if (getOrigin() != null) {
      joiner.add(getOrigin().toUrlQueryString(prefix + "origin" + suffix));
    }

    // add `extent` to the URL query string
    if (getExtent() != null) {
      joiner.add(getExtent().toUrlQueryString(prefix + "extent" + suffix));
    }

    // add `imageRef` to the URL query string
    if (getImageRef() != null) {
      joiner.add(String.format("%simageRef%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getImageRef()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `version` to the URL query string
    if (getVersion() != null) {
      joiner.add(getVersion().toUrlQueryString(prefix + "version" + suffix));
    }

    // add `softwareVersion` to the URL query string
    if (getSoftwareVersion() != null) {
      joiner.add(getSoftwareVersion().toUrlQueryString(prefix + "softwareVersion" + suffix));
    }

    return joiner.toString();
  }
}

