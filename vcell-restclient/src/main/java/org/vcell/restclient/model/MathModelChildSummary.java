/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.vcell.restclient.model.MathType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * MathModelChildSummary
 */
@JsonPropertyOrder({
  MathModelChildSummary.JSON_PROPERTY_GEO_NAME,
  MathModelChildSummary.JSON_PROPERTY_GEO_DIM,
  MathModelChildSummary.JSON_PROPERTY_SIM_NAMES,
  MathModelChildSummary.JSON_PROPERTY_SIM_ANNOTS,
  MathModelChildSummary.JSON_PROPERTY_MODEL_TYPE,
  MathModelChildSummary.JSON_PROPERTY_GEOMETRY_DIMENSION,
  MathModelChildSummary.JSON_PROPERTY_GEOMETRY_NAME,
  MathModelChildSummary.JSON_PROPERTY_SIMULATION_ANNOTATIONS,
  MathModelChildSummary.JSON_PROPERTY_SIMULATION_NAMES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MathModelChildSummary {
  public static final String JSON_PROPERTY_GEO_NAME = "geoName";
  private String geoName;

  public static final String JSON_PROPERTY_GEO_DIM = "geoDim";
  private Integer geoDim;

  public static final String JSON_PROPERTY_SIM_NAMES = "simNames";
  private List<String> simNames;

  public static final String JSON_PROPERTY_SIM_ANNOTS = "simAnnots";
  private List<String> simAnnots;

  public static final String JSON_PROPERTY_MODEL_TYPE = "modelType";
  private MathType modelType;

  public static final String JSON_PROPERTY_GEOMETRY_DIMENSION = "geometryDimension";
  private Integer geometryDimension;

  public static final String JSON_PROPERTY_GEOMETRY_NAME = "geometryName";
  private String geometryName;

  public static final String JSON_PROPERTY_SIMULATION_ANNOTATIONS = "simulationAnnotations";
  private List<String> simulationAnnotations;

  public static final String JSON_PROPERTY_SIMULATION_NAMES = "simulationNames";
  private List<String> simulationNames;

  public MathModelChildSummary() { 
  }

  public MathModelChildSummary geoName(String geoName) {
    this.geoName = geoName;
    return this;
  }

   /**
   * Get geoName
   * @return geoName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GEO_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGeoName() {
    return geoName;
  }


  @JsonProperty(JSON_PROPERTY_GEO_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGeoName(String geoName) {
    this.geoName = geoName;
  }


  public MathModelChildSummary geoDim(Integer geoDim) {
    this.geoDim = geoDim;
    return this;
  }

   /**
   * Get geoDim
   * @return geoDim
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GEO_DIM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getGeoDim() {
    return geoDim;
  }


  @JsonProperty(JSON_PROPERTY_GEO_DIM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGeoDim(Integer geoDim) {
    this.geoDim = geoDim;
  }


  public MathModelChildSummary simNames(List<String> simNames) {
    this.simNames = simNames;
    return this;
  }

  public MathModelChildSummary addSimNamesItem(String simNamesItem) {
    if (this.simNames == null) {
      this.simNames = new ArrayList<>();
    }
    this.simNames.add(simNamesItem);
    return this;
  }

   /**
   * Get simNames
   * @return simNames
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIM_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSimNames() {
    return simNames;
  }


  @JsonProperty(JSON_PROPERTY_SIM_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSimNames(List<String> simNames) {
    this.simNames = simNames;
  }


  public MathModelChildSummary simAnnots(List<String> simAnnots) {
    this.simAnnots = simAnnots;
    return this;
  }

  public MathModelChildSummary addSimAnnotsItem(String simAnnotsItem) {
    if (this.simAnnots == null) {
      this.simAnnots = new ArrayList<>();
    }
    this.simAnnots.add(simAnnotsItem);
    return this;
  }

   /**
   * Get simAnnots
   * @return simAnnots
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIM_ANNOTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSimAnnots() {
    return simAnnots;
  }


  @JsonProperty(JSON_PROPERTY_SIM_ANNOTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSimAnnots(List<String> simAnnots) {
    this.simAnnots = simAnnots;
  }


  public MathModelChildSummary modelType(MathType modelType) {
    this.modelType = modelType;
    return this;
  }

   /**
   * Get modelType
   * @return modelType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODEL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MathType getModelType() {
    return modelType;
  }


  @JsonProperty(JSON_PROPERTY_MODEL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModelType(MathType modelType) {
    this.modelType = modelType;
  }


  public MathModelChildSummary geometryDimension(Integer geometryDimension) {
    this.geometryDimension = geometryDimension;
    return this;
  }

   /**
   * Get geometryDimension
   * @return geometryDimension
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GEOMETRY_DIMENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getGeometryDimension() {
    return geometryDimension;
  }


  @JsonProperty(JSON_PROPERTY_GEOMETRY_DIMENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGeometryDimension(Integer geometryDimension) {
    this.geometryDimension = geometryDimension;
  }


  public MathModelChildSummary geometryName(String geometryName) {
    this.geometryName = geometryName;
    return this;
  }

   /**
   * Get geometryName
   * @return geometryName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GEOMETRY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGeometryName() {
    return geometryName;
  }


  @JsonProperty(JSON_PROPERTY_GEOMETRY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGeometryName(String geometryName) {
    this.geometryName = geometryName;
  }


  public MathModelChildSummary simulationAnnotations(List<String> simulationAnnotations) {
    this.simulationAnnotations = simulationAnnotations;
    return this;
  }

  public MathModelChildSummary addSimulationAnnotationsItem(String simulationAnnotationsItem) {
    if (this.simulationAnnotations == null) {
      this.simulationAnnotations = new ArrayList<>();
    }
    this.simulationAnnotations.add(simulationAnnotationsItem);
    return this;
  }

   /**
   * Get simulationAnnotations
   * @return simulationAnnotations
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIMULATION_ANNOTATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSimulationAnnotations() {
    return simulationAnnotations;
  }


  @JsonProperty(JSON_PROPERTY_SIMULATION_ANNOTATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSimulationAnnotations(List<String> simulationAnnotations) {
    this.simulationAnnotations = simulationAnnotations;
  }


  public MathModelChildSummary simulationNames(List<String> simulationNames) {
    this.simulationNames = simulationNames;
    return this;
  }

  public MathModelChildSummary addSimulationNamesItem(String simulationNamesItem) {
    if (this.simulationNames == null) {
      this.simulationNames = new ArrayList<>();
    }
    this.simulationNames.add(simulationNamesItem);
    return this;
  }

   /**
   * Get simulationNames
   * @return simulationNames
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIMULATION_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSimulationNames() {
    return simulationNames;
  }


  @JsonProperty(JSON_PROPERTY_SIMULATION_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSimulationNames(List<String> simulationNames) {
    this.simulationNames = simulationNames;
  }


  /**
   * Return true if this MathModelChildSummary object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MathModelChildSummary mathModelChildSummary = (MathModelChildSummary) o;
    return Objects.equals(this.geoName, mathModelChildSummary.geoName) &&
        Objects.equals(this.geoDim, mathModelChildSummary.geoDim) &&
        Objects.equals(this.simNames, mathModelChildSummary.simNames) &&
        Objects.equals(this.simAnnots, mathModelChildSummary.simAnnots) &&
        Objects.equals(this.modelType, mathModelChildSummary.modelType) &&
        Objects.equals(this.geometryDimension, mathModelChildSummary.geometryDimension) &&
        Objects.equals(this.geometryName, mathModelChildSummary.geometryName) &&
        Objects.equals(this.simulationAnnotations, mathModelChildSummary.simulationAnnotations) &&
        Objects.equals(this.simulationNames, mathModelChildSummary.simulationNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(geoName, geoDim, simNames, simAnnots, modelType, geometryDimension, geometryName, simulationAnnotations, simulationNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MathModelChildSummary {\n");
    sb.append("    geoName: ").append(toIndentedString(geoName)).append("\n");
    sb.append("    geoDim: ").append(toIndentedString(geoDim)).append("\n");
    sb.append("    simNames: ").append(toIndentedString(simNames)).append("\n");
    sb.append("    simAnnots: ").append(toIndentedString(simAnnots)).append("\n");
    sb.append("    modelType: ").append(toIndentedString(modelType)).append("\n");
    sb.append("    geometryDimension: ").append(toIndentedString(geometryDimension)).append("\n");
    sb.append("    geometryName: ").append(toIndentedString(geometryName)).append("\n");
    sb.append("    simulationAnnotations: ").append(toIndentedString(simulationAnnotations)).append("\n");
    sb.append("    simulationNames: ").append(toIndentedString(simulationNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `geoName` to the URL query string
    if (getGeoName() != null) {
      joiner.add(String.format("%sgeoName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGeoName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `geoDim` to the URL query string
    if (getGeoDim() != null) {
      joiner.add(String.format("%sgeoDim%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGeoDim()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `simNames` to the URL query string
    if (getSimNames() != null) {
      for (int i = 0; i < getSimNames().size(); i++) {
        joiner.add(String.format("%ssimNames%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getSimNames().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `simAnnots` to the URL query string
    if (getSimAnnots() != null) {
      for (int i = 0; i < getSimAnnots().size(); i++) {
        joiner.add(String.format("%ssimAnnots%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getSimAnnots().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `modelType` to the URL query string
    if (getModelType() != null) {
      joiner.add(String.format("%smodelType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModelType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `geometryDimension` to the URL query string
    if (getGeometryDimension() != null) {
      joiner.add(String.format("%sgeometryDimension%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGeometryDimension()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `geometryName` to the URL query string
    if (getGeometryName() != null) {
      joiner.add(String.format("%sgeometryName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGeometryName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `simulationAnnotations` to the URL query string
    if (getSimulationAnnotations() != null) {
      for (int i = 0; i < getSimulationAnnotations().size(); i++) {
        joiner.add(String.format("%ssimulationAnnotations%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getSimulationAnnotations().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `simulationNames` to the URL query string
    if (getSimulationNames() != null) {
      for (int i = 0; i < getSimulationNames().size(); i++) {
        joiner.add(String.format("%ssimulationNames%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getSimulationNames().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

