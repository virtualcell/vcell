/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.vcell.restclient.model.SPECIALCLAIM;
import org.vcell.restclient.model.User;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.vcell.restclient.JSON;
/**
 * SpecialUser
 */
@JsonPropertyOrder({
  SpecialUser.JSON_PROPERTY_IS_SPECIAL,
  SpecialUser.JSON_PROPERTY_MY_SPECIALS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonIgnoreProperties(
  value = "isSpecial", // ignore manually set isSpecial, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the isSpecial to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "isSpecial", visible = true)

public class SpecialUser extends User {
  public static final String JSON_PROPERTY_IS_SPECIAL = "isSpecial";
  private String isSpecial = "yes";

  public static final String JSON_PROPERTY_MY_SPECIALS = "mySpecials";
  private List<SPECIALCLAIM> mySpecials;

  public SpecialUser() { 
  }

  public SpecialUser isSpecial(String isSpecial) {
    this.isSpecial = isSpecial;
    return this;
  }

   /**
   * Get isSpecial
   * @return isSpecial
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_SPECIAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIsSpecial() {
    return isSpecial;
  }


  @JsonProperty(JSON_PROPERTY_IS_SPECIAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsSpecial(String isSpecial) {
    this.isSpecial = isSpecial;
  }


  public SpecialUser mySpecials(List<SPECIALCLAIM> mySpecials) {
    this.mySpecials = mySpecials;
    return this;
  }

  public SpecialUser addMySpecialsItem(SPECIALCLAIM mySpecialsItem) {
    if (this.mySpecials == null) {
      this.mySpecials = new ArrayList<>();
    }
    this.mySpecials.add(mySpecialsItem);
    return this;
  }

   /**
   * Get mySpecials
   * @return mySpecials
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MY_SPECIALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SPECIALCLAIM> getMySpecials() {
    return mySpecials;
  }


  @JsonProperty(JSON_PROPERTY_MY_SPECIALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMySpecials(List<SPECIALCLAIM> mySpecials) {
    this.mySpecials = mySpecials;
  }


  @Override
  public SpecialUser userName(String userName) {
    this.setUserName(userName);
    return this;
  }

  @Override
  public SpecialUser key(String key) {
    this.setKey(key);
    return this;
  }

  /**
   * Return true if this SpecialUser object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpecialUser specialUser = (SpecialUser) o;
    return Objects.equals(this.isSpecial, specialUser.isSpecial) &&
        Objects.equals(this.mySpecials, specialUser.mySpecials) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isSpecial, mySpecials, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpecialUser {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    isSpecial: ").append(toIndentedString(isSpecial)).append("\n");
    sb.append("    mySpecials: ").append(toIndentedString(mySpecials)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `isSpecial` to the URL query string
    if (getIsSpecial() != null) {
      joiner.add(String.format("%sisSpecial%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsSpecial()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `userName` to the URL query string
    if (getUserName() != null) {
      joiner.add(String.format("%suserName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `key` to the URL query string
    if (getKey() != null) {
      joiner.add(String.format("%skey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getKey()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("SpecialUser", SpecialUser.class);
  JSON.registerDiscriminator(SpecialUser.class, "isSpecial", mappings);
}
}

