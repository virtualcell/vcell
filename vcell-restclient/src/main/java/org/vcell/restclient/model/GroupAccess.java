/*
 * VCell API
 * VCell API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vcell_support@uchc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.vcell.restclient.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.vcell.restclient.JSON;
/**
 * GroupAccess
 */
@JsonPropertyOrder({
  GroupAccess.JSON_PROPERTY_GROUPID,
  GroupAccess.JSON_PROPERTY_DESCRIPTION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = GroupAccessAll.class, name = "all"),
  @JsonSubTypes.Type(value = GroupAccessNone.class, name = "none"),
  @JsonSubTypes.Type(value = GroupAccessSome.class, name = "some"),
})

public class GroupAccess {
  public static final String JSON_PROPERTY_GROUPID = "groupid";
  private BigDecimal groupid;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public GroupAccess() { 
  }

  public GroupAccess groupid(BigDecimal groupid) {
    this.groupid = groupid;
    return this;
  }

   /**
   * Get groupid
   * @return groupid
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_GROUPID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getGroupid() {
    return groupid;
  }


  @JsonProperty(JSON_PROPERTY_GROUPID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGroupid(BigDecimal groupid) {
    this.groupid = groupid;
  }


  public GroupAccess description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Return true if this GroupAccess object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupAccess groupAccess = (GroupAccess) o;
    return Objects.equals(this.groupid, groupAccess.groupid) &&
        Objects.equals(this.description, groupAccess.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupid, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupAccess {\n");
    sb.append("    groupid: ").append(toIndentedString(groupid)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `groupid` to the URL query string
    if (getGroupid() != null) {
      joiner.add(String.format("%sgroupid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGroupid()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("all", GroupAccessAll.class);
  mappings.put("none", GroupAccessNone.class);
  mappings.put("some", GroupAccessSome.class);
  mappings.put("GroupAccess", GroupAccess.class);
  JSON.registerDiscriminator(GroupAccess.class, "type", mappings);
}
}

